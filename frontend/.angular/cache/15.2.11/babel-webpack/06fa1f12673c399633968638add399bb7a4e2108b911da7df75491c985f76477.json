{"ast":null,"code":"import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/scrolling';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS } from '@angular/material/progress-spinner';\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS as MAT_LEGACY_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY as MAT_LEGACY_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY } from '@angular/material/progress-spinner';\nimport { Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nfunction MatLegacyProgressSpinner__svg_circle_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"circle\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    const _r0 = i0.ɵɵreference(1);\n    i0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r1._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r1._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r1._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r1._getCircleStrokeWidth(), \"%\")(\"transform-origin\", ctx_r1._getCircleTransformOrigin(_r0));\n    i0.ɵɵattribute(\"r\", ctx_r1._getCircleRadius());\n  }\n}\nfunction MatLegacyProgressSpinner__svg_circle_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"circle\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    const _r0 = i0.ɵɵreference(1);\n    i0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r2._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r2._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r2._getCircleStrokeWidth(), \"%\")(\"transform-origin\", ctx_r2._getCircleTransformOrigin(_r0));\n    i0.ɵɵattribute(\"r\", ctx_r2._getCircleRadius());\n  }\n}\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatLegacyProgressSpinner.\n/** @docs-private */\nconst _MatProgressSpinnerBase = mixinColor(class {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}, 'primary');\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n * @deprecated Use `MatProgressSpinner` from `@angular/material/progress-spinner` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyProgressSpinner extends _MatProgressSpinnerBase {\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  get diameter() {\n    return this._diameter;\n  }\n  set diameter(size) {\n    this._diameter = coerceNumberProperty(size);\n    this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n    // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n    if (this._styleRoot) {\n      this._attachStyleNode();\n    }\n  }\n  /** Stroke width of the progress spinner. */\n  get strokeWidth() {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n  /** Value of the progress circle. */\n  get value() {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n  constructor(elementRef, _platform, _document, animationMode, defaults,\n  /**\n   * @deprecated `changeDetectorRef`, `viewportRuler` and `ngZone`\n   * parameters to become required.\n   * @breaking-change 14.0.0\n   */\n  changeDetectorRef, viewportRuler, ngZone) {\n    super(elementRef);\n    this._document = _document;\n    this._diameter = BASE_SIZE;\n    this._value = 0;\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Mode of the progress circle */\n    this.mode = 'determinate';\n    const trackedDiameters = MatLegacyProgressSpinner._diameters;\n    this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n    // The base size is already inserted via the component's structural styles. We still\n    // need to track it so we don't end up adding the same styles again.\n    if (!trackedDiameters.has(_document.head)) {\n      trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n    }\n    this._noopAnimations = animationMode === 'NoopAnimations' && !!defaults && !defaults._forceAnimations;\n    if (elementRef.nativeElement.nodeName.toLowerCase() === 'mat-spinner') {\n      this.mode = 'indeterminate';\n    }\n    if (defaults) {\n      if (defaults.color) {\n        this.color = this.defaultColor = defaults.color;\n      }\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n    // Safari has an issue where the circle isn't positioned correctly when the page has a\n    // different zoom level from the default. This handler triggers a recalculation of the\n    // `transform-origin` when the page zoom level changes.\n    // See `_getCircleTransformOrigin` for more info.\n    // @breaking-change 14.0.0 Remove null checks for `_changeDetectorRef`,\n    // `viewportRuler` and `ngZone`.\n    if (_platform.isBrowser && _platform.SAFARI && viewportRuler && changeDetectorRef && ngZone) {\n      this._resizeSubscription = viewportRuler.change(150).subscribe(() => {\n        // When the window is resize while the spinner is in `indeterminate` mode, we\n        // have to mark for check so the transform origin of the circle can be recomputed.\n        if (this.mode === 'indeterminate') {\n          ngZone.run(() => changeDetectorRef.markForCheck());\n        }\n      });\n    }\n  }\n  ngOnInit() {\n    const element = this._elementRef.nativeElement;\n    // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n    // Angular seems to create the element outside the shadow root and then moves it inside, if the\n    // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n    this._styleRoot = _getShadowRoot(element) || this._document.head;\n    this._attachStyleNode();\n    element.classList.add('mat-progress-spinner-indeterminate-animation');\n  }\n  ngOnDestroy() {\n    this._resizeSubscription.unsubscribe();\n  }\n  /** The radius of the spinner, adjusted for stroke width. */\n  _getCircleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n  /** The view box of the spinner's svg element. */\n  _getViewBox() {\n    const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n  /** The stroke circumference of the svg circle. */\n  _getStrokeCircumference() {\n    return 2 * Math.PI * this._getCircleRadius();\n  }\n  /** The dash offset of the svg circle. */\n  _getStrokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._getStrokeCircumference() * (100 - this._value) / 100;\n    }\n    return null;\n  }\n  /** Stroke width of the circle in percent. */\n  _getCircleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n  /** Gets the `transform-origin` for the inner circle element. */\n  _getCircleTransformOrigin(svg) {\n    // Safari has an issue where the `transform-origin` doesn't work as expected when the page\n    // has a different zoom level from the default. The problem appears to be that a zoom\n    // is applied on the `svg` node itself. We can work around it by calculating the origin\n    // based on the zoom level. On all other browsers the `currentScale` appears to always be 1.\n    const scale = (svg.currentScale ?? 1) * 50;\n    return `${scale}% ${scale}%`;\n  }\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  _attachStyleNode() {\n    const styleRoot = this._styleRoot;\n    const currentDiameter = this._diameter;\n    const diameters = MatLegacyProgressSpinner._diameters;\n    let diametersForElement = diameters.get(styleRoot);\n    if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n      const styleTag = this._document.createElement('style');\n      styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n      styleTag.textContent = this._getAnimationText();\n      styleRoot.appendChild(styleTag);\n      if (!diametersForElement) {\n        diametersForElement = new Set();\n        diameters.set(styleRoot, diametersForElement);\n      }\n      diametersForElement.add(currentDiameter);\n    }\n  }\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  _getAnimationText() {\n    const strokeCircumference = this._getStrokeCircumference();\n    return INDETERMINATE_ANIMATION_TEMPLATE\n    // Animation should begin at 5% and end at 80%\n    .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`).replace(/END_VALUE/g, `${0.2 * strokeCircumference}`).replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`);\n  }\n  /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n  _getSpinnerAnimationLabel() {\n    // The string of a float point number will include a period ‘.’ character,\n    // which is not valid for a CSS animation-name.\n    return this.diameter.toString().replace('.', '_');\n  }\n}\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatLegacyProgressSpinner._diameters = new WeakMap();\nMatLegacyProgressSpinner.ɵfac = function MatLegacyProgressSpinner_Factory(t) {\n  return new (t || MatLegacyProgressSpinner)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.ViewportRuler), i0.ɵɵdirectiveInject(i0.NgZone));\n};\nMatLegacyProgressSpinner.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatLegacyProgressSpinner,\n  selectors: [[\"mat-progress-spinner\"], [\"mat-spinner\"]],\n  hostAttrs: [\"role\", \"progressbar\", \"tabindex\", \"-1\", 1, \"mat-progress-spinner\", \"mat-spinner\"],\n  hostVars: 10,\n  hostBindings: function MatLegacyProgressSpinner_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.mode === \"determinate\" ? ctx.value : null)(\"mode\", ctx.mode);\n      i0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      i0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    diameter: \"diameter\",\n    strokeWidth: \"strokeWidth\",\n    mode: \"mode\",\n    value: \"value\"\n  },\n  exportAs: [\"matProgressSpinner\"],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 4,\n  vars: 8,\n  consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 3, \"ngSwitch\"], [\"svg\", \"\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", \"transform-origin\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", \"transform-origin\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]],\n  template: function MatLegacyProgressSpinner_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"svg\", 0, 1);\n      i0.ɵɵtemplate(2, MatLegacyProgressSpinner__svg_circle_2_Template, 1, 11, \"circle\", 2);\n      i0.ɵɵtemplate(3, MatLegacyProgressSpinner__svg_circle_3_Template, 1, 9, \"circle\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n      i0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n      i0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngSwitchCase\", true);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", false);\n    }\n  },\n  dependencies: [i3.NgSwitch, i3.NgSwitchCase],\n  styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:rgba(0,0,0,0);transition:stroke-dashoffset 225ms linear}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}.mat-progress-spinner[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}.mat-progress-spinner._mat-animation-noopable svg,.mat-progress-spinner._mat-animation-noopable circle{animation:none;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyProgressSpinner, [{\n    type: Component,\n    args: [{\n      selector: 'mat-progress-spinner, mat-spinner',\n      exportAs: 'matProgressSpinner',\n      host: {\n        'role': 'progressbar',\n        // `mat-spinner` is here for backward compatibility.\n        'class': 'mat-progress-spinner mat-spinner',\n        // set tab index to -1 so screen readers will read the aria-label\n        // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n        'tabindex': '-1',\n        '[class._mat-animation-noopable]': `_noopAnimations`,\n        '[style.width.px]': 'diameter',\n        '[style.height.px]': 'diameter',\n        '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n        '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n        '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n        '[attr.mode]': 'mode'\n      },\n      inputs: ['color'],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\",\n      styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:rgba(0,0,0,0);transition:stroke-dashoffset 225ms linear}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}.mat-progress-spinner[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}.mat-progress-spinner._mat-animation-noopable svg,.mat-progress-spinner._mat-animation-noopable circle{animation:none;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i2.ViewportRuler\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    diameter: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    mode: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Use `MatProgressSpinnerModule` from `@angular/material/progress-spinner` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyProgressSpinnerModule {}\nMatLegacyProgressSpinnerModule.ɵfac = function MatLegacyProgressSpinnerModule_Factory(t) {\n  return new (t || MatLegacyProgressSpinnerModule)();\n};\nMatLegacyProgressSpinnerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatLegacyProgressSpinnerModule\n});\nMatLegacyProgressSpinnerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [MatCommonModule, CommonModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyProgressSpinnerModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, CommonModule],\n      exports: [MatLegacyProgressSpinner, MatCommonModule],\n      declarations: [MatLegacyProgressSpinner]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Import Progress Spinner instead. Note that the\n *    `mat-spinner` selector isn't deprecated.\n * @breaking-change 8.0.0\n */\n// tslint:disable-next-line:variable-name\nconst MatLegacySpinner = MatLegacyProgressSpinner;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatLegacyProgressSpinner, MatLegacyProgressSpinnerModule, MatLegacySpinner };","map":{"version":3,"names":["coerceNumberProperty","i1","_getShadowRoot","i2","i3","DOCUMENT","CommonModule","i0","Component","ChangeDetectionStrategy","ViewEncapsulation","Optional","Inject","Input","NgModule","mixinColor","MatCommonModule","ANIMATION_MODULE_TYPE","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_LEGACY_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","MAT_LEGACY_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","Subscription","BASE_SIZE","BASE_STROKE_WIDTH","_MatProgressSpinnerBase","constructor","_elementRef","INDETERMINATE_ANIMATION_TEMPLATE","MatLegacyProgressSpinner","diameter","_diameter","size","_spinnerAnimationLabel","_getSpinnerAnimationLabel","_styleRoot","_attachStyleNode","strokeWidth","_strokeWidth","value","mode","_value","newValue","Math","max","min","elementRef","_platform","_document","animationMode","defaults","changeDetectorRef","viewportRuler","ngZone","_resizeSubscription","EMPTY","trackedDiameters","_diameters","has","head","set","Set","_noopAnimations","_forceAnimations","nativeElement","nodeName","toLowerCase","color","defaultColor","isBrowser","SAFARI","change","subscribe","run","markForCheck","ngOnInit","element","classList","add","ngOnDestroy","unsubscribe","_getCircleRadius","_getViewBox","viewBox","_getStrokeCircumference","PI","_getStrokeDashOffset","_getCircleStrokeWidth","_getCircleTransformOrigin","svg","scale","currentScale","styleRoot","currentDiameter","diameters","diametersForElement","get","styleTag","createElement","setAttribute","textContent","_getAnimationText","appendChild","strokeCircumference","replace","toString","WeakMap","ɵfac","ElementRef","Platform","ChangeDetectorRef","ViewportRuler","NgZone","ɵcmp","NgSwitch","NgSwitchCase","type","args","selector","exportAs","host","inputs","changeDetection","OnPush","encapsulation","None","template","styles","undefined","decorators","MatLegacyProgressSpinnerModule","ɵmod","ɵinj","imports","exports","declarations","MatLegacySpinner"],"sources":["/Users/marieklinaeva/github/ck-board/frontend/node_modules/@angular/material/fesm2020/legacy-progress-spinner.mjs"],"sourcesContent":["import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport * as i2 from '@angular/cdk/scrolling';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS } from '@angular/material/progress-spinner';\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS as MAT_LEGACY_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY as MAT_LEGACY_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY } from '@angular/material/progress-spinner';\nimport { Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatLegacyProgressSpinner.\n/** @docs-private */\nconst _MatProgressSpinnerBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}, 'primary');\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n * @deprecated Use `MatProgressSpinner` from `@angular/material/progress-spinner` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyProgressSpinner extends _MatProgressSpinnerBase {\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    get diameter() {\n        return this._diameter;\n    }\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n        if (this._styleRoot) {\n            this._attachStyleNode();\n        }\n    }\n    /** Stroke width of the progress spinner. */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /** Value of the progress circle. */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    constructor(elementRef, _platform, _document, animationMode, defaults, \n    /**\n     * @deprecated `changeDetectorRef`, `viewportRuler` and `ngZone`\n     * parameters to become required.\n     * @breaking-change 14.0.0\n     */\n    changeDetectorRef, viewportRuler, ngZone) {\n        super(elementRef);\n        this._document = _document;\n        this._diameter = BASE_SIZE;\n        this._value = 0;\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Mode of the progress circle */\n        this.mode = 'determinate';\n        const trackedDiameters = MatLegacyProgressSpinner._diameters;\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        this._noopAnimations =\n            animationMode === 'NoopAnimations' && !!defaults && !defaults._forceAnimations;\n        if (elementRef.nativeElement.nodeName.toLowerCase() === 'mat-spinner') {\n            this.mode = 'indeterminate';\n        }\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this.defaultColor = defaults.color;\n            }\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n        // Safari has an issue where the circle isn't positioned correctly when the page has a\n        // different zoom level from the default. This handler triggers a recalculation of the\n        // `transform-origin` when the page zoom level changes.\n        // See `_getCircleTransformOrigin` for more info.\n        // @breaking-change 14.0.0 Remove null checks for `_changeDetectorRef`,\n        // `viewportRuler` and `ngZone`.\n        if (_platform.isBrowser && _platform.SAFARI && viewportRuler && changeDetectorRef && ngZone) {\n            this._resizeSubscription = viewportRuler.change(150).subscribe(() => {\n                // When the window is resize while the spinner is in `indeterminate` mode, we\n                // have to mark for check so the transform origin of the circle can be recomputed.\n                if (this.mode === 'indeterminate') {\n                    ngZone.run(() => changeDetectorRef.markForCheck());\n                }\n            });\n        }\n    }\n    ngOnInit() {\n        const element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\n        this._attachStyleNode();\n        element.classList.add('mat-progress-spinner-indeterminate-animation');\n    }\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n    /** The radius of the spinner, adjusted for stroke width. */\n    _getCircleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /** The view box of the spinner's svg element. */\n    _getViewBox() {\n        const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /** The stroke circumference of the svg circle. */\n    _getStrokeCircumference() {\n        return 2 * Math.PI * this._getCircleRadius();\n    }\n    /** The dash offset of the svg circle. */\n    _getStrokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return (this._getStrokeCircumference() * (100 - this._value)) / 100;\n        }\n        return null;\n    }\n    /** Stroke width of the circle in percent. */\n    _getCircleStrokeWidth() {\n        return (this.strokeWidth / this.diameter) * 100;\n    }\n    /** Gets the `transform-origin` for the inner circle element. */\n    _getCircleTransformOrigin(svg) {\n        // Safari has an issue where the `transform-origin` doesn't work as expected when the page\n        // has a different zoom level from the default. The problem appears to be that a zoom\n        // is applied on the `svg` node itself. We can work around it by calculating the origin\n        // based on the zoom level. On all other browsers the `currentScale` appears to always be 1.\n        const scale = (svg.currentScale ?? 1) * 50;\n        return `${scale}% ${scale}%`;\n    }\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    _attachStyleNode() {\n        const styleRoot = this._styleRoot;\n        const currentDiameter = this._diameter;\n        const diameters = MatLegacyProgressSpinner._diameters;\n        let diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            const styleTag = this._document.createElement('style');\n            styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    }\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    _getAnimationText() {\n        const strokeCircumference = this._getStrokeCircumference();\n        return (INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`));\n    }\n    /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n    _getSpinnerAnimationLabel() {\n        // The string of a float point number will include a period ‘.’ character,\n        // which is not valid for a CSS animation-name.\n        return this.diameter.toString().replace('.', '_');\n    }\n}\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatLegacyProgressSpinner._diameters = new WeakMap();\nMatLegacyProgressSpinner.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyProgressSpinner, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: DOCUMENT, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }, { token: i2.ViewportRuler }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nMatLegacyProgressSpinner.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyProgressSpinner, selector: \"mat-progress-spinner, mat-spinner\", inputs: { color: \"color\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", mode: \"mode\", value: \"value\" }, host: { attributes: { \"role\": \"progressbar\", \"tabindex\": \"-1\" }, properties: { \"class._mat-animation-noopable\": \"_noopAnimations\", \"style.width.px\": \"diameter\", \"style.height.px\": \"diameter\", \"attr.aria-valuemin\": \"mode === \\\"determinate\\\" ? 0 : null\", \"attr.aria-valuemax\": \"mode === \\\"determinate\\\" ? 100 : null\", \"attr.aria-valuenow\": \"mode === \\\"determinate\\\" ? value : null\", \"attr.mode\": \"mode\" }, classAttribute: \"mat-progress-spinner mat-spinner\" }, exportAs: [\"matProgressSpinner\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:rgba(0,0,0,0);transition:stroke-dashoffset 225ms linear}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}.mat-progress-spinner[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}.mat-progress-spinner._mat-animation-noopable svg,.mat-progress-spinner._mat-animation-noopable circle{animation:none;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\"], dependencies: [{ kind: \"directive\", type: i3.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i3.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyProgressSpinner, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-progress-spinner, mat-spinner', exportAs: 'matProgressSpinner', host: {\n                        'role': 'progressbar',\n                        // `mat-spinner` is here for backward compatibility.\n                        'class': 'mat-progress-spinner mat-spinner',\n                        // set tab index to -1 so screen readers will read the aria-label\n                        // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n                        'tabindex': '-1',\n                        '[class._mat-animation-noopable]': `_noopAnimations`,\n                        '[style.width.px]': 'diameter',\n                        '[style.height.px]': 'diameter',\n                        '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                        '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                        '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                        '[attr.mode]': 'mode',\n                    }, inputs: ['color'], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:rgba(0,0,0,0);transition:stroke-dashoffset 225ms linear}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}.mat-progress-spinner[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}.mat-progress-spinner._mat-animation-noopable svg,.mat-progress-spinner._mat-animation-noopable circle{animation:none;transition:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }, { type: i2.ViewportRuler }, { type: i0.NgZone }]; }, propDecorators: { diameter: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Use `MatProgressSpinnerModule` from `@angular/material/progress-spinner` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyProgressSpinnerModule {\n}\nMatLegacyProgressSpinnerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyProgressSpinnerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatLegacyProgressSpinnerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyProgressSpinnerModule, declarations: [MatLegacyProgressSpinner], imports: [MatCommonModule, CommonModule], exports: [MatLegacyProgressSpinner, MatCommonModule] });\nMatLegacyProgressSpinnerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyProgressSpinnerModule, imports: [MatCommonModule, CommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyProgressSpinnerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CommonModule],\n                    exports: [MatLegacyProgressSpinner, MatCommonModule],\n                    declarations: [MatLegacyProgressSpinner],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Import Progress Spinner instead. Note that the\n *    `mat-spinner` selector isn't deprecated.\n * @breaking-change 8.0.0\n */\n// tslint:disable-next-line:variable-name\nconst MatLegacySpinner = MatLegacyProgressSpinner;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatLegacyProgressSpinner, MatLegacyProgressSpinnerModule, MatLegacySpinner };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}