{"ast":null,"code":"import _asyncToGenerator from \"/Users/marieklinaeva/github/ck-board/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { NotificationType } from 'src/app/models/notification';\nimport { SocketEvent } from 'src/app/utils/constants';\nimport { PostModalComponent } from '../post-modal/post-modal.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/notification.service\";\nimport * as i2 from \"src/app/services/post.service\";\nimport * as i3 from \"src/app/services/socket.service\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"src/app/services/canvas.service\";\nfunction NotificationDropdownComponent_mat_icon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 6);\n    i0.ɵɵtext(1, \"notifications_active\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"matBadge\", ctx_r0.notifications.length);\n  }\n}\nfunction NotificationDropdownComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\");\n    i0.ɵɵtext(1, \"notifications\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NotificationDropdownComponent_div_6_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function NotificationDropdownComponent_div_6_button_1_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const notification_r8 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.openPost(notification_r8));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const notification_r8 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", notification_r8.text, \" \");\n  }\n}\nfunction NotificationDropdownComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NotificationDropdownComponent_div_6_button_1_Template, 2, 1, \"button\", 7);\n    i0.ɵɵelementStart(2, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function NotificationDropdownComponent_div_6_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.markAllAsRead());\n    });\n    i0.ɵɵtext(3, \"Mark all as read\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.notifications.reverse());\n  }\n}\nfunction NotificationDropdownComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 10);\n    i0.ɵɵtext(1, \"No notifications to display\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class NotificationDropdownComponent {\n  constructor(notificationService, postService, socketService, dialog, canvasService) {\n    this.notificationService = notificationService;\n    this.postService = postService;\n    this.socketService = socketService;\n    this.dialog = dialog;\n    this.canvasService = canvasService;\n    this.notifications = [];\n    this.unsubListeners = [];\n    this.handleAdd = notification => {\n      this.notifications.push(notification);\n    };\n  }\n  ngOnInit() {\n    this.notificationService.getByUserAndBoard(this.user.userID, this.board.boardID).then(notifications => {\n      this.notifications = notifications;\n      this.initGroupEventsListener();\n    });\n  }\n  initGroupEventsListener() {\n    const unsub = this.socketService.listen(SocketEvent.BOARD_NOTIFICATION_CREATE, this.handleAdd);\n    this.unsubListeners.push(unsub);\n  }\n  openPost(notification) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (notification.postID) {\n        const post = yield _this.postService.get(notification.postID);\n        _this.dialog.open(PostModalComponent, {\n          minWidth: '700px',\n          width: 'auto',\n          data: {\n            user: _this.user,\n            post: post,\n            board: _this.board\n          }\n        });\n        yield _this.canvasService.readPost(post.postID);\n        yield _this.notificationService.markAsRead(NotificationType.BOARD, notification.notificationID);\n        _this.deleteNotification(notification);\n      }\n    })();\n  }\n  markAllAsRead() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.notifications.forEach(notification => {\n        _this2.notificationService.markAsRead(NotificationType.BOARD, notification.notificationID);\n        _this2.deleteNotification(notification);\n      });\n    })();\n  }\n  deleteNotification(notification) {\n    if (this.notifications) {\n      this.notifications = this.notifications.filter(currentNotification => currentNotification.notificationID != notification.notificationID);\n    }\n    this.notificationService.remove(NotificationType.BOARD, notification.notificationID);\n  }\n  ngOnDestroy() {\n    this.notifications = [];\n    this.unsubListeners.forEach(unsub => unsub.unsubscribe());\n  }\n}\nNotificationDropdownComponent.ɵfac = function NotificationDropdownComponent_Factory(t) {\n  return new (t || NotificationDropdownComponent)(i0.ɵɵdirectiveInject(i1.NotificationService), i0.ɵɵdirectiveInject(i2.PostService), i0.ɵɵdirectiveInject(i3.SocketService), i0.ɵɵdirectiveInject(i4.MatDialog), i0.ɵɵdirectiveInject(i5.CanvasService));\n};\nNotificationDropdownComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NotificationDropdownComponent,\n  selectors: [[\"app-notification-dropdown\"]],\n  inputs: {\n    user: \"user\",\n    board: \"board\"\n  },\n  decls: 9,\n  vars: 5,\n  consts: [[\"mat-icon-button\", \"\", \"matTooltip\", \"Board Notifications\", 3, \"matMenuTriggerFor\"], [3, \"matBadge\", 4, \"ngIf\", \"ngIfElse\"], [\"elseBlock\", \"\"], [\"menu\", \"matMenu\"], [4, \"ngIf\", \"ngIfElse\"], [\"matMenuElse\", \"\"], [3, \"matBadge\"], [\"mat-menu-item\", \"\", \"style\", \"white-space: unset; line-height: normal\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-menu-item\", \"\", 2, \"white-space\", \"unset\", \"line-height\", \"normal\", 3, \"click\"], [\"mat-menu-item\", \"\"]],\n  template: function NotificationDropdownComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵtemplate(1, NotificationDropdownComponent_mat_icon_1_Template, 2, 1, \"mat-icon\", 1);\n      i0.ɵɵtemplate(2, NotificationDropdownComponent_ng_template_2_Template, 2, 0, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"mat-menu\", null, 3);\n      i0.ɵɵtemplate(6, NotificationDropdownComponent_div_6_Template, 4, 1, \"div\", 4);\n      i0.ɵɵtemplate(7, NotificationDropdownComponent_ng_template_7_Template, 2, 0, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(3);\n      const _r3 = i0.ɵɵreference(5);\n      const _r5 = i0.ɵɵreference(8);\n      i0.ɵɵproperty(\"matMenuTriggerFor\", _r3);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.notifications && ctx.notifications.length > 0)(\"ngIfElse\", _r1);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.notifications && ctx.notifications.length > 0)(\"ngIfElse\", _r5);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["NotificationType","SocketEvent","PostModalComponent","i0","NotificationDropdownComponent","constructor","notificationService","postService","socketService","dialog","canvasService","notification","notifications","push","ngOnInit","getByUserAndBoard","user","userID","board","boardID","then","initGroupEventsListener","unsub","listen","BOARD_NOTIFICATION_CREATE","handleAdd","unsubListeners","openPost","postID","post","get","open","minWidth","width","data","readPost","markAsRead","BOARD","notificationID","deleteNotification","markAllAsRead","forEach","filter","currentNotification","remove","ngOnDestroy","unsubscribe","selectors","inputs","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/components/notification-dropdown/notification-dropdown.component.ts","/Users/marieklinaeva/github/ck-board/frontend/src/app/components/notification-dropdown/notification-dropdown.component.html"],"sourcesContent":["import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Subscription } from 'rxjs';\nimport { Board } from 'src/app/models/board';\nimport {\n  NotificationType,\n  BoardNotification,\n} from 'src/app/models/notification';\nimport { AuthUser } from 'src/app/models/user';\nimport { CanvasService } from 'src/app/services/canvas.service';\nimport { NotificationService } from 'src/app/services/notification.service';\nimport { PostService } from 'src/app/services/post.service';\nimport { SocketService } from 'src/app/services/socket.service';\nimport { SocketEvent } from 'src/app/utils/constants';\nimport { PostModalComponent } from '../post-modal/post-modal.component';\n\n@Component({\n  selector: 'app-notification-dropdown',\n  templateUrl: './notification-dropdown.component.html',\n  styleUrls: ['./notification-dropdown.component.scss'],\n})\nexport class NotificationDropdownComponent implements OnInit, OnDestroy {\n  @Input() user: AuthUser;\n  @Input() board: Board;\n\n  notifications: BoardNotification[] = [];\n  unsubListeners: Subscription[] = [];\n\n  constructor(\n    private notificationService: NotificationService,\n    private postService: PostService,\n    private socketService: SocketService,\n    public dialog: MatDialog,\n    private canvasService: CanvasService\n  ) {}\n\n  ngOnInit(): void {\n    this.notificationService\n      .getByUserAndBoard(this.user.userID, this.board.boardID)\n      .then((notifications) => {\n        this.notifications = notifications;\n        this.initGroupEventsListener();\n      });\n  }\n\n  initGroupEventsListener() {\n    const unsub = this.socketService.listen(\n      SocketEvent.BOARD_NOTIFICATION_CREATE,\n      this.handleAdd\n    );\n    this.unsubListeners.push(unsub);\n  }\n\n  handleAdd = (notification: BoardNotification) => {\n    this.notifications.push(notification);\n  };\n\n  async openPost(notification: BoardNotification) {\n    if (notification.postID) {\n      const post = await this.postService.get(notification.postID);\n      this.dialog.open(PostModalComponent, {\n        minWidth: '700px',\n        width: 'auto',\n        data: {\n          user: this.user,\n          post: post,\n          board: this.board,\n        },\n      });\n      await this.canvasService.readPost(post.postID);\n      await this.notificationService.markAsRead(\n        NotificationType.BOARD,\n        notification.notificationID\n      );\n      this.deleteNotification(notification);\n    }\n  }\n\n  async markAllAsRead() {\n    this.notifications.forEach((notification) => {\n      this.notificationService.markAsRead(\n        NotificationType.BOARD,\n        notification.notificationID\n      );\n      this.deleteNotification(notification);\n    });\n  }\n\n  deleteNotification(notification: BoardNotification) {\n    if (this.notifications) {\n      this.notifications = this.notifications.filter(\n        (currentNotification) =>\n          currentNotification.notificationID != notification.notificationID\n      );\n    }\n    this.notificationService.remove(\n      NotificationType.BOARD,\n      notification.notificationID\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.notifications = [];\n    this.unsubListeners.forEach((unsub) => unsub.unsubscribe());\n  }\n}\n","<button mat-icon-button [matMenuTriggerFor]=\"menu\" matTooltip=\"Board Notifications\">\n  <mat-icon\n    *ngIf=\"notifications && notifications.length > 0; else elseBlock\"\n    matBadge=\"{{ notifications.length }}\"\n    >notifications_active</mat-icon\n  >\n  <ng-template #elseBlock> <mat-icon>notifications</mat-icon></ng-template>\n</button>\n<mat-menu #menu=\"matMenu\">\n  <div *ngIf=\"notifications && notifications.length > 0; else matMenuElse\">\n    <button\n      mat-menu-item\n      (click)=\"openPost(notification)\"\n      *ngFor=\"let notification of notifications.reverse()\"\n      style=\"white-space: unset; line-height: normal\"\n    >\n      {{ notification.text }}\n    </button>\n    <button mat-button (click)=\"markAllAsRead()\">Mark all as read</button>\n  </div>\n  <ng-template #matMenuElse\n    ><p mat-menu-item>No notifications to display</p></ng-template\n  >\n</mat-menu>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}