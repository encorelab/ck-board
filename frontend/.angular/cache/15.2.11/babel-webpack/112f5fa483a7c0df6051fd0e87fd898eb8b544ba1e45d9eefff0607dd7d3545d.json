{"ast":null,"code":"import _asyncToGenerator from \"/Users/marieklinaeva/github/ck-board/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { SocketEvent } from '../utils/constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./socket.service\";\nexport class UpvotesService {\n  constructor(http, socketService) {\n    this.http = http;\n    this.socketService = socketService;\n  }\n  getUpvotesByPost(postID, representation = 'default') {\n    return this.http.get('upvotes/posts/' + postID + '?representation=' + representation).toPromise();\n  }\n  getByBoard(boardID) {\n    return this.http.get('upvotes/board/' + boardID).toPromise();\n  }\n  getByBoardAndUser(boardID, userID) {\n    return this.http.get('upvotes/boards/' + boardID + '/users/' + userID).toPromise();\n  }\n  isUpvotedBy(postID, voterID) {\n    return this.http.get('upvotes/posts/' + postID + '/users/' + voterID).toPromise();\n  }\n  add(upvote) {\n    return this.http.post('upvotes/', {\n      upvote\n    }).toPromise();\n  }\n  remove(userID, postID) {\n    return this.http.delete('upvotes/?user=' + userID + '&post=' + postID).toPromise();\n  }\n  removeByBoard(boardID) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const deletedVotes = yield _this.getByBoard(boardID);\n      _this.http.delete('upvotes/board/' + boardID).toPromise();\n      _this.socketService.emit(SocketEvent.VOTES_CLEAR, deletedVotes);\n    })();\n  }\n}\nUpvotesService.ɵfac = function UpvotesService_Factory(t) {\n  return new (t || UpvotesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SocketService));\n};\nUpvotesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UpvotesService,\n  factory: UpvotesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAIA,SAASA,WAAW,QAAQ,oBAAoB;;;;AAKhD,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,IAAgB,EAAUC,aAA4B;IAAtD,SAAI,GAAJD,IAAI;IAAsB,kBAAa,GAAbC,aAAa;EAAkB;EAE7EC,gBAAgB,CACdC,MAAc,EACdC,cAAc,GAAG,SAAS;IAE1B,OAAO,IAAI,CAACJ,IAAI,CACbK,GAAG,CACF,gBAAgB,GAAGF,MAAM,GAAG,kBAAkB,GAAGC,cAAc,CAChE,CACAE,SAAS,EAAE;EAChB;EAEAC,UAAU,CAACC,OAAe;IACxB,OAAO,IAAI,CAACR,IAAI,CAACK,GAAG,CAAW,gBAAgB,GAAGG,OAAO,CAAC,CAACF,SAAS,EAAE;EACxE;EAEAG,iBAAiB,CAACD,OAAe,EAAEE,MAAc;IAC/C,OAAO,IAAI,CAACV,IAAI,CACbK,GAAG,CAAW,iBAAiB,GAAGG,OAAO,GAAG,SAAS,GAAGE,MAAM,CAAC,CAC/DJ,SAAS,EAAE;EAChB;EAEAK,WAAW,CAACR,MAAc,EAAES,OAAe;IACzC,OAAO,IAAI,CAACZ,IAAI,CACbK,GAAG,CAAgB,gBAAgB,GAAGF,MAAM,GAAG,SAAS,GAAGS,OAAO,CAAC,CACnEN,SAAS,EAAE;EAChB;EAEAO,GAAG,CAACC,MAAc;IAChB,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAC,UAAU,EAAE;MAAED;IAAM,CAAE,CAAC,CAACR,SAAS,EAAE;EAC3D;EAEAU,MAAM,CAACN,MAAc,EAAEP,MAAc;IACnC,OAAO,IAAI,CAACH,IAAI,CACbiB,MAAM,CAAC,gBAAgB,GAAGP,MAAM,GAAG,QAAQ,GAAGP,MAAM,CAAC,CACrDG,SAAS,EAAE;EAChB;EAEMY,aAAa,CAACV,OAAe;IAAA;IAAA;MACjC,MAAMW,YAAY,SAAS,KAAI,CAACZ,UAAU,CAACC,OAAO,CAAC;MACnD,KAAI,CAACR,IAAI,CAACiB,MAAM,CAAC,gBAAgB,GAAGT,OAAO,CAAC,CAACF,SAAS,EAAE;MACxD,KAAI,CAACL,aAAa,CAACmB,IAAI,CAACvB,WAAW,CAACwB,WAAW,EAAEF,YAAY,CAAC;IAAC;EACjE;;;mBA5CWrB,cAAc;AAAA;;SAAdA,cAAc;EAAAwB,SAAdxB,cAAc;EAAAyB,YAFb;AAAM","names":["SocketEvent","UpvotesService","constructor","http","socketService","getUpvotesByPost","postID","representation","get","toPromise","getByBoard","boardID","getByBoardAndUser","userID","isUpvotedBy","voterID","add","upvote","post","remove","delete","removeByBoard","deletedVotes","emit","VOTES_CLEAR","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/services/upvotes.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport Upvote from '../models/upvote';\nimport { SocketService } from './socket.service';\nimport { SocketEvent } from '../utils/constants';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UpvotesService {\n  constructor(private http: HttpClient, private socketService: SocketService) {}\n\n  getUpvotesByPost(\n    postID: string,\n    representation = 'default'\n  ): Promise<Upvote[]> {\n    return this.http\n      .get<Upvote[]>(\n        'upvotes/posts/' + postID + '?representation=' + representation\n      )\n      .toPromise();\n  }\n\n  getByBoard(boardID: string): Promise<Upvote[]> {\n    return this.http.get<Upvote[]>('upvotes/board/' + boardID).toPromise();\n  }\n\n  getByBoardAndUser(boardID: string, userID: string): Promise<Upvote[]> {\n    return this.http\n      .get<Upvote[]>('upvotes/boards/' + boardID + '/users/' + userID)\n      .toPromise();\n  }\n\n  isUpvotedBy(postID: string, voterID: string): Promise<Upvote | null> {\n    return this.http\n      .get<Upvote | null>('upvotes/posts/' + postID + '/users/' + voterID)\n      .toPromise();\n  }\n\n  add(upvote: Upvote): Promise<any> {\n    return this.http.post('upvotes/', { upvote }).toPromise();\n  }\n\n  remove(userID: string, postID: string): Promise<any> {\n    return this.http\n      .delete('upvotes/?user=' + userID + '&post=' + postID)\n      .toPromise();\n  }\n\n  async removeByBoard(boardID: string) {\n    const deletedVotes = await this.getByBoard(boardID);\n    this.http.delete('upvotes/board/' + boardID).toPromise();\n    this.socketService.emit(SocketEvent.VOTES_CLEAR, deletedVotes);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}