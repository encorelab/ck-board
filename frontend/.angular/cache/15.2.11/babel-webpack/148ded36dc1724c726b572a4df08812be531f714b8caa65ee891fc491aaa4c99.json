{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { inject, Directive, NgModule } from '@angular/core';\nimport { MatInput } from '@angular/material/input';\nexport { MAT_INPUT_VALUE_ACCESSOR as MAT_LEGACY_INPUT_VALUE_ACCESSOR, getMatInputUnsupportedTypeError as getMatLegacyInputUnsupportedTypeError } from '@angular/material/input';\nimport { MAT_LEGACY_FORM_FIELD, MatLegacyFormFieldControl, MatLegacyFormFieldModule } from '@angular/material/legacy-form-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport { MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive that allows a native input to work inside a `MatFormField`.\n * @deprecated Use `MatInput` from `@angular/material/input` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyInput extends MatInput {\n  constructor() {\n    super(...arguments);\n    this._legacyFormField = inject(MAT_LEGACY_FORM_FIELD, {\n      optional: true\n    });\n  }\n  _getPlaceholder() {\n    // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n    // screen readers will read it out twice: once from the label and once from the attribute.\n    // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n    // the only one that supports promoting the placeholder to a label.\n    const formField = this._legacyFormField;\n    return formField && formField.appearance === 'legacy' && !formField._hasLabel?.() ? null : this.placeholder;\n  }\n}\nMatLegacyInput.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacyInput_BaseFactory;\n  return function MatLegacyInput_Factory(t) {\n    return (ɵMatLegacyInput_BaseFactory || (ɵMatLegacyInput_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyInput)))(t || MatLegacyInput);\n  };\n}();\nMatLegacyInput.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyInput,\n  selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]],\n  hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"],\n  hostVars: 15,\n  hostBindings: function MatLegacyInput_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"data-placeholder\", ctx.placeholder);\n      i0.ɵɵclassProp(\"mat-input-server\", ctx._isServer)(\"mat-mdc-input-element\", false)(\"mat-mdc-form-field-textarea-control\", false)(\"mat-mdc-form-field-input-control\", false)(\"mdc-text-field__input\", false)(\"mat-mdc-native-select-inline\", false)(\"mat-native-select-inline\", ctx._isInlineSelect());\n    }\n  },\n  exportAs: [\"matInput\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MatLegacyFormFieldControl,\n    useExisting: MatLegacyInput\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyInput, [{\n    type: Directive,\n    args: [{\n      selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n      exportAs: 'matInput',\n      host: {\n        /**\n         * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n         */\n        'class': 'mat-input-element mat-form-field-autofill-control',\n        '[class.mat-input-server]': '_isServer',\n        // These classes are inherited from the base input class and need to be cleared.\n        '[class.mat-mdc-input-element]': 'false',\n        '[class.mat-mdc-form-field-textarea-control]': 'false',\n        '[class.mat-mdc-form-field-input-control]': 'false',\n        '[class.mdc-text-field__input]': 'false',\n        '[class.mat-mdc-native-select-inline]': 'false',\n        // At the time of writing, we have a lot of customer tests that look up the input based on its\n        // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n        // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n        '[attr.data-placeholder]': 'placeholder',\n        '[class.mat-native-select-inline]': '_isInlineSelect()'\n      },\n      providers: [{\n        provide: MatLegacyFormFieldControl,\n        useExisting: MatLegacyInput\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Use `MatInputModule` from `@angular/material/input` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyInputModule {}\nMatLegacyInputModule.ɵfac = function MatLegacyInputModule_Factory(t) {\n  return new (t || MatLegacyInputModule)();\n};\nMatLegacyInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatLegacyInputModule\n});\nMatLegacyInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ErrorStateMatcher],\n  imports: [TextFieldModule, MatLegacyFormFieldModule, MatCommonModule, TextFieldModule,\n  // We re-export the `MatLegacyFormFieldModule` since `MatLegacyInput` will almost always\n  // be used together with `MatLegacyFormField`.\n  MatLegacyFormFieldModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyInputModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MatLegacyInput],\n      imports: [TextFieldModule, MatLegacyFormFieldModule, MatCommonModule],\n      exports: [TextFieldModule,\n      // We re-export the `MatLegacyFormFieldModule` since `MatLegacyInput` will almost always\n      // be used together with `MatLegacyFormField`.\n      MatLegacyFormFieldModule, MatLegacyInput],\n      providers: [ErrorStateMatcher]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatLegacyInput, MatLegacyInputModule };","map":{"version":3,"names":["i0","inject","Directive","NgModule","MatInput","MAT_INPUT_VALUE_ACCESSOR","MAT_LEGACY_INPUT_VALUE_ACCESSOR","getMatInputUnsupportedTypeError","getMatLegacyInputUnsupportedTypeError","MAT_LEGACY_FORM_FIELD","MatLegacyFormFieldControl","MatLegacyFormFieldModule","TextFieldModule","MatCommonModule","ErrorStateMatcher","MatLegacyInput","constructor","arguments","_legacyFormField","optional","_getPlaceholder","formField","appearance","_hasLabel","placeholder","ɵfac","ɵdir","provide","useExisting","type","args","selector","exportAs","host","providers","MatLegacyInputModule","ɵmod","ɵinj","declarations","imports","exports"],"sources":["/Users/marieklinaeva/github/ck-board/frontend/node_modules/@angular/material/fesm2020/legacy-input.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { inject, Directive, NgModule } from '@angular/core';\nimport { MatInput } from '@angular/material/input';\nexport { MAT_INPUT_VALUE_ACCESSOR as MAT_LEGACY_INPUT_VALUE_ACCESSOR, getMatInputUnsupportedTypeError as getMatLegacyInputUnsupportedTypeError } from '@angular/material/input';\nimport { MAT_LEGACY_FORM_FIELD, MatLegacyFormFieldControl, MatLegacyFormFieldModule } from '@angular/material/legacy-form-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport { MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive that allows a native input to work inside a `MatFormField`.\n * @deprecated Use `MatInput` from `@angular/material/input` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyInput extends MatInput {\n    constructor() {\n        super(...arguments);\n        this._legacyFormField = inject(MAT_LEGACY_FORM_FIELD, { optional: true });\n    }\n    _getPlaceholder() {\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const formField = this._legacyFormField;\n        return formField && formField.appearance === 'legacy' && !formField._hasLabel?.()\n            ? null\n            : this.placeholder;\n    }\n}\nMatLegacyInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyInput, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyInput.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\", host: { properties: { \"class.mat-input-server\": \"_isServer\", \"class.mat-mdc-input-element\": \"false\", \"class.mat-mdc-form-field-textarea-control\": \"false\", \"class.mat-mdc-form-field-input-control\": \"false\", \"class.mdc-text-field__input\": \"false\", \"class.mat-mdc-native-select-inline\": \"false\", \"attr.data-placeholder\": \"placeholder\", \"class.mat-native-select-inline\": \"_isInlineSelect()\" }, classAttribute: \"mat-input-element mat-form-field-autofill-control\" }, providers: [{ provide: MatLegacyFormFieldControl, useExisting: MatLegacyInput }], exportAs: [\"matInput\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                    exportAs: 'matInput',\n                    host: {\n                        /**\n                         * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                         */\n                        'class': 'mat-input-element mat-form-field-autofill-control',\n                        '[class.mat-input-server]': '_isServer',\n                        // These classes are inherited from the base input class and need to be cleared.\n                        '[class.mat-mdc-input-element]': 'false',\n                        '[class.mat-mdc-form-field-textarea-control]': 'false',\n                        '[class.mat-mdc-form-field-input-control]': 'false',\n                        '[class.mdc-text-field__input]': 'false',\n                        '[class.mat-mdc-native-select-inline]': 'false',\n                        // At the time of writing, we have a lot of customer tests that look up the input based on its\n                        // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                        // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                        '[attr.data-placeholder]': 'placeholder',\n                        '[class.mat-native-select-inline]': '_isInlineSelect()',\n                    },\n                    providers: [{ provide: MatLegacyFormFieldControl, useExisting: MatLegacyInput }],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Use `MatInputModule` from `@angular/material/input` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyInputModule {\n}\nMatLegacyInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatLegacyInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyInputModule, declarations: [MatLegacyInput], imports: [TextFieldModule, MatLegacyFormFieldModule, MatCommonModule], exports: [TextFieldModule,\n        // We re-export the `MatLegacyFormFieldModule` since `MatLegacyInput` will almost always\n        // be used together with `MatLegacyFormField`.\n        MatLegacyFormFieldModule,\n        MatLegacyInput] });\nMatLegacyInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyInputModule, providers: [ErrorStateMatcher], imports: [TextFieldModule, MatLegacyFormFieldModule, MatCommonModule, TextFieldModule,\n        // We re-export the `MatLegacyFormFieldModule` since `MatLegacyInput` will almost always\n        // be used together with `MatLegacyFormField`.\n        MatLegacyFormFieldModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [MatLegacyInput],\n                    imports: [TextFieldModule, MatLegacyFormFieldModule, MatCommonModule],\n                    exports: [\n                        TextFieldModule,\n                        // We re-export the `MatLegacyFormFieldModule` since `MatLegacyInput` will almost always\n                        // be used together with `MatLegacyFormField`.\n                        MatLegacyFormFieldModule,\n                        MatLegacyInput,\n                    ],\n                    providers: [ErrorStateMatcher],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatLegacyInput, MatLegacyInputModule };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,eAAe;AAC3D,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,wBAAwB,IAAIC,+BAA+B,EAAEC,+BAA+B,IAAIC,qCAAqC,QAAQ,yBAAyB;AAC/K,SAASC,qBAAqB,EAAEC,yBAAyB,EAAEC,wBAAwB,QAAQ,qCAAqC;AAChI,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,eAAe,EAAEC,iBAAiB,QAAQ,wBAAwB;;AAE3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,SAASX,QAAQ,CAAC;EAClCY,WAAW,GAAG;IACV,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB,IAAI,CAACC,gBAAgB,GAAGjB,MAAM,CAACQ,qBAAqB,EAAE;MAAEU,QAAQ,EAAE;IAAK,CAAC,CAAC;EAC7E;EACAC,eAAe,GAAG;IACd;IACA;IACA;IACA;IACA,MAAMC,SAAS,GAAG,IAAI,CAACH,gBAAgB;IACvC,OAAOG,SAAS,IAAIA,SAAS,CAACC,UAAU,KAAK,QAAQ,IAAI,CAACD,SAAS,CAACE,SAAS,IAAI,GAC3E,IAAI,GACJ,IAAI,CAACC,WAAW;EAC1B;AACJ;AACAT,cAAc,CAACU,IAAI;EAAA;EAAA;IAAA,sEAAmFzB,EAAE,uBAAQe,cAAc,SAAdA,cAAc;EAAA;AAAA,GAAqD;AACnLA,cAAc,CAACW,IAAI,kBADmF1B,EAAE;EAAA,MACJe,cAAc;EAAA;EAAA;EAAA;EAAA;IAAA;MADZf,EAAE;MAAFA,EAAE;IAAA;EAAA;EAAA;EAAA,WAAFA,EAAE,oBAC2mB,CAAC;IAAE2B,OAAO,EAAEjB,yBAAyB;IAAEkB,WAAW,EAAEb;EAAe,CAAC,CAAC,GADlrBf,EAAE;AAAA,EACgvB;AACx1B;EAAA,mDAFsGA,EAAE,mBAERe,cAAc,EAAc,CAAC;IACjHc,IAAI,EAAE3B,SAAS;IACf4B,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAG;AAC/B,0DAA0D;MACtCC,QAAQ,EAAE,UAAU;MACpBC,IAAI,EAAE;QACF;AACxB;AACA;QACwB,OAAO,EAAE,mDAAmD;QAC5D,0BAA0B,EAAE,WAAW;QACvC;QACA,+BAA+B,EAAE,OAAO;QACxC,6CAA6C,EAAE,OAAO;QACtD,0CAA0C,EAAE,OAAO;QACnD,+BAA+B,EAAE,OAAO;QACxC,sCAAsC,EAAE,OAAO;QAC/C;QACA;QACA;QACA,yBAAyB,EAAE,aAAa;QACxC,kCAAkC,EAAE;MACxC,CAAC;MACDC,SAAS,EAAE,CAAC;QAAEP,OAAO,EAAEjB,yBAAyB;QAAEkB,WAAW,EAAEb;MAAe,CAAC;IACnF,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMoB,oBAAoB,CAAC;AAE3BA,oBAAoB,CAACV,IAAI;EAAA,iBAA6FU,oBAAoB;AAAA,CAAkD;AAC5LA,oBAAoB,CAACC,IAAI,kBA5C6EpC,EAAE;EAAA,MA4CemC;AAAoB,EAIjH;AAC1BA,oBAAoB,CAACE,IAAI,kBAjD6ErC,EAAE;EAAA,WAiDgD,CAACc,iBAAiB,CAAC;EAAA,UAAYF,eAAe,EAAED,wBAAwB,EAAEE,eAAe,EAAED,eAAe;EAC1P;EACA;EACAD,wBAAwB;AAAA,EAAI;AACpC;EAAA,mDArDsGX,EAAE,mBAqDRmC,oBAAoB,EAAc,CAAC;IACvHN,IAAI,EAAE1B,QAAQ;IACd2B,IAAI,EAAE,CAAC;MACCQ,YAAY,EAAE,CAACvB,cAAc,CAAC;MAC9BwB,OAAO,EAAE,CAAC3B,eAAe,EAAED,wBAAwB,EAAEE,eAAe,CAAC;MACrE2B,OAAO,EAAE,CACL5B,eAAe;MACf;MACA;MACAD,wBAAwB,EACxBI,cAAc,CACjB;MACDmB,SAAS,EAAE,CAACpB,iBAAiB;IACjC,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASC,cAAc,EAAEoB,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}