{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./post.service\";\nimport * as i2 from \"./bucket.service\";\nimport * as i3 from \"@angular/common/http\";\nexport class GroupTaskService {\n  postService;\n  bucketService;\n  http;\n  constructor(postService, bucketService, http) {\n    this.postService = postService;\n    this.bucketService = bucketService;\n    this.http = http;\n  }\n  getGroupTask(groupID, workflowID) {\n    return this.http.get('workflows/task/' + workflowID + '/groupTask/group/' + groupID).toPromise();\n  }\n  getGroupTasksByWorkflow(workflowID) {\n    return this.http.get('workflows/' + workflowID + '/task').toPromise();\n  }\n  static ɵfac = function GroupTaskService_Factory(t) {\n    return new (t || GroupTaskService)(i0.ɵɵinject(i1.PostService), i0.ɵɵinject(i2.BucketService), i0.ɵɵinject(i3.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GroupTaskService,\n    factory: GroupTaskService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;;AAcA,OAAM,MAAOA,gBAAgB;EAElBC;EACAC;EACAC;EAHTC,YACSH,WAAwB,EACxBC,aAA4B,EAC5BC,IAAgB;IAFhB,gBAAW,GAAXF,WAAW;IACX,kBAAa,GAAbC,aAAa;IACb,SAAI,GAAJC,IAAI;EACV;EAEHE,YAAY,CAACC,OAAe,EAAEC,UAAkB;IAC9C,OAAO,IAAI,CAACJ,IAAI,CACbK,GAAG,CACF,iBAAiB,GAAGD,UAAU,GAAG,mBAAmB,GAAGD,OAAO,CAC/D,CACAG,SAAS,EAAE;EAChB;EAEAC,uBAAuB,CAACH,UAAkB;IACxC,OAAO,IAAI,CAACJ,IAAI,CACbK,GAAG,CAAc,YAAY,GAAGD,UAAU,GAAG,OAAO,CAAC,CACrDE,SAAS,EAAE;EAChB;;qBAnBWT,gBAAgB;EAAA;;WAAhBA,gBAAgB;IAAAW,SAAhBX,gBAAgB;IAAAY,YAFf;EAAM","names":["GroupTaskService","postService","bucketService","http","constructor","getGroupTask","groupID","workflowID","get","toPromise","getGroupTasksByWorkflow","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/services/groupTask.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  DistributionWorkflow,\n  GroupTask,\n  TaskWorkflow,\n  Workflow,\n} from '../models/workflow';\nimport { BucketService } from './bucket.service';\nimport { PostService } from './post.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GroupTaskService {\n  constructor(\n    public postService: PostService,\n    public bucketService: BucketService,\n    public http: HttpClient\n  ) {}\n\n  getGroupTask(groupID: string, workflowID: string): Promise<GroupTask> {\n    return this.http\n      .get<GroupTask>(\n        'workflows/task/' + workflowID + '/groupTask/group/' + groupID\n      )\n      .toPromise();\n  }\n\n  getGroupTasksByWorkflow(workflowID: string): Promise<GroupTask[]> {\n    return this.http\n      .get<GroupTask[]>('workflows/' + workflowID + '/task')\n      .toPromise();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}