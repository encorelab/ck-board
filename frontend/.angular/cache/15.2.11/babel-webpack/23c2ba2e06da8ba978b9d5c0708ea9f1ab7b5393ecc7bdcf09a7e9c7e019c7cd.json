{"ast":null,"code":"import _asyncToGenerator from \"/Users/marieklinaeva/github/ck-board/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Role } from '../models/user';\nimport { getErrorMessage, getErrorStatus } from '../utils/Utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/project.service\";\nimport * as i2 from \"../services/board.service\";\nimport * as i3 from \"../services/user.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"./auth.guard\";\nexport class ProjectGuard {\n  constructor(projectService, boardService, userService, router, authGuard) {\n    this.projectService = projectService;\n    this.boardService = boardService;\n    this.userService = userService;\n    this.router = router;\n    this.authGuard = authGuard;\n  }\n  canActivate(next, _state) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.userService.loggedIn) {\n        return false;\n      }\n      const projectID = next.params.projectID;\n      const isValidProject = yield _this.isValidProject(projectID);\n      if (!isValidProject) {\n        _this.router.navigate(['/error'], {\n          state: {\n            code: 404,\n            message: 'This project does not exist!'\n          }\n        });\n        return false;\n      }\n      const isMember = _this.isProjectMember();\n      if (!isMember) {\n        if ((yield _this.userService.isSsoEnabled()) && _this.userService.user != null) {\n          yield _this.addProjectMember(_this.project, _this.userService.user);\n        } else {\n          _this.router.navigate(['/error'], {\n            state: {\n              code: 403,\n              message: 'You do not have access to this project!'\n            }\n          });\n        }\n      }\n      return true;\n    })();\n  }\n  isValidProject(projectID) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.project = yield _this2.projectService.get(projectID);\n      return _this2.project !== null;\n    })();\n  }\n  isProjectMember() {\n    const user = this.userService.user;\n    if (user && this.project.members.includes(user.userID)) {\n      return true;\n    }\n    return false;\n  }\n  addProjectMember(project, user) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const code = user.role == Role.STUDENT ? project.studentJoinCode : project.teacherJoinCode;\n      try {\n        yield _this3.projectService.joinProject(code);\n      } catch (e) {\n        _this3.router.navigate(['/error'], {\n          state: {\n            code: getErrorStatus(e),\n            message: getErrorMessage(e)\n          }\n        });\n      }\n    })();\n  }\n}\nProjectGuard.ɵfac = function ProjectGuard_Factory(t) {\n  return new (t || ProjectGuard)(i0.ɵɵinject(i1.ProjectService), i0.ɵɵinject(i2.BoardService), i0.ɵɵinject(i3.UserService), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i5.AuthGuard));\n};\nProjectGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProjectGuard,\n  factory: ProjectGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAWA,SAASA,IAAI,QAAkB,gBAAgB;AAE/C,SAASC,eAAe,EAAEC,cAAc,QAAQ,gBAAgB;;;;;;;AAKhE,OAAM,MAAOC,YAAY;EAIvBC,YACSC,cAA8B,EAC9BC,YAA0B,EAC1BC,WAAwB,EACxBC,MAAc,EACdC,SAAoB;IAJpB,mBAAc,GAAdJ,cAAc;IACd,iBAAY,GAAZC,YAAY;IACZ,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IACN,cAAS,GAATC,SAAS;EACf;EAEGC,WAAW,CACfC,IAA4B,EAC5BC,MAA2B;IAAA;IAAA;MAE3B,IAAI,CAAC,KAAI,CAACL,WAAW,CAACM,QAAQ,EAAE;QAC9B,OAAO,KAAK;;MAGd,MAAMC,SAAS,GAAGH,IAAI,CAACI,MAAM,CAACD,SAAS;MAEvC,MAAME,cAAc,SAAS,KAAI,CAACA,cAAc,CAACF,SAAS,CAAC;MAC3D,IAAI,CAACE,cAAc,EAAE;QACnB,KAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;UAC/BC,KAAK,EAAE;YAAEC,IAAI,EAAE,GAAG;YAAEC,OAAO,EAAE;UAA8B;SAC5D,CAAC;QACF,OAAO,KAAK;;MAGd,MAAMC,QAAQ,GAAG,KAAI,CAACC,eAAe,EAAE;MACvC,IAAI,CAACD,QAAQ,EAAE;QACb,IACE,OAAO,KAAI,CAACd,WAAW,CAACgB,YAAY,EAAE,KACtC,KAAI,CAAChB,WAAW,CAACiB,IAAI,IAAI,IAAI,EAC7B;UACA,MAAM,KAAI,CAACC,gBAAgB,CAAC,KAAI,CAACC,OAAO,EAAE,KAAI,CAACnB,WAAW,CAACiB,IAAI,CAAC;SACjE,MAAM;UACL,KAAI,CAAChB,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;YAC/BC,KAAK,EAAE;cACLC,IAAI,EAAE,GAAG;cACTC,OAAO,EAAE;;WAEZ,CAAC;;;MAIN,OAAO,IAAI;IAAC;EACd;EAEMJ,cAAc,CAACF,SAAiB;IAAA;IAAA;MACpC,MAAI,CAACY,OAAO,SAAS,MAAI,CAACrB,cAAc,CAACsB,GAAG,CAACb,SAAS,CAAC;MACvD,OAAO,MAAI,CAACY,OAAO,KAAK,IAAI;IAAC;EAC/B;EAEAJ,eAAe;IACb,MAAME,IAAI,GAAG,IAAI,CAACjB,WAAW,CAACiB,IAAI;IAElC,IAAIA,IAAI,IAAI,IAAI,CAACE,OAAO,CAACE,OAAO,CAACC,QAAQ,CAACL,IAAI,CAACM,MAAM,CAAC,EAAE;MACtD,OAAO,IAAI;;IAGb,OAAO,KAAK;EACd;EAEML,gBAAgB,CAACC,OAAY,EAAEF,IAAc;IAAA;IAAA;MACjD,MAAML,IAAI,GACRK,IAAI,CAACO,IAAI,IAAI/B,IAAI,CAACgC,OAAO,GACrBN,OAAO,CAACO,eAAe,GACvBP,OAAO,CAACQ,eAAe;MAE7B,IAAI;QACF,MAAM,MAAI,CAAC7B,cAAc,CAAC8B,WAAW,CAAChB,IAAI,CAAC;OAC5C,CAAC,OAAOiB,CAAC,EAAE;QACV,MAAI,CAAC5B,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;UAC/BC,KAAK,EAAE;YACLC,IAAI,EAAEjB,cAAc,CAACkC,CAAC,CAAC;YACvBhB,OAAO,EAAEnB,eAAe,CAACmC,CAAC;;SAE7B,CAAC;;IACH;EACH;;;mBAjFWjC,YAAY;AAAA;;SAAZA,YAAY;EAAAkC,SAAZlC,YAAY;EAAAmC,YAFX;AAAM","names":["Role","getErrorMessage","getErrorStatus","ProjectGuard","constructor","projectService","boardService","userService","router","authGuard","canActivate","next","_state","loggedIn","projectID","params","isValidProject","navigate","state","code","message","isMember","isProjectMember","isSsoEnabled","user","addProjectMember","project","get","members","includes","userID","role","STUDENT","studentJoinCode","teacherJoinCode","joinProject","e","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/guards/project.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Router,\n} from '@angular/router';\nimport { AuthGuard } from './auth.guard';\nimport { ProjectService } from '../services/project.service';\nimport { BoardService } from '../services/board.service';\nimport { UserService } from '../services/user.service';\nimport { Role, AuthUser } from '../models/user';\nimport { Project } from '../models/project';\nimport { getErrorMessage, getErrorStatus } from '../utils/Utils';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProjectGuard implements CanActivate {\n  board: any;\n  project: any;\n\n  constructor(\n    public projectService: ProjectService,\n    public boardService: BoardService,\n    public userService: UserService,\n    public router: Router,\n    public authGuard: AuthGuard\n  ) {}\n\n  async canActivate(\n    next: ActivatedRouteSnapshot,\n    _state: RouterStateSnapshot\n  ): Promise<boolean> {\n    if (!this.userService.loggedIn) {\n      return false;\n    }\n\n    const projectID = next.params.projectID;\n\n    const isValidProject = await this.isValidProject(projectID);\n    if (!isValidProject) {\n      this.router.navigate(['/error'], {\n        state: { code: 404, message: 'This project does not exist!' },\n      });\n      return false;\n    }\n\n    const isMember = this.isProjectMember();\n    if (!isMember) {\n      if (\n        (await this.userService.isSsoEnabled()) &&\n        this.userService.user != null\n      ) {\n        await this.addProjectMember(this.project, this.userService.user);\n      } else {\n        this.router.navigate(['/error'], {\n          state: {\n            code: 403,\n            message: 'You do not have access to this project!',\n          },\n        });\n      }\n    }\n\n    return true;\n  }\n\n  async isValidProject(projectID: string) {\n    this.project = await this.projectService.get(projectID);\n    return this.project !== null;\n  }\n\n  isProjectMember(): boolean {\n    const user = this.userService.user;\n\n    if (user && this.project.members.includes(user.userID)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  async addProjectMember(project: any, user: AuthUser): Promise<void> {\n    const code =\n      user.role == Role.STUDENT\n        ? project.studentJoinCode\n        : project.teacherJoinCode;\n\n    try {\n      await this.projectService.joinProject(code);\n    } catch (e) {\n      this.router.navigate(['/error'], {\n        state: {\n          code: getErrorStatus(e),\n          message: getErrorMessage(e),\n        },\n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}