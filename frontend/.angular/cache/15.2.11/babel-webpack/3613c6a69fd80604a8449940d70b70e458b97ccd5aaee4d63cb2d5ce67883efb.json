{"ast":null,"code":"import _asyncToGenerator from \"/Users/marieklinaeva/github/ck-board/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PostType } from '../models/post';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/upvotes.service\";\nimport * as i2 from \"../services/comment.service\";\nimport * as i3 from \"../services/user.service\";\nimport * as i4 from \"../services/board.service\";\nexport default class Converters {\n  upvotesService;\n  commentService;\n  userService;\n  boardService;\n  constructor(upvotesService, commentService, userService, boardService) {\n    this.upvotesService = upvotesService;\n    this.commentService = commentService;\n    this.userService = userService;\n    this.boardService = boardService;\n  }\n  toHTMLPost(post) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const board = yield _this.boardService.get(post.boardID);\n      const author = yield _this.userService.getOneById(post.userID);\n      const upvotes = yield _this.upvotesService.getUpvotesByPost(post.postID);\n      const comments = yield _this.commentService.getCommentsByPost(post.postID);\n      return {\n        board: board,\n        post: post,\n        author: author.username,\n        upvotes: upvotes,\n        comments: comments.length,\n        bucketOnly: post.type != PostType.BOARD\n      };\n    })();\n  }\n  toHTMLPosts(posts) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return Promise.all(posts.map(post => _this2.toHTMLPost(post)));\n    })();\n  }\n  static ɵfac = function Converters_Factory(t) {\n    return new (t || Converters)(i0.ɵɵinject(i1.UpvotesService), i0.ɵɵinject(i2.CommentService), i0.ɵɵinject(i3.UserService), i0.ɵɵinject(i4.BoardService));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Converters,\n    factory: Converters.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAEA,SAAeA,QAAQ,QAAQ,gBAAgB;;;;;;AAS/C,eAAc,MAAOC,UAAU;EAEnBC;EACAC;EACAC;EACAC;EAJVC,YACUJ,cAA8B,EAC9BC,cAA8B,EAC9BC,WAAwB,EACxBC,YAA0B;IAH1B,mBAAc,GAAdH,cAAc;IACd,mBAAc,GAAdC,cAAc;IACd,gBAAW,GAAXC,WAAW;IACX,iBAAY,GAAZC,YAAY;EACnB;EAEGE,UAAU,CAACC,IAAU;IAAA;IAAA;MACzB,MAAMC,KAAK,SAAS,KAAI,CAACJ,YAAY,CAACK,GAAG,CAACF,IAAI,CAACG,OAAO,CAAC;MACvD,MAAMC,MAAM,SAAS,KAAI,CAACR,WAAW,CAACS,UAAU,CAACL,IAAI,CAACM,MAAM,CAAC;MAC7D,MAAMC,OAAO,SAAS,KAAI,CAACb,cAAc,CAACc,gBAAgB,CAACR,IAAI,CAACS,MAAM,CAAC;MACvE,MAAMC,QAAQ,SAAS,KAAI,CAACf,cAAc,CAACgB,iBAAiB,CAACX,IAAI,CAACS,MAAM,CAAC;MAEzE,OAAO;QACLR,KAAK,EAAEA,KAAK;QACZD,IAAI,EAAEA,IAAI;QACVI,MAAM,EAAEA,MAAO,CAACQ,QAAQ;QACxBL,OAAO,EAAEA,OAAO;QAChBG,QAAQ,EAAEA,QAAQ,CAACG,MAAM;QACzBC,UAAU,EAAEd,IAAI,CAACe,IAAI,IAAIvB,QAAQ,CAACwB;OACnC;IAAC;EACJ;EAEMC,WAAW,CAACC,KAAa;IAAA;IAAA;MAC7B,OAAOC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,GAAG,CAAErB,IAAI,IAAK,MAAI,CAACD,UAAU,CAACC,IAAI,CAAC,CAAC,CAAC;IAAC;EACjE;;qBA1BmBP,UAAU;EAAA;;WAAVA,UAAU;IAAA6B,SAAV7B,UAAU;IAAA8B,YAFjB;EAAM","names":["PostType","Converters","upvotesService","commentService","userService","boardService","constructor","toHTMLPost","post","board","get","boardID","author","getOneById","userID","upvotes","getUpvotesByPost","postID","comments","getCommentsByPost","username","length","bucketOnly","type","BOARD","toHTMLPosts","posts","Promise","all","map","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/utils/converters.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HTMLPost } from '../components/html-post/html-post.component';\nimport Post, { PostType } from '../models/post';\nimport { BoardService } from '../services/board.service';\nimport { CommentService } from '../services/comment.service';\nimport { UpvotesService } from '../services/upvotes.service';\nimport { UserService } from '../services/user.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport default class Converters {\n  constructor(\n    private upvotesService: UpvotesService,\n    private commentService: CommentService,\n    private userService: UserService,\n    private boardService: BoardService\n  ) {}\n\n  async toHTMLPost(post: Post): Promise<HTMLPost> {\n    const board = await this.boardService.get(post.boardID);\n    const author = await this.userService.getOneById(post.userID);\n    const upvotes = await this.upvotesService.getUpvotesByPost(post.postID);\n    const comments = await this.commentService.getCommentsByPost(post.postID);\n\n    return {\n      board: board,\n      post: post,\n      author: author!.username,\n      upvotes: upvotes,\n      comments: comments.length,\n      bucketOnly: post.type != PostType.BOARD,\n    };\n  }\n\n  async toHTMLPosts(posts: Post[]): Promise<HTMLPost[]> {\n    return Promise.all(posts.map((post) => this.toHTMLPost(post)));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}