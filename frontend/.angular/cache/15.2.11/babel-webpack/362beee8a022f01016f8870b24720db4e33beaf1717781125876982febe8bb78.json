{"ast":null,"code":"import _asyncToGenerator from \"/Users/marieklinaeva/github/ck-board/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BoardScope } from '../models/board';\nimport { Role } from '../models/user';\nimport { getErrorMessage, getErrorStatus } from '../utils/Utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/board.service\";\nimport * as i2 from \"../services/user.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"./auth.guard\";\nexport class BoardGuard {\n  boardService;\n  userService;\n  router;\n  authGuard;\n  board;\n  expectedParamLen = 5;\n  constructor(boardService, userService, router, authGuard) {\n    this.boardService = boardService;\n    this.userService = userService;\n    this.router = router;\n    this.authGuard = authGuard;\n  }\n  canActivate(next, _state) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.userService.loggedIn) {\n        return false;\n      }\n      const boardID = next.params.boardID;\n      if (boardID) {\n        const isValidBoard = yield _this.isValidBoard(boardID);\n        if (!isValidBoard) {\n          _this.router.navigate(['/error'], {\n            state: {\n              code: 404,\n              message: 'This board does not exist!'\n            }\n          });\n          return false;\n        }\n      }\n      const isVisibleBoard = _this.isVisibleBoard();\n      if (!isVisibleBoard) {\n        _this.router.navigate(['/error'], {\n          state: {\n            code: 403,\n            message: 'You do not have access to this board!'\n          }\n        });\n      }\n      if (_this.board.scope == BoardScope.PROJECT_PERSONAL) {\n        const user = _this.userService.user;\n        if (user?.role == Role.TEACHER || _this.board.ownerID == user?.userID) {\n          return true;\n        } else {\n          _this.router.navigate(['/error'], {\n            state: {\n              code: 403,\n              message: 'Access to board is forbidden!'\n            }\n          });\n          return false;\n        }\n      } else if (_this.board.scope == BoardScope.PROJECT_SHARED) {\n        return true;\n      }\n      return true;\n    })();\n  }\n  isValidBoard(boardID) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        _this2.board = yield _this2.boardService.get(boardID);\n      } catch (e) {\n        const message = getErrorMessage(e);\n        const status = getErrorStatus(e);\n        _this2.router.navigate(['/error'], {\n          state: {\n            code: status,\n            message: message\n          }\n        });\n        return false;\n      }\n      return _this2.board != undefined;\n    })();\n  }\n  isVisibleBoard() {\n    const user = this.userService.user;\n    return user?.role === Role.TEACHER || this.board.visible;\n  }\n  static ɵfac = function BoardGuard_Factory(t) {\n    return new (t || BoardGuard)(i0.ɵɵinject(i1.BoardService), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.AuthGuard));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BoardGuard,\n    factory: BoardGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["BoardScope","Role","getErrorMessage","getErrorStatus","BoardGuard","boardService","userService","router","authGuard","board","expectedParamLen","constructor","canActivate","next","_state","loggedIn","boardID","params","isValidBoard","navigate","state","code","message","isVisibleBoard","scope","PROJECT_PERSONAL","user","role","TEACHER","ownerID","userID","PROJECT_SHARED","get","e","status","undefined","visible","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/guards/board.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { Board, BoardScope } from '../models/board';\nimport { Role } from '../models/user';\nimport { BoardService } from '../services/board.service';\nimport { UserService } from '../services/user.service';\nimport { getErrorMessage, getErrorStatus } from '../utils/Utils';\nimport { AuthGuard } from './auth.guard';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BoardGuard implements CanActivate {\n  board: Board;\n  expectedParamLen: number = 5;\n\n  constructor(\n    public boardService: BoardService,\n    public userService: UserService,\n    public router: Router,\n    public authGuard: AuthGuard\n  ) {}\n\n  async canActivate(\n    next: ActivatedRouteSnapshot,\n    _state: RouterStateSnapshot\n  ): Promise<boolean> {\n    if (!this.userService.loggedIn) {\n      return false;\n    }\n\n    const boardID = next.params.boardID;\n\n    if (boardID) {\n      const isValidBoard = await this.isValidBoard(boardID);\n      if (!isValidBoard) {\n        this.router.navigate(['/error'], {\n          state: { code: 404, message: 'This board does not exist!' },\n        });\n        return false;\n      }\n    }\n\n    const isVisibleBoard = this.isVisibleBoard();\n    if (!isVisibleBoard) {\n      this.router.navigate(['/error'], {\n        state: {\n          code: 403,\n          message: 'You do not have access to this board!',\n        },\n      });\n    }\n\n    if (this.board.scope == BoardScope.PROJECT_PERSONAL) {\n      const user = this.userService.user;\n      if (user?.role == Role.TEACHER || this.board.ownerID == user?.userID) {\n        return true;\n      } else {\n        this.router.navigate(['/error'], {\n          state: { code: 403, message: 'Access to board is forbidden!' },\n        });\n        return false;\n      }\n    } else if (this.board.scope == BoardScope.PROJECT_SHARED) {\n      return true;\n    }\n\n    return true;\n  }\n\n  async isValidBoard(boardID: string) {\n    try {\n      this.board = await this.boardService.get(boardID);\n    } catch (e) {\n      const message = getErrorMessage(e);\n      const status = getErrorStatus(e);\n      this.router.navigate(['/error'], {\n        state: { code: status, message: message },\n      });\n      return false;\n    }\n\n    return this.board != undefined;\n  }\n\n  isVisibleBoard() {\n    const user = this.userService.user;\n    return user?.role === Role.TEACHER || this.board.visible;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}