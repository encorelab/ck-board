{"ast":null,"code":"import _asyncToGenerator from \"/Users/marieklinaeva/github/ck-board/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nlet FileUploadService = class FileUploadService {\n  constructor(storage, imageCompress) {\n    this.storage = storage;\n    this.imageCompress = imageCompress;\n    this.filePath = '/images/';\n  }\n  /**\n   * Uploads a Image to firebase\n   * @param file base64 encode string representation of an Image to be uploaded to firebase\n   * @returns Promise for getDownloadUrl which returns a downloadUrl string\n   */\n  upload(file) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // generate filename from timestamp\n      const contentType = file.substring(file.indexOf(':') + 1, file.indexOf(';'));\n      const extension = contentType.substring(contentType.indexOf('/') + 1);\n      const filename = _this.filePath + Date.now() + '.' + extension;\n      const ref = _this.storage.ref(filename);\n      const base64String = file.substring(file.indexOf(',') + 1);\n      const task = ref.putString(base64String, 'base64', {\n        contentType: contentType\n      });\n      return task.snapshotChanges().toPromise().then(() => {\n        return ref.getDownloadURL().toPromise();\n      });\n    })();\n  }\n  /**\n   * Deletes file specified by downloadUrl\n   * @param downloadUrl String representing the firebase downloadurl\n   * @returns Promise for the delete action\n   */\n  delete(downloadUrl) {\n    return this.storage.storage.refFromURL(downloadUrl).delete();\n  }\n  download(filename) {\n    const ref = this.storage.ref(filename);\n    return ref.getDownloadURL().toPromise();\n  }\n  /**\n   * Compresses image using ngx-image-compress and returns the compressed image as base64 string\n   *\n   * @returns Promise<string> compressedImage - This is the base64 string of the compressed image\n   */\n  compressFile() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const MAX_BYTE = 2 * Math.pow(10, 6);\n      return _this2.imageCompress.uploadFile().then(({\n        image,\n        orientation\n      }) => {\n        const compressAmount = Math.min(MAX_BYTE / _this2.imageCompress.byteCount(image) * 100, 100);\n        return _this2.imageCompress.compressFile(image, orientation, compressAmount, compressAmount);\n      }).then(compressedImage => {\n        return compressedImage;\n      });\n    })();\n  }\n};\nFileUploadService = __decorate([Injectable({\n  providedIn: 'root'\n})], FileUploadService);\nexport { FileUploadService };","map":{"version":3,"mappings":";;AAAA,SAASA,UAAU,QAAQ,eAAe;AAOnC,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAG5BC,YACUC,OAA2B,EAC3BC,aAAsC;IADtC,YAAO,GAAPD,OAAO;IACP,kBAAa,GAAbC,aAAa;IAJvB,aAAQ,GAAG,UAAU;EAKlB;EAEH;;;;;EAKMC,MAAM,CAACC,IAAY;IAAA;IAAA;MACvB;MACA,MAAMC,WAAW,GAAGD,IAAI,CAACE,SAAS,CAChCF,IAAI,CAACG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EACrBH,IAAI,CAACG,OAAO,CAAC,GAAG,CAAC,CAClB;MACD,MAAMC,SAAS,GAAGH,WAAW,CAACC,SAAS,CAACD,WAAW,CAACE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MACrE,MAAME,QAAQ,GAAG,KAAI,CAACC,QAAQ,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAG,GAAG,GAAGJ,SAAS;MAC7D,MAAMK,GAAG,GAAG,KAAI,CAACZ,OAAO,CAACY,GAAG,CAACJ,QAAQ,CAAC;MACtC,MAAMK,YAAY,GAAGV,IAAI,CAACE,SAAS,CAACF,IAAI,CAACG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MAC1D,MAAMQ,IAAI,GAAGF,GAAG,CAACG,SAAS,CAACF,YAAY,EAAE,QAAQ,EAAE;QACjDT,WAAW,EAAEA;OACd,CAAC;MACF,OAAOU,IAAI,CACRE,eAAe,EAAE,CACjBC,SAAS,EAAE,CACXC,IAAI,CAAC,MAAK;QACT,OAAON,GAAG,CAACO,cAAc,EAAE,CAACF,SAAS,EAAE;MACzC,CAAC,CAAC;IAAC;EACP;EAEA;;;;;EAKAG,MAAM,CAACC,WAAmB;IACxB,OAAO,IAAI,CAACrB,OAAO,CAACA,OAAO,CAACsB,UAAU,CAACD,WAAW,CAAC,CAACD,MAAM,EAAE;EAC9D;EAEAG,QAAQ,CAACf,QAAgB;IACvB,MAAMI,GAAG,GAAG,IAAI,CAACZ,OAAO,CAACY,GAAG,CAACJ,QAAQ,CAAC;IACtC,OAAOI,GAAG,CAACO,cAAc,EAAE,CAACF,SAAS,EAAE;EACzC;EAEA;;;;;EAKMO,YAAY;IAAA;IAAA;MAChB,MAAMC,QAAQ,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;MACpC,OAAO,MAAI,CAAC1B,aAAa,CACtB2B,UAAU,EAAE,CACZV,IAAI,CAAC,CAAC;QAAEW,KAAK;QAAEC;MAAW,CAAE,KAAI;QAC/B,MAAMC,cAAc,GAAGL,IAAI,CAACM,GAAG,CAC5BP,QAAQ,GAAG,MAAI,CAACxB,aAAa,CAACgC,SAAS,CAACJ,KAAK,CAAC,GAAI,GAAG,EACtD,GAAG,CACJ;QACD,OAAO,MAAI,CAAC5B,aAAa,CAACuB,YAAY,CACpCK,KAAK,EACLC,WAAW,EACXC,cAAc,EACdA,cAAc,CACf;MACH,CAAC,CAAC,CACDb,IAAI,CAAEgB,eAAe,IAAI;QACxB,OAAOA,eAAe;MACxB,CAAC,CAAC;IAAC;EACP;CACD;AAzEYpC,iBAAiB,eAH7BD,UAAU,CAAC;EACVsC,UAAU,EAAE;CACb,CAAC,GACWrC,iBAAiB,CAyE7B;SAzEYA,iBAAiB","names":["Injectable","FileUploadService","constructor","storage","imageCompress","upload","file","contentType","substring","indexOf","extension","filename","filePath","Date","now","ref","base64String","task","putString","snapshotChanges","toPromise","then","getDownloadURL","delete","downloadUrl","refFromURL","download","compressFile","MAX_BYTE","Math","pow","uploadFile","image","orientation","compressAmount","min","byteCount","compressedImage","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/services/fileUpload.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AngularFireStorage } from '@angular/fire/storage';\nimport { NgxImageCompressService } from 'ngx-image-compress';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FileUploadService {\n  filePath = '/images/';\n\n  constructor(\n    private storage: AngularFireStorage,\n    private imageCompress: NgxImageCompressService\n  ) {}\n\n  /**\n   * Uploads a Image to firebase\n   * @param file base64 encode string representation of an Image to be uploaded to firebase\n   * @returns Promise for getDownloadUrl which returns a downloadUrl string\n   */\n  async upload(file: string) {\n    // generate filename from timestamp\n    const contentType = file.substring(\n      file.indexOf(':') + 1,\n      file.indexOf(';')\n    );\n    const extension = contentType.substring(contentType.indexOf('/') + 1);\n    const filename = this.filePath + Date.now() + '.' + extension;\n    const ref = this.storage.ref(filename);\n    const base64String = file.substring(file.indexOf(',') + 1);\n    const task = ref.putString(base64String, 'base64', {\n      contentType: contentType,\n    });\n    return task\n      .snapshotChanges()\n      .toPromise()\n      .then(() => {\n        return ref.getDownloadURL().toPromise();\n      });\n  }\n\n  /**\n   * Deletes file specified by downloadUrl\n   * @param downloadUrl String representing the firebase downloadurl\n   * @returns Promise for the delete action\n   */\n  delete(downloadUrl: string) {\n    return this.storage.storage.refFromURL(downloadUrl).delete();\n  }\n\n  download(filename: string) {\n    const ref = this.storage.ref(filename);\n    return ref.getDownloadURL().toPromise();\n  }\n\n  /**\n   * Compresses image using ngx-image-compress and returns the compressed image as base64 string\n   *\n   * @returns Promise<string> compressedImage - This is the base64 string of the compressed image\n   */\n  async compressFile() {\n    const MAX_BYTE = 2 * Math.pow(10, 6);\n    return this.imageCompress\n      .uploadFile()\n      .then(({ image, orientation }) => {\n        const compressAmount = Math.min(\n          (MAX_BYTE / this.imageCompress.byteCount(image)) * 100,\n          100\n        );\n        return this.imageCompress.compressFile(\n          image,\n          orientation,\n          compressAmount,\n          compressAmount\n        );\n      })\n      .then((compressedImage) => {\n        return compressedImage;\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}