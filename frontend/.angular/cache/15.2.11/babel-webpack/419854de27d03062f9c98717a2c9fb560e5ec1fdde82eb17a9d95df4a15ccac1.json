{"ast":null,"code":"import * as i2 from '@angular/cdk/overlay';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _countGroupLabelsBeforeLegacyOption, _getLegacyOptionScrollPosition, MAT_LEGACY_OPTION_PARENT_COMPONENT, MatLegacyOption, MAT_LEGACY_OPTGROUP, MatLegacyOptionModule } from '@angular/material/legacy-core';\nimport { MatLegacyFormFieldControl, MatLegacyFormFieldModule } from '@angular/material/legacy-form-field';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { MAT_SELECT_TRIGGER, _MatSelectBase, MAT_SELECT_SCROLL_STRATEGY_PROVIDER } from '@angular/material/select';\nexport { MAT_SELECT_CONFIG as MAT_LEGACY_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY as MAT_LEGACY_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER as MAT_LEGACY_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY as MAT_LEGACY_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER as MAT_LEGACY_SELECT_TRIGGER } from '@angular/material/select';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n * @deprecated Use `matSelectAnimations` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nfunction MatLegacySelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.placeholder);\n  }\n}\nfunction MatLegacySelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r5.triggerValue);\n  }\n}\nfunction MatLegacySelect_span_5_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\nfunction MatLegacySelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtemplate(1, MatLegacySelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    i0.ɵɵtemplate(2, MatLegacySelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\nfunction MatLegacySelect_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"div\", 14, 15);\n    i0.ɵɵlistener(\"@transformPanel.done\", function MatLegacySelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8._panelDoneAnimatingStream.next($event.toState));\n    })(\"keydown\", function MatLegacySelect_ng_template_8_Template_div_keydown_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10._handleKeydown($event));\n    });\n    i0.ɵɵprojection(3, 1);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    i0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n    i0.ɵɵattribute(\"id\", ctx_r4.id + \"-panel\")(\"aria-multiselectable\", ctx_r4.multiple)(\"aria-label\", ctx_r4.ariaLabel || null)(\"aria-labelledby\", ctx_r4._getPanelAriaLabelledby());\n  }\n}\nconst _c0 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c1 = [\"mat-select-trigger\", \"*\"];\nconst matLegacySelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [transition('* => void', query('@transformPanel', [animateChild()], {\n    optional: true\n  }))]),\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    transform: 'scaleY(0.8)',\n    minWidth: '100%',\n    opacity: 0\n  })), state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    transform: 'scaleY(1)'\n  })), state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)',\n    transform: 'scaleY(1)'\n  })), transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))])\n};\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/**\n * The max height of the select's overlay panel.\n * @deprecated Use `SELECT_PANEL_MAX_HEIGHT` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis.\n * @deprecated Use `SELECT_PANEL_PADDING_X` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @deprecated Use `SELECT_PANEL_INDENT_PADDING_X` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @deprecated Use `SELECT_ITEM_HEIGHT_EM` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n *\n * @deprecated Use `SELECT_MULTIPLE_PANEL_PADDING_X` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n * @deprecated Use `SELECT_PANEL_VIEWPORT_PADDING` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Change event object that is emitted when the select value has changed.\n * @deprecated Use `MatSelectChange` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacySelectChange {\n  constructor( /** Reference to the select that emitted the change event. */\n  source, /** Current value of the select that emitted the event. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n * @deprecated Use `MatSelectTrigger` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacySelectTrigger {}\nMatLegacySelectTrigger.ɵfac = function MatLegacySelectTrigger_Factory(t) {\n  return new (t || MatLegacySelectTrigger)();\n};\nMatLegacySelectTrigger.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacySelectTrigger,\n  selectors: [[\"mat-select-trigger\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_SELECT_TRIGGER,\n    useExisting: MatLegacySelectTrigger\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacySelectTrigger, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-select-trigger',\n      providers: [{\n        provide: MAT_SELECT_TRIGGER,\n        useExisting: MatLegacySelectTrigger\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @deprecated Use `MatSelect` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacySelect extends _MatSelectBase {\n  constructor() {\n    super(...arguments);\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    this._scrollTop = 0;\n    /** The cached font-size of the trigger element. */\n    this._triggerFontSize = 0;\n    /** The value of the select panel's transform-origin property. */\n    this._transformOrigin = 'top';\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    this._offsetY = 0;\n    this._positions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom'\n    }];\n  }\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n  ngOnInit() {\n    super.ngOnInit();\n    this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n  }\n  open() {\n    if (super._canOpen()) {\n      super.open();\n      this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n      // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n      // `parseInt` ignores the trailing 'px' and converts this to a number.\n      this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n      this._calculateOverlayPosition();\n      // Set the font size on the panel element once it exists.\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n        if (this._triggerFontSize && this._overlayDir.overlayRef && this._overlayDir.overlayRef.overlayElement) {\n          this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n        }\n      });\n    }\n  }\n  /** Scrolls the active option into view. */\n  _scrollOptionIntoView(index) {\n    const labelCount = _countGroupLabelsBeforeLegacyOption(index, this.options, this.optionGroups);\n    const itemHeight = this._getItemHeight();\n    if (index === 0 && labelCount === 1) {\n      // If we've got one group label before the option and we're at the top option,\n      // scroll the list to the top. This is better UX than scrolling the list to the\n      // top of the option, because it allows the user to read the top group's label.\n      this.panel.nativeElement.scrollTop = 0;\n    } else {\n      this.panel.nativeElement.scrollTop = _getLegacyOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n  }\n  _positioningSettled() {\n    this._calculateOverlayOffsetX();\n    this.panel.nativeElement.scrollTop = this._scrollTop;\n  }\n  _panelDoneAnimating(isOpen) {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n    } else {\n      this._overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n    super._panelDoneAnimating(isOpen);\n  }\n  _getChangeEvent(value) {\n    return new MatLegacySelectChange(this, value);\n  }\n  _getOverlayMinWidth() {\n    return this._triggerRect?.width;\n  }\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  _calculateOverlayOffsetX() {\n    const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X : SELECT_PANEL_PADDING_X * 2;\n    let offsetX;\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else if (this.disableOptionCentering) {\n      offsetX = SELECT_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth);\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this._overlayDir.offsetX = Math.round(offsetX);\n    this._overlayDir.overlayRef.updatePosition();\n  }\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop;\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this.disableOptionCentering) {\n      return 0;\n    }\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  _checkOverlayWithinViewport(maxScroll) {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n      this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  _calculateOverlayPosition() {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset;\n    if (this.empty) {\n      selectedOptionOffset = 0;\n    } else {\n      selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n    }\n    selectedOptionOffset += _countGroupLabelsBeforeLegacyOption(selectedOptionOffset, this.options, this.optionGroups);\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n  /** Sets the transform origin point based on the selected option. */\n  _getOriginBasedOnOption() {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n  /** Calculates the height of the select's options. */\n  _getItemHeight() {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  _getItemCount() {\n    return this.options.length + this.optionGroups.length;\n  }\n}\nMatLegacySelect.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacySelect_BaseFactory;\n  return function MatLegacySelect_Factory(t) {\n    return (ɵMatLegacySelect_BaseFactory || (ɵMatLegacySelect_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacySelect)))(t || MatLegacySelect);\n  };\n}();\nMatLegacySelect.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatLegacySelect,\n  selectors: [[\"mat-select\"]],\n  contentQueries: function MatLegacySelect_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatLegacyOption, 5);\n      i0.ɵɵcontentQuery(dirIndex, MAT_LEGACY_OPTGROUP, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"combobox\", \"aria-autocomplete\", \"none\", \"aria-haspopup\", \"true\", 1, \"mat-select\"],\n  hostVars: 19,\n  hostBindings: function MatLegacySelect_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function MatLegacySelect_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatLegacySelect_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"blur\", function MatLegacySelect_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n      i0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty)(\"mat-select-multiple\", ctx.multiple);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matSelect\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MatLegacyFormFieldControl,\n    useExisting: MatLegacySelect\n  }, {\n    provide: MAT_LEGACY_OPTION_PARENT_COMPONENT,\n    useExisting: MatLegacySelect\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 9,\n  vars: 12,\n  consts: [[\"cdk-overlay-origin\", \"\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder mat-select-min-line\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\", \"mat-select-min-line\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [\"class\", \"mat-select-min-line\", 4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-min-line\"], [1, \"mat-select-panel-wrap\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n  template: function MatLegacySelect_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c0);\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵlistener(\"click\", function MatLegacySelect_Template_div_click_0_listener() {\n        return ctx.toggle();\n      });\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵtemplate(4, MatLegacySelect_span_4_Template, 2, 1, \"span\", 3);\n      i0.ɵɵtemplate(5, MatLegacySelect_span_5_Template, 3, 2, \"span\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"div\", 5);\n      i0.ɵɵelement(7, \"div\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(8, MatLegacySelect_ng_template_8_Template, 4, 14, \"ng-template\", 7);\n      i0.ɵɵlistener(\"backdropClick\", function MatLegacySelect_Template_ng_template_backdropClick_8_listener() {\n        return ctx.close();\n      })(\"attach\", function MatLegacySelect_Template_ng_template_attach_8_listener() {\n        return ctx._onAttached();\n      })(\"detach\", function MatLegacySelect_Template_ng_template_detach_8_listener() {\n        return ctx.close();\n      });\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n      i0.ɵɵattribute(\"aria-owns\", ctx.panelOpen ? ctx.id + \"-panel\" : null);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n      i0.ɵɵattribute(\"id\", ctx._valueId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", true);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngSwitchCase\", false);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._getOverlayMinWidth())(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    }\n  },\n  dependencies: [i1.NgClass, i1.NgSwitch, i1.NgSwitchCase, i1.NgSwitchDefault, i2.CdkConnectedOverlay, i2.CdkOverlayOrigin],\n  styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid rgba(0,0,0,0);border-right:5px solid rgba(0,0,0,0);border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matLegacySelectAnimations.transformPanelWrap, matLegacySelectAnimations.transformPanel]\n  },\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacySelect, [{\n    type: Component,\n    args: [{\n      selector: 'mat-select',\n      exportAs: 'matSelect',\n      inputs: ['disabled', 'disableRipple', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'role': 'combobox',\n        'aria-autocomplete': 'none',\n        // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n        // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n        // value. At some point we should try to switch it back to being `listbox`.\n        'aria-haspopup': 'true',\n        'class': 'mat-select',\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n        '[attr.aria-expanded]': 'panelOpen',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n        '[class.mat-select-disabled]': 'disabled',\n        '[class.mat-select-invalid]': 'errorState',\n        '[class.mat-select-required]': 'required',\n        '[class.mat-select-empty]': 'empty',\n        '[class.mat-select-multiple]': 'multiple',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()'\n      },\n      animations: [matLegacySelectAnimations.transformPanelWrap, matLegacySelectAnimations.transformPanel],\n      providers: [{\n        provide: MatLegacyFormFieldControl,\n        useExisting: MatLegacySelect\n      }, {\n        provide: MAT_LEGACY_OPTION_PARENT_COMPONENT,\n        useExisting: MatLegacySelect\n      }],\n      template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_getOverlayMinWidth()\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n      styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid rgba(0,0,0,0);border-right:5px solid rgba(0,0,0,0);border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"]\n    }]\n  }], null, {\n    options: [{\n      type: ContentChildren,\n      args: [MatLegacyOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MAT_LEGACY_OPTGROUP, {\n        descendants: true\n      }]\n    }],\n    customTrigger: [{\n      type: ContentChild,\n      args: [MAT_SELECT_TRIGGER]\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Use `MatSelectModule` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacySelectModule {}\nMatLegacySelectModule.ɵfac = function MatLegacySelectModule_Factory(t) {\n  return new (t || MatLegacySelectModule)();\n};\nMatLegacySelectModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatLegacySelectModule\n});\nMatLegacySelectModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n  imports: [CommonModule, OverlayModule, MatLegacyOptionModule, MatCommonModule, CdkScrollableModule, MatLegacyFormFieldModule, MatLegacyOptionModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacySelectModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule, MatLegacyOptionModule, MatCommonModule],\n      exports: [CdkScrollableModule, MatLegacyFormFieldModule, MatLegacySelect, MatLegacySelectTrigger, MatLegacyOptionModule, MatCommonModule],\n      declarations: [MatLegacySelect, MatLegacySelectTrigger],\n      providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatLegacySelect, MatLegacySelectChange, MatLegacySelectModule, MatLegacySelectTrigger, matLegacySelectAnimations };","map":{"version":3,"names":["i2","OverlayModule","i1","CommonModule","i0","Directive","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","ContentChild","NgModule","MatCommonModule","_countGroupLabelsBeforeLegacyOption","_getLegacyOptionScrollPosition","MAT_LEGACY_OPTION_PARENT_COMPONENT","MatLegacyOption","MAT_LEGACY_OPTGROUP","MatLegacyOptionModule","MatLegacyFormFieldControl","MatLegacyFormFieldModule","CdkScrollableModule","MAT_SELECT_TRIGGER","_MatSelectBase","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_CONFIG","MAT_LEGACY_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY","MAT_LEGACY_SELECT_SCROLL_STRATEGY","MAT_LEGACY_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_LEGACY_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_LEGACY_SELECT_TRIGGER","takeUntil","take","trigger","transition","query","animateChild","state","style","animate","matLegacySelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MatLegacySelectChange","constructor","source","value","MatLegacySelectTrigger","ɵfac","ɵdir","provide","useExisting","type","args","selector","providers","MatLegacySelect","arguments","_scrollTop","_triggerFontSize","_transformOrigin","_offsetY","_positions","originX","originY","overlayX","overlayY","_calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","ngOnInit","_viewportRuler","change","pipe","_destroy","subscribe","panelOpen","_triggerRect","nativeElement","getBoundingClientRect","_changeDetectorRef","markForCheck","open","_canOpen","parseInt","getComputedStyle","fontSize","_calculateOverlayPosition","_ngZone","onStable","_overlayDir","overlayRef","overlayElement","_scrollOptionIntoView","index","labelCount","options","optionGroups","panel","scrollTop","_positioningSettled","_calculateOverlayOffsetX","_panelDoneAnimating","isOpen","offsetX","_getChangeEvent","_getOverlayMinWidth","width","overlayRect","viewportSize","getViewportSize","isRtl","_isRtl","paddingWidth","multiple","disableOptionCentering","selected","_selectionModel","first","group","leftOverflow","left","rightOverflow","right","round","updatePosition","_calculateOverlayOffsetY","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","_checkOverlayWithinViewport","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","items","panelHeight","scrollContainerHeight","selectedOptionOffset","empty","toArray","indexOf","length","ɵcmp","NgClass","NgSwitch","NgSwitchCase","NgSwitchDefault","CdkConnectedOverlay","CdkOverlayOrigin","exportAs","inputs","encapsulation","None","changeDetection","OnPush","host","animations","template","styles","descendants","customTrigger","MatLegacySelectModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["/Users/marieklinaeva/github/ck-board/frontend/node_modules/@angular/material/fesm2020/legacy-select.mjs"],"sourcesContent":["import * as i2 from '@angular/cdk/overlay';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _countGroupLabelsBeforeLegacyOption, _getLegacyOptionScrollPosition, MAT_LEGACY_OPTION_PARENT_COMPONENT, MatLegacyOption, MAT_LEGACY_OPTGROUP, MatLegacyOptionModule } from '@angular/material/legacy-core';\nimport { MatLegacyFormFieldControl, MatLegacyFormFieldModule } from '@angular/material/legacy-form-field';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { MAT_SELECT_TRIGGER, _MatSelectBase, MAT_SELECT_SCROLL_STRATEGY_PROVIDER } from '@angular/material/select';\nexport { MAT_SELECT_CONFIG as MAT_LEGACY_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY as MAT_LEGACY_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER as MAT_LEGACY_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY as MAT_LEGACY_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER as MAT_LEGACY_SELECT_TRIGGER } from '@angular/material/select';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n * @deprecated Use `matSelectAnimations` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst matLegacySelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0,\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)',\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)',\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/**\n * The max height of the select's overlay panel.\n * @deprecated Use `SELECT_PANEL_MAX_HEIGHT` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis.\n * @deprecated Use `SELECT_PANEL_PADDING_X` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @deprecated Use `SELECT_PANEL_INDENT_PADDING_X` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @deprecated Use `SELECT_ITEM_HEIGHT_EM` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n *\n * @deprecated Use `SELECT_MULTIPLE_PANEL_PADDING_X` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n * @deprecated Use `SELECT_PANEL_VIEWPORT_PADDING` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Change event object that is emitted when the select value has changed.\n * @deprecated Use `MatSelectChange` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacySelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n * @deprecated Use `MatSelectTrigger` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacySelectTrigger {\n}\nMatLegacySelectTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacySelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatLegacySelectTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacySelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatLegacySelectTrigger }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacySelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatLegacySelectTrigger }],\n                }]\n        }] });\n/**\n * @deprecated Use `MatSelect` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacySelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize &&\n                    this._overlayDir.overlayRef &&\n                    this._overlayDir.overlayRef.overlayElement) {\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeLegacyOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.panel.nativeElement.scrollTop = 0;\n        }\n        else {\n            this.panel.nativeElement.scrollTop = _getLegacyOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        }\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this._overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatLegacySelectChange(this, value);\n    }\n    _getOverlayMinWidth() {\n        return this._triggerRect?.width;\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple\n            ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X\n            : SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this._overlayDir.offsetX = Math.round(offsetX);\n        this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - ((this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight);\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeLegacyOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatLegacySelect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacySelect, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatLegacySelect.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacySelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"true\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-select-disabled\": \"disabled\", \"class.mat-select-invalid\": \"errorState\", \"class.mat-select-required\": \"required\", \"class.mat-select-empty\": \"empty\", \"class.mat-select-multiple\": \"multiple\" }, classAttribute: \"mat-select\" }, providers: [\n        { provide: MatLegacyFormFieldControl, useExisting: MatLegacySelect },\n        { provide: MAT_LEGACY_OPTION_PARENT_COMPONENT, useExisting: MatLegacySelect },\n    ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatLegacyOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_LEGACY_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_getOverlayMinWidth()\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid rgba(0,0,0,0);border-right:5px solid rgba(0,0,0,0);border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"], dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { kind: \"directive\", type: i1.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { kind: \"directive\", type: i1.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { kind: \"directive\", type: i2.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: i2.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }], animations: [\n        matLegacySelectAnimations.transformPanelWrap,\n        matLegacySelectAnimations.transformPanel,\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacySelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                        // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                        // value. At some point we should try to switch it back to being `listbox`.\n                        'aria-haspopup': 'true',\n                        'class': 'mat-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-select-disabled]': 'disabled',\n                        '[class.mat-select-invalid]': 'errorState',\n                        '[class.mat-select-required]': 'required',\n                        '[class.mat-select-empty]': 'empty',\n                        '[class.mat-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [\n                        matLegacySelectAnimations.transformPanelWrap,\n                        matLegacySelectAnimations.transformPanel,\n                    ], providers: [\n                        { provide: MatLegacyFormFieldControl, useExisting: MatLegacySelect },\n                        { provide: MAT_LEGACY_OPTION_PARENT_COMPONENT, useExisting: MatLegacySelect },\n                    ], template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_getOverlayMinWidth()\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid rgba(0,0,0,0);border-right:5px solid rgba(0,0,0,0);border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatLegacyOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_LEGACY_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Use `MatSelectModule` from `@angular/material/select` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacySelectModule {\n}\nMatLegacySelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacySelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatLegacySelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacySelectModule, declarations: [MatLegacySelect, MatLegacySelectTrigger], imports: [CommonModule, OverlayModule, MatLegacyOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n        MatLegacyFormFieldModule,\n        MatLegacySelect,\n        MatLegacySelectTrigger,\n        MatLegacyOptionModule,\n        MatCommonModule] });\nMatLegacySelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacySelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule, OverlayModule, MatLegacyOptionModule, MatCommonModule, CdkScrollableModule,\n        MatLegacyFormFieldModule,\n        MatLegacyOptionModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacySelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatLegacyOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatLegacyFormFieldModule,\n                        MatLegacySelect,\n                        MatLegacySelectTrigger,\n                        MatLegacyOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatLegacySelect, MatLegacySelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatLegacySelect, MatLegacySelectChange, MatLegacySelectModule, MatLegacySelectTrigger, matLegacySelectAnimations };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}