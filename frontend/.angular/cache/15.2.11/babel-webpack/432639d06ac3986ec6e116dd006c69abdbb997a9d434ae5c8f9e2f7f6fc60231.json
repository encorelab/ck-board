{"ast":null,"code":"import _asyncToGenerator from \"/Users/marieklinaeva/github/ck-board/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/user.service\";\nexport class SsoGuard {\n  constructor(userService) {\n    this.userService = userService;\n  }\n  canActivate(_next, _state) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.userService.loggedIn) {\n        return true;\n      } else {\n        if (yield _this.userService.isSsoEnabled()) {\n          return _this.userService.trySsoLogin(_state.url);\n        } else {\n          return true;\n        }\n      }\n    })();\n  }\n}\nSsoGuard.ɵfac = function SsoGuard_Factory(t) {\n  return new (t || SsoGuard)(i0.ɵɵinject(i1.UserService));\n};\nSsoGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SsoGuard,\n  factory: SsoGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAWA,OAAM,MAAOA,QAAQ;EACnBC,YAAmBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAExCC,WAAW,CACfC,KAA6B,EAC7BC,MAA2B;IAAA;IAAA;MAE3B,IAAI,KAAI,CAACH,WAAW,CAACI,QAAQ,EAAE;QAC7B,OAAO,IAAI;OACZ,MAAM;QACL,UAAU,KAAI,CAACJ,WAAW,CAACK,YAAY,EAAE,EAAE;UACzC,OAAO,KAAI,CAACL,WAAW,CAACM,WAAW,CAACH,MAAM,CAACI,GAAG,CAAC;SAChD,MAAM;UACL,OAAO,IAAI;;;IAEd;EACH;;;mBAhBWT,QAAQ;AAAA;;SAARA,QAAQ;EAAAU,SAARV,QAAQ;EAAAW,YAFP;AAAM","names":["SsoGuard","constructor","userService","canActivate","_next","_state","loggedIn","isSsoEnabled","trySsoLogin","url","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/guards/sso.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { UserService } from '../services/user.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SsoGuard implements CanActivate {\n  constructor(public userService: UserService) {}\n\n  async canActivate(\n    _next: ActivatedRouteSnapshot,\n    _state: RouterStateSnapshot\n  ) {\n    if (this.userService.loggedIn) {\n      return true;\n    } else {\n      if (await this.userService.isSsoEnabled()) {\n        return this.userService.trySsoLogin(_state.url);\n      } else {\n        return true;\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}