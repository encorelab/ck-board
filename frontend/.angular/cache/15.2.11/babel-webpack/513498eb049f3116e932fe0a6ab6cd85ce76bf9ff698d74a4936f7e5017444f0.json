{"ast":null,"code":"import _asyncToGenerator from \"/Users/marieklinaeva/github/ck-board/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nimport * as i2 from \"./board.service\";\nimport * as i3 from \"@angular/common/http\";\nexport class TraceService {\n  constructor(userService, boardService, http) {\n    this.userService = userService;\n    this.boardService = boardService;\n    this.http = http;\n    this.traceContext = {\n      userID: '',\n      projectID: '',\n      boardID: '',\n      clientTimestamp: -1,\n      allowTracing: false\n    };\n  }\n  setTraceContext(projectID, boardID) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      var _a;\n      _this.traceContext.boardID = boardID;\n      _this.traceContext.projectID = projectID;\n      _this.traceContext.userID = ((_a = _this.userService.user) === null || _a === void 0 ? void 0 : _a.userID) || '';\n      _this.board = yield _this.boardService.get(boardID);\n      _this.traceContext.allowTracing = _this.board.permissions.allowTracing || false;\n    })();\n  }\n  getTraceContext() {\n    this.traceContext.clientTimestamp = Date.now();\n    return this.traceContext;\n  }\n  getTraceRecords(projectID) {\n    return this.http.get('trace/' + projectID).toPromise();\n  }\n}\nTraceService.ɵfac = function TraceService_Factory(t) {\n  return new (t || TraceService)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.BoardService), i0.ɵɵinject(i3.HttpClient));\n};\nTraceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TraceService,\n  factory: TraceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;AAWA,OAAM,MAAOA,YAAY;EAGvBC,YACUC,WAAwB,EACxBC,YAA0B,EAC1BC,IAAgB;IAFhB,gBAAW,GAAXF,WAAW;IACX,iBAAY,GAAZC,YAAY;IACZ,SAAI,GAAJC,IAAI;IAEZ,IAAI,CAACC,YAAY,GAAG;MAClBC,MAAM,EAAE,EAAE;MACVC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,EAAE;MACXC,eAAe,EAAE,CAAC,CAAC;MACnBC,YAAY,EAAE;KACf;EACH;EACMC,eAAe,CAACJ,SAAiB,EAAEC,OAAe;IAAA;IAAA;;MACtD,KAAI,CAACH,YAAY,CAACG,OAAO,GAAGA,OAAO;MACnC,KAAI,CAACH,YAAY,CAACE,SAAS,GAAGA,SAAS;MACvC,KAAI,CAACF,YAAY,CAACC,MAAM,GAAG,YAAI,CAACJ,WAAW,CAACU,IAAI,0CAAEN,MAAM,KAAI,EAAE;MAC9D,KAAI,CAACO,KAAK,SAAS,KAAI,CAACV,YAAY,CAACW,GAAG,CAACN,OAAO,CAAC;MACjD,KAAI,CAACH,YAAY,CAACK,YAAY,GAC5B,KAAI,CAACG,KAAK,CAACE,WAAW,CAACL,YAAY,IAAI,KAAK;IAAC;EACjD;EACAM,eAAe;IACb,IAAI,CAACX,YAAY,CAACI,eAAe,GAAGQ,IAAI,CAACC,GAAG,EAAE;IAC9C,OAAO,IAAI,CAACb,YAAY;EAC1B;EACAc,eAAe,CAACZ,SAAiB;IAC/B,OAAO,IAAI,CAACH,IAAI,CAACU,GAAG,CAAU,QAAQ,GAAGP,SAAS,CAAC,CAACa,SAAS,EAAE;EACjE;;;mBA9BWpB,YAAY;AAAA;;SAAZA,YAAY;EAAAqB,SAAZrB,YAAY;EAAAsB,YAFX;AAAM","names":["TraceService","constructor","userService","boardService","http","traceContext","userID","projectID","boardID","clientTimestamp","allowTracing","setTraceContext","user","board","get","permissions","getTraceContext","Date","now","getTraceRecords","toPromise","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/services/trace.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Board } from '../models/board';\nimport { Trace } from '../models/trace';\nimport { TraceContext } from '../models/traceContext';\nimport { BoardService } from './board.service';\nimport { UserService } from './user.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TraceService {\n  traceContext: TraceContext;\n  board: Board;\n  constructor(\n    private userService: UserService,\n    private boardService: BoardService,\n    private http: HttpClient\n  ) {\n    this.traceContext = {\n      userID: '',\n      projectID: '',\n      boardID: '',\n      clientTimestamp: -1,\n      allowTracing: false,\n    };\n  }\n  async setTraceContext(projectID: string, boardID: string) {\n    this.traceContext.boardID = boardID;\n    this.traceContext.projectID = projectID;\n    this.traceContext.userID = this.userService.user?.userID || '';\n    this.board = await this.boardService.get(boardID);\n    this.traceContext.allowTracing =\n      this.board.permissions.allowTracing || false;\n  }\n  getTraceContext(): TraceContext {\n    this.traceContext.clientTimestamp = Date.now();\n    return this.traceContext;\n  }\n  getTraceRecords(projectID: string) {\n    return this.http.get<Trace[]>('trace/' + projectID).toPromise();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}