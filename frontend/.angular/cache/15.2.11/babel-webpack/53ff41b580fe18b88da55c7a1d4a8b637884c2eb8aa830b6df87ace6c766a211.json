{"ast":null,"code":"import { GroupTaskStatus } from '../models/workflow';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nimport * as i2 from \"./post.service\";\nimport * as i3 from \"./bucket.service\";\nimport * as i4 from \"@angular/common/http\";\nexport class WorkflowService {\n  userService;\n  postService;\n  bucketService;\n  http;\n  constructor(userService, postService, bucketService, http) {\n    this.userService = userService;\n    this.postService = postService;\n    this.bucketService = bucketService;\n    this.http = http;\n  }\n  getAll(boardID) {\n    return this.http.get('workflows/boards/' + boardID).toPromise();\n  }\n  getDistribution(boardID) {\n    return this.http.get('workflows/distribution/boards/' + boardID).toPromise();\n  }\n  createDistribution(workflow) {\n    return this.http.post('workflows/distribution/', workflow).toPromise();\n  }\n  updateDistribution(workflowID, workflow) {\n    return this.http.put('workflows/distribution/' + workflowID, workflow).toPromise();\n  }\n  removeDistribution(workflowID) {\n    return this.http.delete('workflows/distribution/' + workflowID).toPromise();\n  }\n  runDistribution(workflowID) {\n    return this.http.post('workflows/distribution/' + workflowID, {}).toPromise();\n  }\n  getTask(boardID) {\n    return this.http.get('workflows/task/boards/' + boardID + '?active=false').toPromise();\n  }\n  getActiveTasks(boardID) {\n    return this.http.get('workflows/task/boards/' + boardID + '?active=true').toPromise();\n  }\n  createTask(workflow) {\n    return this.http.post('workflows/task/', workflow).toPromise();\n  }\n  updateTask(workflowID, workflow) {\n    return this.http.put('workflows/task/' + workflowID, workflow).toPromise();\n  }\n  removeTask(workflowID) {\n    return this.http.delete('workflows/task/' + workflowID).toPromise();\n  }\n  runTask(workflowID) {\n    return this.http.post('workflows/task/' + workflowID, {}).toPromise();\n  }\n  getGroupTaskByWorkflowGroup(groupID, workflowID, representation) {\n    return this.http.get(`workflows/task/${workflowID}/groupTask/group/${groupID}?representation=${representation}`).toPromise();\n  }\n  getGroupTasks(boardID, representation) {\n    return this.http.get(`workflows/task/groupTask/board/${boardID}/user/${this.userService.user?.userID}?representation=${representation}`).toPromise();\n  }\n  getGroupTasksByWorkflow(workflowID, representation) {\n    return this.http.get(`workflows/task/${workflowID}/groupTask?representation=${representation}`).toPromise();\n  }\n  updateGroupTask(groupTaskID, update) {\n    return this.http.post('workflows/task/groupTask/' + groupTaskID, update).toPromise();\n  }\n  updateTaskProgress(workflowID, groupTaskID, postID, delta, type) {\n    return this.http.post(`workflows/task/${workflowID}/groupTask/${groupTaskID}`, {\n      postID,\n      delta,\n      type\n    }).toPromise();\n  }\n  submitPost(groupTaskID, post) {\n    return this.http.post(`workflows/task/groupTask/${groupTaskID}/submit`, {\n      post\n    }).toPromise();\n  }\n  markGroupTaskComplete(groupTaskID) {\n    return this.http.post(`workflows/task/groupTask/${groupTaskID}/status`, {\n      status: GroupTaskStatus.COMPLETE\n    }).toPromise();\n  }\n  markGroupTaskActive(groupTaskID) {\n    return this.http.post(`workflows/task/groupTask/${groupTaskID}/status`, {\n      status: GroupTaskStatus.ACTIVE\n    }).toPromise();\n  }\n  static ɵfac = function WorkflowService_Factory(t) {\n    return new (t || WorkflowService)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.PostService), i0.ɵɵinject(i3.BucketService), i0.ɵɵinject(i4.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WorkflowService,\n    factory: WorkflowService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["GroupTaskStatus","WorkflowService","userService","postService","bucketService","http","constructor","getAll","boardID","get","toPromise","getDistribution","createDistribution","workflow","post","updateDistribution","workflowID","put","removeDistribution","delete","runDistribution","getTask","getActiveTasks","createTask","updateTask","removeTask","runTask","getGroupTaskByWorkflowGroup","groupID","representation","getGroupTasks","user","userID","getGroupTasksByWorkflow","updateGroupTask","groupTaskID","update","updateTaskProgress","postID","delta","type","submitPost","markGroupTaskComplete","status","COMPLETE","markGroupTaskActive","ACTIVE","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/services/workflow.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  DistributionWorkflow,\n  GroupTask,\n  GroupTaskEntity,\n  GroupTaskStatus,\n  GroupTaskType,\n  TaskWorkflow,\n  Workflow,\n} from '../models/workflow';\nimport { BucketService } from './bucket.service';\nimport { PostService } from './post.service';\nimport { UserService } from './user.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class WorkflowService {\n  constructor(\n    public userService: UserService,\n    public postService: PostService,\n    public bucketService: BucketService,\n    public http: HttpClient\n  ) {}\n\n  getAll(boardID: string): Promise<Workflow[]> {\n    return this.http.get<Workflow[]>('workflows/boards/' + boardID).toPromise();\n  }\n\n  getDistribution(boardID: string): Promise<Workflow[]> {\n    return this.http\n      .get<DistributionWorkflow[]>('workflows/distribution/boards/' + boardID)\n      .toPromise();\n  }\n\n  createDistribution(\n    workflow: DistributionWorkflow\n  ): Promise<DistributionWorkflow> {\n    return this.http\n      .post<DistributionWorkflow>('workflows/distribution/', workflow)\n      .toPromise();\n  }\n\n  updateDistribution(\n    workflowID: string,\n    workflow: Partial<DistributionWorkflow>\n  ): Promise<DistributionWorkflow> {\n    return this.http\n      .put<DistributionWorkflow>(\n        'workflows/distribution/' + workflowID,\n        workflow\n      )\n      .toPromise();\n  }\n\n  removeDistribution(workflowID: string): Promise<DistributionWorkflow> {\n    return this.http\n      .delete<DistributionWorkflow>('workflows/distribution/' + workflowID)\n      .toPromise();\n  }\n\n  runDistribution(workflowID: string): Promise<any> {\n    return this.http\n      .post<any>('workflows/distribution/' + workflowID, {})\n      .toPromise();\n  }\n\n  getTask(boardID: string): Promise<TaskWorkflow[]> {\n    return this.http\n      .get<TaskWorkflow[]>('workflows/task/boards/' + boardID + '?active=false')\n      .toPromise();\n  }\n\n  getActiveTasks(boardID: string): Promise<TaskWorkflow[]> {\n    return this.http\n      .get<TaskWorkflow[]>('workflows/task/boards/' + boardID + '?active=true')\n      .toPromise();\n  }\n\n  createTask(workflow: TaskWorkflow): Promise<TaskWorkflow> {\n    return this.http\n      .post<TaskWorkflow>('workflows/task/', workflow)\n      .toPromise();\n  }\n\n  updateTask(\n    workflowID: string,\n    workflow: Partial<TaskWorkflow>\n  ): Promise<TaskWorkflow> {\n    return this.http\n      .put<TaskWorkflow>('workflows/task/' + workflowID, workflow)\n      .toPromise();\n  }\n\n  removeTask(workflowID: string): Promise<TaskWorkflow> {\n    return this.http\n      .delete<TaskWorkflow>('workflows/task/' + workflowID)\n      .toPromise();\n  }\n\n  runTask(workflowID: string): Promise<any> {\n    return this.http.post<any>('workflows/task/' + workflowID, {}).toPromise();\n  }\n\n  getGroupTaskByWorkflowGroup<T extends GroupTaskEntity>(\n    groupID: string,\n    workflowID: string,\n    representation: T\n  ): Promise<GroupTaskType<T>[]> {\n    return this.http\n      .get<GroupTaskType<T>[]>(\n        `workflows/task/${workflowID}/groupTask/group/${groupID}?representation=${representation}`\n      )\n      .toPromise();\n  }\n\n  getGroupTasks<T extends GroupTaskEntity>(\n    boardID: string,\n    representation: T\n  ): Promise<GroupTaskType<T>[]> {\n    return this.http\n      .get<GroupTaskType<T>[]>(\n        `workflows/task/groupTask/board/${boardID}/user/${this.userService.user?.userID}?representation=${representation}`\n      )\n      .toPromise();\n  }\n\n  getGroupTasksByWorkflow<T extends GroupTaskEntity>(\n    workflowID: string,\n    representation: T\n  ): Promise<GroupTaskType<T>[]> {\n    return this.http\n      .get<GroupTaskType<T>[]>(\n        `workflows/task/${workflowID}/groupTask?representation=${representation}`\n      )\n      .toPromise();\n  }\n\n  updateGroupTask(\n    groupTaskID: string,\n    update: Partial<GroupTask>\n  ): Promise<GroupTask> {\n    return this.http\n      .post<GroupTask>('workflows/task/groupTask/' + groupTaskID, update)\n      .toPromise();\n  }\n\n  updateTaskProgress(\n    workflowID: string,\n    groupTaskID: string,\n    postID: string,\n    delta: number,\n    type: string\n  ): Promise<GroupTask> {\n    return this.http\n      .post<GroupTask>(\n        `workflows/task/${workflowID}/groupTask/${groupTaskID}`,\n        { postID, delta, type }\n      )\n      .toPromise();\n  }\n\n  submitPost(groupTaskID: string, post: string): Promise<GroupTask> {\n    return this.http\n      .post<GroupTask>(`workflows/task/groupTask/${groupTaskID}/submit`, {\n        post,\n      })\n      .toPromise();\n  }\n\n  markGroupTaskComplete(groupTaskID: string): Promise<GroupTask> {\n    return this.http\n      .post<GroupTask>(`workflows/task/groupTask/${groupTaskID}/status`, {\n        status: GroupTaskStatus.COMPLETE,\n      })\n      .toPromise();\n  }\n\n  markGroupTaskActive(groupTaskID: string): Promise<GroupTask> {\n    return this.http\n      .post<GroupTask>(`workflows/task/groupTask/${groupTaskID}/status`, {\n        status: GroupTaskStatus.ACTIVE,\n      })\n      .toPromise();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}