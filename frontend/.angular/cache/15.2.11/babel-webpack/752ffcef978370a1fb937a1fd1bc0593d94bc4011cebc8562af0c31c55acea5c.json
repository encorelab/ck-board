{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./socket.service\";\nimport * as i3 from \"./notification.service\";\nimport * as i4 from \"./project.service\";\nexport class TodoItemService {\n  constructor(http, socketService, notificationService, projectService) {\n    this.http = http;\n    this.socketService = socketService;\n    this.notificationService = notificationService;\n    this.projectService = projectService;\n  }\n  getById(todoItemID) {\n    return this.http.get(`todoItems/${todoItemID}`).toPromise();\n  }\n  getByUserProject(userID, projectID) {\n    return this.http.get(`todoItems/${userID}/${projectID}`).toPromise();\n  }\n  getByUser(userID) {\n    return this.http.get(`todoItems/user/${userID}`).toPromise();\n  }\n  getByProject(projectID, representation = 'default') {\n    return this.http.get(`todoItems/project/${projectID}?representation=${representation}`).toPromise();\n  }\n  getMultipleByGroup(ids) {\n    return this.http.post('todoItems/group/multiple', ids).toPromise();\n  }\n  create(todoItem) {\n    return this.http.post(`todoItems/`, todoItem).toPromise();\n  }\n  update(todoItemID, todoItem) {\n    return this.http.post(`todoItems/${todoItemID}`, todoItem).toPromise();\n  }\n  remove(todoItemID) {\n    return this.http.delete(`todoItems/${todoItemID}`).toPromise();\n  }\n}\nTodoItemService.ɵfac = function TodoItemService_Factory(t) {\n  return new (t || TodoItemService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SocketService), i0.ɵɵinject(i3.NotificationService), i0.ɵɵinject(i4.ProjectService));\n};\nTodoItemService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TodoItemService,\n  factory: TodoItemService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;;AAWA,OAAM,MAAOA,eAAe;EAC1BC,YACUC,IAAgB,EAChBC,aAA4B,EAC5BC,mBAAwC,EACxCC,cAA8B;IAH9B,SAAI,GAAJH,IAAI;IACJ,kBAAa,GAAbC,aAAa;IACb,wBAAmB,GAAnBC,mBAAmB;IACnB,mBAAc,GAAdC,cAAc;EACrB;EAEHC,OAAO,CAACC,UAAkB;IACxB,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAW,aAAaD,UAAU,EAAE,CAAC,CAACE,SAAS,EAAE;EACvE;EAEAC,gBAAgB,CAACC,MAAc,EAAEC,SAAiB;IAChD,OAAO,IAAI,CAACV,IAAI,CACbM,GAAG,CAAa,aAAaG,MAAM,IAAIC,SAAS,EAAE,CAAC,CACnDH,SAAS,EAAE;EAChB;EAEAI,SAAS,CAACF,MAAc;IACtB,OAAO,IAAI,CAACT,IAAI,CAACM,GAAG,CAAa,kBAAkBG,MAAM,EAAE,CAAC,CAACF,SAAS,EAAE;EAC1E;EAEAK,YAAY,CACVF,SAAiB,EACjBG,cAAc,GAAG,SAAS;IAE1B,OAAO,IAAI,CAACb,IAAI,CACbM,GAAG,CACF,qBAAqBI,SAAS,mBAAmBG,cAAc,EAAE,CAClE,CACAN,SAAS,EAAE;EAChB;EAEAO,kBAAkB,CAACC,GAAa;IAC9B,OAAO,IAAI,CAACf,IAAI,CACbgB,IAAI,CAAa,0BAA0B,EAAED,GAAG,CAAC,CACjDR,SAAS,EAAE;EAChB;EAEAU,MAAM,CAACC,QAAkB;IACvB,OAAO,IAAI,CAAClB,IAAI,CAACgB,IAAI,CAAW,YAAY,EAAEE,QAAQ,CAAC,CAACX,SAAS,EAAE;EACrE;EAEAY,MAAM,CAACd,UAAkB,EAAEa,QAA2B;IACpD,OAAO,IAAI,CAAClB,IAAI,CACbgB,IAAI,CAAa,aAAaX,UAAU,EAAE,EAAEa,QAAQ,CAAC,CACrDX,SAAS,EAAE;EAChB;EAEAa,MAAM,CAACf,UAAkB;IACvB,OAAO,IAAI,CAACL,IAAI,CAACqB,MAAM,CAAW,aAAahB,UAAU,EAAE,CAAC,CAACE,SAAS,EAAE;EAC1E;;;mBAnDWT,eAAe;AAAA;;SAAfA,eAAe;EAAAwB,SAAfxB,eAAe;EAAAyB,YAFd;AAAM","names":["TodoItemService","constructor","http","socketService","notificationService","projectService","getById","todoItemID","get","toPromise","getByUserProject","userID","projectID","getByUser","getByProject","representation","getMultipleByGroup","ids","post","create","todoItem","update","remove","delete","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/services/todoItem.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ExpandedTodoItem, TodoItem } from '../models/todoItem';\nimport { NotificationService } from './notification.service';\nimport { SocketService } from './socket.service';\nimport { SocketEvent, TODOITEM_NOTIFICATION } from '../utils/constants';\nimport { ProjectService } from './project.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TodoItemService {\n  constructor(\n    private http: HttpClient,\n    private socketService: SocketService,\n    private notificationService: NotificationService,\n    private projectService: ProjectService\n  ) {}\n\n  getById(todoItemID: string): Promise<TodoItem> {\n    return this.http.get<TodoItem>(`todoItems/${todoItemID}`).toPromise();\n  }\n\n  getByUserProject(userID: string, projectID: string): Promise<TodoItem[]> {\n    return this.http\n      .get<TodoItem[]>(`todoItems/${userID}/${projectID}`)\n      .toPromise();\n  }\n\n  getByUser(userID: string): Promise<TodoItem[]> {\n    return this.http.get<TodoItem[]>(`todoItems/user/${userID}`).toPromise();\n  }\n\n  getByProject(\n    projectID: string,\n    representation = 'default'\n  ): Promise<ExpandedTodoItem[]> {\n    return this.http\n      .get<ExpandedTodoItem[]>(\n        `todoItems/project/${projectID}?representation=${representation}`\n      )\n      .toPromise();\n  }\n\n  getMultipleByGroup(ids: string[]): Promise<TodoItem[]> {\n    return this.http\n      .post<TodoItem[]>('todoItems/group/multiple', ids)\n      .toPromise();\n  }\n\n  create(todoItem: TodoItem): Promise<TodoItem> {\n    return this.http.post<TodoItem>(`todoItems/`, todoItem).toPromise();\n  }\n\n  update(todoItemID: string, todoItem: Partial<TodoItem>) {\n    return this.http\n      .post<TodoItem[]>(`todoItems/${todoItemID}`, todoItem)\n      .toPromise();\n  }\n\n  remove(todoItemID: string) {\n    return this.http.delete<TodoItem>(`todoItems/${todoItemID}`).toPromise();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}