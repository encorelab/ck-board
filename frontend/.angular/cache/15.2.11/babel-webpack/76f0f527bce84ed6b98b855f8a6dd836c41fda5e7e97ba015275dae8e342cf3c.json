{"ast":null,"code":"import _asyncToGenerator from \"/Users/marieklinaeva/github/ck-board/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { MAT_LEGACY_DIALOG_DATA as MAT_DIALOG_DATA } from '@angular/material/legacy-dialog';\nimport { CompletionQuality } from 'src/app/models/todoItem';\nimport { UntypedFormControl, Validators } from '@angular/forms';\nimport { MyErrorStateMatcher } from 'src/app/utils/ErrorStateMatcher';\nimport { EXPANDED_TODO_TYPE, EXPANDED_COMPLETION_QUALITY } from 'src/app/utils/constants';\nimport { AddTodoListModalComponent } from '../add-todo-list-modal/add-todo-list-modal.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/legacy-dialog\";\nimport * as i2 from \"src/app/services/group.service\";\nimport * as i3 from \"src/app/services/user.service\";\nimport * as i4 from \"src/app/services/todoItem.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/material/legacy-button\";\nimport * as i8 from \"@angular/material/icon\";\nimport * as i9 from \"@angular/material/legacy-form-field\";\nimport * as i10 from \"@angular/material/legacy-card\";\nimport * as i11 from \"@angular/material/legacy-tooltip\";\nimport * as i12 from \"@angular/material/legacy-chips\";\nimport * as i13 from \"@angular/material/legacy-core\";\nimport * as i14 from \"@angular/material/legacy-select\";\nfunction TodoItemCardModalComponent_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function TodoItemCardModalComponent_button_9_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.editTodoItem(ctx_r4.todoItem));\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"edit\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TodoItemCardModalComponent_button_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function TodoItemCardModalComponent_button_10_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.restoreTodoItem(ctx_r6.todoItem));\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"restore\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction TodoItemCardModalComponent_div_27_mat_option_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 21);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"value\", option_r9);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r8.EXPANDED_COMPLETION_QUALITY[option_r9], \" \");\n  }\n}\nfunction TodoItemCardModalComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"mat-form-field\", 16)(2, \"mat-label\");\n    i0.ɵɵtext(3, \"Completion Quality\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-select\", 17);\n    i0.ɵɵlistener(\"ngModelChange\", function TodoItemCardModalComponent_div_27_Template_mat_select_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.completionQuality = $event);\n    })(\"valueChange\", function TodoItemCardModalComponent_div_27_Template_mat_select_valueChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.defaultQuality = $event);\n    });\n    i0.ɵɵtemplate(5, TodoItemCardModalComponent_div_27_mat_option_5_Template, 2, 2, \"mat-option\", 18);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"mat-chip\", 19);\n    i0.ɵɵlistener(\"click\", function TodoItemCardModalComponent_div_27_Template_mat_chip_click_6_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.completeTask());\n    });\n    i0.ɵɵelementStart(7, \"span\", 20);\n    i0.ɵɵtext(8, \" Mark as Done \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngModel\", ctx_r2.completionQuality)(\"formControl\", ctx_r2.completionQualityFormControl)(\"errorStateMatcher\", ctx_r2.matcher)(\"value\", ctx_r2.defaultQuality);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.completionQualityOptions);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", !ctx_r2.completionQualityFormControl.valid || ctx_r2.completionQuality === \"N_A\");\n  }\n}\nfunction TodoItemCardModalComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h4\");\n    i0.ɵɵtext(2, \" Completion Quality: \");\n    i0.ɵɵelementStart(3, \"mat-chip\", 22);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.taskCompletionQuality, \" \");\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"color\": a0\n  };\n};\nconst linkifyStr = require('linkifyjs/lib/linkify-string');\nexport class TodoItemCardModalComponent {\n  dialogRef;\n  dialog;\n  groupService;\n  userService;\n  todoItemService;\n  data;\n  todoItem;\n  taskTitle = '';\n  taskDescription = '';\n  taskCompletionQuality = '';\n  assignee = '';\n  status = '';\n  statusColor = '';\n  taskTypes = '';\n  EXPANDED_COMPLETION_QUALITY = EXPANDED_COMPLETION_QUALITY;\n  completionQualityOptions = [CompletionQuality.N_A, CompletionQuality.INCOMPLETE, CompletionQuality.VERY_UNSATISFIED, CompletionQuality.UNSATISFIED, CompletionQuality.NEUTRAL, CompletionQuality.SATISFIED, CompletionQuality.VERY_SATISFIED];\n  completionQuality = CompletionQuality.N_A;\n  defaultQuality = CompletionQuality.N_A;\n  completionQualityFormControl = new UntypedFormControl('valid', [Validators.required]);\n  matcher = new MyErrorStateMatcher();\n  projectID;\n  userID;\n  group;\n  constructor(dialogRef, dialog, groupService, userService, todoItemService, data) {\n    this.dialogRef = dialogRef;\n    this.dialog = dialog;\n    this.groupService = groupService;\n    this.userService = userService;\n    this.todoItemService = todoItemService;\n    this.data = data;\n    this.todoItem = {\n      ...data.todoItem\n    };\n    this.taskTitle = data.todoItem.title;\n    this.projectID = data.projectID;\n    this.userID = data.userID;\n    this.group = data.group;\n    this.taskDescription = linkifyStr(data.todoItem?.description ? data.todoItem.description : '', {\n      defaultProtocol: 'https',\n      target: '_blank'\n    });\n    this.taskTypes = data.todoItem.type.map(type => EXPANDED_TODO_TYPE[type]).join(', ');\n    if (data.todoItem.completed) {\n      this.taskCompletionQuality = data.todoItem?.quality ? EXPANDED_COMPLETION_QUALITY[data.todoItem.quality] : EXPANDED_COMPLETION_QUALITY['SATISFIED'];\n    }\n    this.calclateTaskStatus(data.todoItem);\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this.updateAssignee(_this.data.todoItem);\n    })();\n  }\n  updateAssignee(todoItem) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (todoItem.groupID) {\n        _this2.assignee = (yield _this2.groupService.getById(todoItem.groupID)).name;\n      } else {\n        _this2.assignee = (yield _this2.userService.getOneById(todoItem.userID)).username;\n      }\n    })();\n  }\n  calclateTaskStatus(todoItem) {\n    const date = new Date(`${todoItem.deadline.date} ${todoItem.deadline.time}`);\n    const currentDate = new Date();\n    const incomplete = todoItem?.quality == CompletionQuality.INCOMPLETE;\n    const overdue = date < currentDate && !todoItem.completed;\n    this.status = incomplete ? 'Incomplete' : overdue ? 'Missed' : todoItem.completed ? 'Complete' : 'Pending';\n    this.statusColor = incomplete ? 'red' : overdue ? 'red' : todoItem.completed ? 'green' : 'orange';\n  }\n  completeTask() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (!_this3.completionQualityFormControl.valid || _this3.completionQuality === 'N_A') {\n        return;\n      }\n      const updatedTodo = yield _this3.todoItemService.update(_this3.data.todoItem.todoItemID, {\n        completed: true,\n        quality: _this3.completionQuality\n      });\n      _this3.dialogRef.close();\n      _this3.data.onComplete(updatedTodo);\n    })();\n  }\n  editTodoItem(todoItem) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.dialog.open(AddTodoListModalComponent, {\n        width: '600px',\n        data: {\n          projectID: _this4.projectID,\n          userID: _this4.userID,\n          todoItem: todoItem,\n          group: todoItem.groupID ? yield _this4.groupService.getById(todoItem.groupID) : null,\n          onComplete: function () {\n            var _ref = _asyncToGenerator(function* (todoItem) {\n              if (todoItem) {\n                Object.assign(_this4.todoItem, todoItem);\n                _this4.taskTitle = todoItem.title;\n                _this4.taskDescription = linkifyStr(todoItem?.description ? todoItem.description : '', {\n                  defaultProtocol: 'https',\n                  target: '_blank'\n                });\n                _this4.taskTypes = todoItem.type.map(type => EXPANDED_TODO_TYPE[type]).join(', ');\n                yield _this4.updateAssignee(_this4.todoItem);\n                _this4.data.onEdit(_this4.todoItem);\n              }\n            });\n            return function onComplete(_x) {\n              return _ref.apply(this, arguments);\n            };\n          }()\n        }\n      });\n    })();\n  }\n  restoreTodoItem(todoItem) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      _this5.dialog.open(AddTodoListModalComponent, {\n        width: '600px',\n        data: {\n          projectID: _this5.projectID,\n          userID: _this5.userID,\n          restoreTodoItem: todoItem,\n          onComplete: function () {\n            var _ref2 = _asyncToGenerator(function* (todoItem) {\n              if (todoItem) {\n                Object.assign(_this5.todoItem, todoItem);\n                _this5.taskCompletionQuality = EXPANDED_COMPLETION_QUALITY['N_A'];\n                _this5.taskTitle = todoItem.title;\n                _this5.taskDescription = linkifyStr(todoItem?.description ? todoItem.description : '', {\n                  defaultProtocol: 'https',\n                  target: '_blank'\n                });\n                _this5.taskTypes = todoItem.type.map(type => EXPANDED_TODO_TYPE[type]).join(', ');\n                _this5.calclateTaskStatus(todoItem);\n                yield _this5.updateAssignee(_this5.todoItem);\n                _this5.data.onRestore(todoItem);\n              }\n            });\n            return function onComplete(_x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }()\n        }\n      });\n    })();\n  }\n  onNoClick() {\n    this.close();\n  }\n  close() {\n    this.dialogRef.close();\n  }\n  static ɵfac = function TodoItemCardModalComponent_Factory(t) {\n    return new (t || TodoItemCardModalComponent)(i0.ɵɵdirectiveInject(i1.MatLegacyDialogRef), i0.ɵɵdirectiveInject(i1.MatLegacyDialog), i0.ɵɵdirectiveInject(i2.GroupService), i0.ɵɵdirectiveInject(i3.UserService), i0.ɵɵdirectiveInject(i4.TodoItemService), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TodoItemCardModalComponent,\n    selectors: [[\"app-todo-item-card-modal\"]],\n    decls: 32,\n    vars: 15,\n    consts: [[1, \"details\"], [\"mat-card-avatar\", \"\", 1, \"avatar\"], [1, \"fill-remaining-space\"], [\"mat-icon-button\", \"\", \"matTooltip\", \"Edit Task\", 3, \"click\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", \"matTooltip\", \"Restore Task\", 3, \"click\", 4, \"ngIf\"], [2, \"overflow-wrap\", \"break-word\", 3, \"innerHTML\"], [1, \"todoItemDetails\"], [2, \"display\", \"flex\"], [2, \"margin-right\", \"15px\"], [2, \"font-weight\", \"500\", \"margin-bottom\", \"2px\"], [2, \"font-weight\", \"500\", \"margin\", \"0 30px\", 3, \"ngStyle\"], [4, \"ngIf\"], [\"mat-dialog-actions\", \"\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-icon-button\", \"\", \"matTooltip\", \"Edit Task\", 3, \"click\"], [\"mat-icon-button\", \"\", \"matTooltip\", \"Restore Task\", 3, \"click\"], [\"appearance\", \"fill\"], [\"panelClass\", \"completion-quality-panel\", 3, \"ngModel\", \"formControl\", \"errorStateMatcher\", \"value\", \"ngModelChange\", \"valueChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", \"color\", \"accent\", \"selected\", \"\", 1, \"config-button\", 2, \"text-align\", \"center\", 3, \"disabled\", \"click\"], [2, \"width\", \"100%\", \"text-align\", \"center\"], [3, \"value\"], [\"color\", \"accent\", \"selected\", \"\", 2, \"margin\", \"0 5px\"]],\n    template: function TodoItemCardModalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"mat-card\", 0)(2, \"mat-card-header\");\n        i0.ɵɵelement(3, \"div\", 1);\n        i0.ɵɵelementStart(4, \"mat-card-title\");\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"span\", 2);\n        i0.ɵɵelementStart(7, \"mat-card-subtitle\");\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, TodoItemCardModalComponent_button_9_Template, 3, 0, \"button\", 3);\n        i0.ɵɵtemplate(10, TodoItemCardModalComponent_button_10_Template, 3, 0, \"button\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"mat-card-content\")(12, \"p\", 5);\n        i0.ɵɵtext(13);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"p\");\n        i0.ɵɵtext(15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 6)(17, \"div\", 7)(18, \"mat-icon\", 8);\n        i0.ɵɵtext(19, \"access_time\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\")(21, \"p\", 9);\n        i0.ɵɵtext(22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"p\");\n        i0.ɵɵtext(24);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(25, \"p\", 10);\n        i0.ɵɵtext(26);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(27, TodoItemCardModalComponent_div_27_Template, 9, 6, \"div\", 11);\n        i0.ɵɵtemplate(28, TodoItemCardModalComponent_div_28_Template, 5, 1, \"div\", 11);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(29, \"div\", 12)(30, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function TodoItemCardModalComponent_Template_button_click_30_listener() {\n          return ctx.close();\n        });\n        i0.ɵɵtext(31, \"Close\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.taskTitle);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.assignee);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.todoItem.completed);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.todoItem.completed);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"innerHTML\", ctx.taskDescription, i0.ɵɵsanitizeHtml);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.taskDescription, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Type : \", ctx.taskTypes, \"\");\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate1(\" \", ctx.todoItem.deadline.date, \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.todoItem.deadline.time);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(13, _c0, ctx.statusColor));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.status);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.todoItem.completed);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.todoItem.completed);\n      }\n    },\n    dependencies: [i5.NgForOf, i5.NgIf, i5.NgStyle, i6.NgControlStatus, i6.FormControlDirective, i7.MatLegacyButton, i8.MatIcon, i1.MatLegacyDialogActions, i9.MatLegacyFormField, i9.MatLegacyLabel, i10.MatLegacyCard, i10.MatLegacyCardHeader, i10.MatLegacyCardContent, i10.MatLegacyCardTitle, i10.MatLegacyCardSubtitle, i10.MatLegacyCardAvatar, i11.MatLegacyTooltip, i12.MatLegacyChip, i13.MatLegacyOption, i14.MatLegacySelect],\n    styles: [\".avatar[_ngcontent-%COMP%] {\\n  background-image: url(\\\"https://www.mtsolar.us/wp-content/uploads/2020/04/avatar-placeholder.png\\\");\\n  background-size: cover;\\n}\\n\\n.fill-remaining-space[_ngcontent-%COMP%] {\\n  flex: 1 1 auto;\\n}\\n\\n.details[_ngcontent-%COMP%] {\\n  box-shadow: none !important;\\n  padding: 0 !important;\\n}\\n\\n.todoItemDetails[_ngcontent-%COMP%] {\\n  display: flex;\\n  margin: 10px 0;\\n  align-items: center;\\n}\\n\\n.config-button[_ngcontent-%COMP%] {\\n  margin: 5px;\\n}\\n\\n  .mat-select-panel.completion-quality-panel {\\n  max-height: 800px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90b2RvLWl0ZW0tY2FyZC1tb2RhbC90b2RvLWl0ZW0tY2FyZC1tb2RhbC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGlHQUFBO0VBQ0Esc0JBQUE7QUFDRjs7QUFFQTtFQUNFLGNBQUE7QUFDRjs7QUFFQTtFQUNFLDJCQUFBO0VBQ0EscUJBQUE7QUFDRjs7QUFFQTtFQUNFLGFBQUE7RUFDQSxjQUFBO0VBQ0EsbUJBQUE7QUFDRjs7QUFFQTtFQUNFLFdBQUE7QUFDRjs7QUFFQTtFQUNFLGlCQUFBO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIuYXZhdGFyIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCdodHRwczovL3d3dy5tdHNvbGFyLnVzL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzA0L2F2YXRhci1wbGFjZWhvbGRlci5wbmcnKTtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3Zlcjtcbn1cblxuLmZpbGwtcmVtYWluaW5nLXNwYWNlIHtcbiAgZmxleDogMSAxIGF1dG87XG59XG5cbi5kZXRhaWxzIHtcbiAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xuICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7XG59XG5cbi50b2RvSXRlbURldGFpbHN7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIG1hcmdpbjogMTBweCAwO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4uY29uZmlnLWJ1dHRvbiB7XG4gIG1hcmdpbjogNXB4O1xufVxuXG46Om5nLWRlZXAgLm1hdC1zZWxlY3QtcGFuZWwuY29tcGxldGlvbi1xdWFsaXR5LXBhbmVsIHtcbiAgbWF4LWhlaWdodDogODAwcHg7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["MAT_LEGACY_DIALOG_DATA","MAT_DIALOG_DATA","CompletionQuality","UntypedFormControl","Validators","MyErrorStateMatcher","EXPANDED_TODO_TYPE","EXPANDED_COMPLETION_QUALITY","AddTodoListModalComponent","i0","linkifyStr","require","TodoItemCardModalComponent","dialogRef","dialog","groupService","userService","todoItemService","data","todoItem","taskTitle","taskDescription","taskCompletionQuality","assignee","status","statusColor","taskTypes","completionQualityOptions","N_A","INCOMPLETE","VERY_UNSATISFIED","UNSATISFIED","NEUTRAL","SATISFIED","VERY_SATISFIED","completionQuality","defaultQuality","completionQualityFormControl","required","matcher","projectID","userID","group","constructor","title","description","defaultProtocol","target","type","map","join","completed","quality","calclateTaskStatus","ngOnInit","updateAssignee","groupID","getById","name","getOneById","username","date","Date","deadline","time","currentDate","incomplete","overdue","completeTask","valid","updatedTodo","update","todoItemID","close","onComplete","editTodoItem","open","width","Object","assign","onEdit","restoreTodoItem","onRestore","onNoClick","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/components/todo-item-card-modal/todo-item-card-modal.component.ts","/Users/marieklinaeva/github/ck-board/frontend/src/app/components/todo-item-card-modal/todo-item-card-modal.component.html"],"sourcesContent":["import { Component, OnInit, Inject } from '@angular/core';\nimport { UserService } from 'src/app/services/user.service';\nimport { GroupService } from 'src/app/services/group.service';\nimport {\n  MatLegacyDialog as MatDialog,\n  MatLegacyDialogRef as MatDialogRef,\n  MAT_LEGACY_DIALOG_DATA as MAT_DIALOG_DATA,\n} from '@angular/material/legacy-dialog';\nimport {\n  TodoItem,\n  TodoItemType,\n  CompletionQuality,\n} from 'src/app/models/todoItem';\nimport { UntypedFormControl, Validators } from '@angular/forms';\nimport { MyErrorStateMatcher } from 'src/app/utils/ErrorStateMatcher';\nimport {\n  EXPANDED_TODO_TYPE,\n  EXPANDED_COMPLETION_QUALITY,\n} from 'src/app/utils/constants';\nimport { TodoItemService } from 'src/app/services/todoItem.service';\nimport { Group } from 'src/app/models/group';\nimport { AddTodoListModalComponent } from '../add-todo-list-modal/add-todo-list-modal.component';\n\nconst linkifyStr = require('linkifyjs/lib/linkify-string');\n\n@Component({\n  selector: 'app-todo-item-card-modal',\n  templateUrl: './todo-item-card-modal.component.html',\n  styleUrls: ['./todo-item-card-modal.component.scss'],\n})\nexport class TodoItemCardModalComponent implements OnInit {\n  todoItem: TodoItem;\n  taskTitle: string = '';\n  taskDescription: string = '';\n  taskCompletionQuality: string = '';\n  assignee: string = '';\n  status: string = '';\n  statusColor: string = '';\n  taskTypes: string = '';\n  EXPANDED_COMPLETION_QUALITY: typeof EXPANDED_COMPLETION_QUALITY =\n    EXPANDED_COMPLETION_QUALITY;\n  completionQualityOptions = [\n    CompletionQuality.N_A,\n    CompletionQuality.INCOMPLETE,\n    CompletionQuality.VERY_UNSATISFIED,\n    CompletionQuality.UNSATISFIED,\n    CompletionQuality.NEUTRAL,\n    CompletionQuality.SATISFIED,\n    CompletionQuality.VERY_SATISFIED,\n  ];\n  completionQuality: CompletionQuality = CompletionQuality.N_A;\n  defaultQuality = CompletionQuality.N_A;\n\n  completionQualityFormControl = new UntypedFormControl('valid', [\n    Validators.required,\n  ]);\n  matcher = new MyErrorStateMatcher();\n\n  projectID: string;\n  userID: string;\n  group: Group | null;\n\n  constructor(\n    public dialogRef: MatDialogRef<TodoItemCardModalComponent>,\n    public dialog: MatDialog,\n    public groupService: GroupService,\n    public userService: UserService,\n    public todoItemService: TodoItemService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    this.todoItem = { ...data.todoItem };\n    this.taskTitle = data.todoItem.title;\n    this.projectID = data.projectID;\n    this.userID = data.userID;\n    this.group = data.group;\n    this.taskDescription = linkifyStr(\n      data.todoItem?.description ? data.todoItem.description : '',\n      {\n        defaultProtocol: 'https',\n        target: '_blank',\n      }\n    );\n    this.taskTypes = data.todoItem.type\n      .map((type) => EXPANDED_TODO_TYPE[type])\n      .join(', ');\n    if (data.todoItem.completed) {\n      this.taskCompletionQuality = data.todoItem?.quality\n        ? EXPANDED_COMPLETION_QUALITY[data.todoItem.quality]\n        : EXPANDED_COMPLETION_QUALITY['SATISFIED'];\n    }\n    this.calclateTaskStatus(data.todoItem);\n  }\n\n  async ngOnInit(): Promise<void> {\n    await this.updateAssignee(this.data.todoItem);\n  }\n\n  async updateAssignee(todoItem: TodoItem) {\n    if (todoItem.groupID) {\n      this.assignee = (await this.groupService.getById(todoItem.groupID)).name;\n    } else {\n      this.assignee = (\n        await this.userService.getOneById(todoItem.userID)\n      ).username;\n    }\n  }\n\n  calclateTaskStatus(todoItem: TodoItem) {\n    const date = new Date(\n      `${todoItem.deadline.date} ${todoItem.deadline.time}`\n    );\n    const currentDate = new Date();\n    const incomplete = todoItem?.quality == CompletionQuality.INCOMPLETE;\n    const overdue = date < currentDate && !todoItem.completed;\n    this.status = incomplete\n      ? 'Incomplete'\n      : overdue\n      ? 'Missed'\n      : todoItem.completed\n      ? 'Complete'\n      : 'Pending';\n    this.statusColor = incomplete\n      ? 'red'\n      : overdue\n      ? 'red'\n      : todoItem.completed\n      ? 'green'\n      : 'orange';\n  }\n\n  async completeTask() {\n    if (\n      !this.completionQualityFormControl.valid ||\n      this.completionQuality === 'N_A'\n    ) {\n      return;\n    }\n    const updatedTodo = await this.todoItemService.update(\n      this.data.todoItem.todoItemID,\n      {\n        completed: true,\n        quality: this.completionQuality,\n      }\n    );\n    this.dialogRef.close();\n    this.data.onComplete(updatedTodo);\n  }\n\n  async editTodoItem(todoItem: TodoItem) {\n    this.dialog.open(AddTodoListModalComponent, {\n      width: '600px',\n      data: {\n        projectID: this.projectID,\n        userID: this.userID,\n        todoItem: todoItem,\n        group: todoItem.groupID\n          ? await this.groupService.getById(todoItem.groupID)\n          : null,\n        onComplete: async (todoItem?: TodoItem) => {\n          if (todoItem) {\n            Object.assign(this.todoItem, todoItem);\n            this.taskTitle = todoItem.title;\n            this.taskDescription = linkifyStr(\n              todoItem?.description ? todoItem.description : '',\n              {\n                defaultProtocol: 'https',\n                target: '_blank',\n              }\n            );\n            this.taskTypes = todoItem.type\n              .map((type) => EXPANDED_TODO_TYPE[type])\n              .join(', ');\n            await this.updateAssignee(this.todoItem);\n            this.data.onEdit(this.todoItem);\n          }\n        },\n      },\n    });\n  }\n\n  async restoreTodoItem(todoItem: TodoItem) {\n    this.dialog.open(AddTodoListModalComponent, {\n      width: '600px',\n      data: {\n        projectID: this.projectID,\n        userID: this.userID,\n        restoreTodoItem: todoItem,\n        onComplete: async (todoItem?: TodoItem) => {\n          if (todoItem) {\n            Object.assign(this.todoItem, todoItem);\n            this.taskCompletionQuality = EXPANDED_COMPLETION_QUALITY['N_A'];\n            this.taskTitle = todoItem.title;\n            this.taskDescription = linkifyStr(\n              todoItem?.description ? todoItem.description : '',\n              {\n                defaultProtocol: 'https',\n                target: '_blank',\n              }\n            );\n            this.taskTypes = todoItem.type\n              .map((type) => EXPANDED_TODO_TYPE[type])\n              .join(', ');\n            this.calclateTaskStatus(todoItem);\n            await this.updateAssignee(this.todoItem);\n            this.data.onRestore(todoItem);\n          }\n        },\n      },\n    });\n  }\n\n  onNoClick(): void {\n    this.close();\n  }\n\n  close(): void {\n    this.dialogRef.close();\n  }\n}\n","<div>\n  <mat-card class=\"details\">\n    <mat-card-header>\n      <div mat-card-avatar class=\"avatar\"></div>\n      <mat-card-title>{{ taskTitle }}</mat-card-title>\n\n      <span class=\"fill-remaining-space\"></span>\n      <mat-card-subtitle>{{ assignee }}</mat-card-subtitle>\n      <button\n        *ngIf=\"!todoItem.completed\"\n        mat-icon-button\n        matTooltip=\"Edit Task\"\n        (click)=\"editTodoItem(todoItem)\"\n      >\n        <mat-icon>edit</mat-icon>\n      </button>\n      <button\n        *ngIf=\"todoItem.completed\"\n        mat-icon-button\n        matTooltip=\"Restore Task\"\n        (click)=\"restoreTodoItem(todoItem)\"\n      >\n        <mat-icon>restore</mat-icon>\n      </button>\n    </mat-card-header>\n    <mat-card-content>\n      <p style=\"overflow-wrap: break-word\" [innerHTML]=\"taskDescription\">\n        {{ taskDescription }}\n      </p>\n    </mat-card-content>\n    <p>Type : {{taskTypes}}</p>\n    <div class=\"todoItemDetails\">\n      <div style=\"display: flex;\">\n        <mat-icon style=\"margin-right: 15px;\">access_time</mat-icon>\n        <div>\n          <p style=\"font-weight: 500; margin-bottom: 2px\">\n            {{todoItem.deadline.date}}\n          </p>\n          <p>{{todoItem.deadline.time}}</p>\n        </div>\n      </div>\n      <p style=\"font-weight: 500; margin: 0 30px;\" [ngStyle]=\"{'color': statusColor}\">{{status}}</p>\n    </div>\n    <div *ngIf=\"!todoItem.completed\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Completion Quality</mat-label>\n        <mat-select\n          [(ngModel)]=\"completionQuality\"\n          [formControl]=\"completionQualityFormControl\"\n          [errorStateMatcher]=\"matcher\"\n          [(value)]=\"defaultQuality\"\n          panelClass=\"completion-quality-panel\"\n        >\n        <mat-option *ngFor=\"let option of completionQualityOptions\" [value]=option>\n          {{ EXPANDED_COMPLETION_QUALITY[option] }}\n        </mat-option>\n        \n        </mat-select>\n      </mat-form-field>\n      <mat-chip \n        [disabled]=\"!completionQualityFormControl.valid || completionQuality === 'N_A'\" \n        (click)=\"completeTask()\"\n        class=\"config-button\" mat-raised-button color=\"accent\" \n        style=\"text-align: center\" selected>\n        <span style=\"width: 100%;text-align: center;\">\n          Mark as Done\n        </span>\n      </mat-chip>\n    </div>\n    <div *ngIf=\"todoItem.completed\">\n      <h4>\n        Completion Quality:\n        <mat-chip color=\"accent\" selected style=\"margin: 0 5px\">\n          {{taskCompletionQuality}}\n        </mat-chip>\n      </h4>\n    </div>\n  </mat-card>\n</div>\n<div mat-dialog-actions>\n  <button mat-button (click)=\"close()\">Close</button>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}