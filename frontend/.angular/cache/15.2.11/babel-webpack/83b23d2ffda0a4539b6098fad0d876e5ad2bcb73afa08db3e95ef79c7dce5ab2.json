{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { tap, timeout } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/user.service\";\nexport const DEFAULT_TIMEOUT = 30000;\nexport class APIInterceptor {\n  auth;\n  cache;\n  constructor(auth) {\n    this.auth = auth;\n    this.cache = new Map();\n  }\n  intercept(req, next) {\n    const timeoutValue = Number(req.headers.get('timeout') || DEFAULT_TIMEOUT);\n    const apiReq = req.clone({\n      url: `http://localhost:8001/api/${req.url}`,\n      setHeaders: {\n        Authorization: `Bearer ${this.auth.token}`\n      }\n    });\n    if (this.shouldCache(apiReq)) {\n      const cachedResponse = this.cache.get(apiReq.urlWithParams);\n      if (cachedResponse) {\n        return of(cachedResponse.clone());\n      }\n    }\n    return next.handle(apiReq).pipe(timeout(timeoutValue)).pipe(tap(httpEvent => {\n      if (httpEvent instanceof HttpResponse && this.shouldCache(apiReq)) {\n        this.cache.set(apiReq.urlWithParams, httpEvent.clone());\n      }\n    }));\n  }\n  shouldCache(req) {\n    return req.method === 'GET' && req.headers.get('cache') === 'true';\n  }\n  static ɵfac = function APIInterceptor_Factory(t) {\n    return new (t || APIInterceptor)(i0.ɵɵinject(i1.UserService));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: APIInterceptor,\n    factory: APIInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":"AACA,SAKEA,YAAY,QACP,sBAAsB;AAC7B,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,GAAG,EAAEC,OAAO,QAAQ,gBAAgB;;;AAG7C,OAAO,MAAMC,eAAe,GAAG,KAAK;AAGpC,OAAM,MAAOC,cAAc;EAGNC;EAFXC,KAAK;EAEbC,YAAmBF,IAAiB;IAAjB,SAAI,GAAJA,IAAI;IACrB,IAAI,CAACC,KAAK,GAAG,IAAIE,GAAG,EAAE;EACxB;EAEAC,SAAS,CACPC,GAAqB,EACrBC,IAAiB;IAEjB,MAAMC,YAAY,GAAGC,MAAM,CAACH,GAAG,CAACI,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC,IAAIZ,eAAe,CAAC;IAE1E,MAAMa,MAAM,GAAGN,GAAG,CAACO,KAAK,CAAC;MACvBC,GAAG,EAAE,6BAA6BR,GAAG,CAACQ,GAAG,EAAE;MAC3CC,UAAU,EAAE;QACVC,aAAa,EAAE,UAAU,IAAI,CAACf,IAAI,CAACgB,KAAK;;KAE3C,CAAC;IAEF,IAAI,IAAI,CAACC,WAAW,CAACN,MAAM,CAAC,EAAE;MAC5B,MAAMO,cAAc,GAAkC,IAAI,CAACjB,KAAK,CAACS,GAAG,CAClEC,MAAM,CAACQ,aAAa,CACrB;MACD,IAAID,cAAc,EAAE;QAClB,OAAOvB,EAAE,CAACuB,cAAc,CAACN,KAAK,EAAE,CAAC;;;IAIrC,OAAON,IAAI,CACRc,MAAM,CAACT,MAAM,CAAC,CACdU,IAAI,CAACxB,OAAO,CAACU,YAAY,CAAC,CAAC,CAC3Bc,IAAI,CACHzB,GAAG,CAAkB0B,SAAyB,IAAI;MAChD,IAAIA,SAAS,YAAY5B,YAAY,IAAI,IAAI,CAACuB,WAAW,CAACN,MAAM,CAAC,EAAE;QACjE,IAAI,CAACV,KAAK,CAACsB,GAAG,CAACZ,MAAM,CAACQ,aAAa,EAAEG,SAAS,CAACV,KAAK,EAAE,CAAC;;IAE3D,CAAC,CAAC,CACH;EACL;EAEAK,WAAW,CAACZ,GAAqB;IAC/B,OAAOA,GAAG,CAACmB,MAAM,KAAK,KAAK,IAAInB,GAAG,CAACI,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC,KAAK,MAAM;EACpE;;qBA3CWX,cAAc;EAAA;;WAAdA,cAAc;IAAA0B,SAAd1B,cAAc;EAAA","names":["HttpResponse","of","tap","timeout","DEFAULT_TIMEOUT","APIInterceptor","auth","cache","constructor","Map","intercept","req","next","timeoutValue","Number","headers","get","apiReq","clone","url","setHeaders","Authorization","token","shouldCache","cachedResponse","urlWithParams","handle","pipe","httpEvent","set","method","factory"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/utils/interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { tap, timeout } from 'rxjs/operators';\nimport { UserService } from '../services/user.service';\n\nexport const DEFAULT_TIMEOUT = 30000;\n\n@Injectable()\nexport class APIInterceptor implements HttpInterceptor {\n  private cache: Map<string, HttpResponse<any>>;\n\n  constructor(public auth: UserService) {\n    this.cache = new Map();\n  }\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    const timeoutValue = Number(req.headers.get('timeout') || DEFAULT_TIMEOUT);\n\n    const apiReq = req.clone({\n      url: `http://localhost:8001/api/${req.url}`,\n      setHeaders: {\n        Authorization: `Bearer ${this.auth.token}`,\n      },\n    });\n\n    if (this.shouldCache(apiReq)) {\n      const cachedResponse: HttpResponse<any> | undefined = this.cache.get(\n        apiReq.urlWithParams\n      );\n      if (cachedResponse) {\n        return of(cachedResponse.clone());\n      }\n    }\n\n    return next\n      .handle(apiReq)\n      .pipe(timeout(timeoutValue))\n      .pipe(\n        tap<HttpEvent<any>>((httpEvent: HttpEvent<any>) => {\n          if (httpEvent instanceof HttpResponse && this.shouldCache(apiReq)) {\n            this.cache.set(apiReq.urlWithParams, httpEvent.clone());\n          }\n        })\n      );\n  }\n\n  shouldCache(req: HttpRequest<any>): boolean {\n    return req.method === 'GET' && req.headers.get('cache') === 'true';\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}