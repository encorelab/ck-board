{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PostService {\n  http;\n  constructor(http) {\n    this.http = http;\n  }\n  get(postID) {\n    return this.http.get('posts/' + postID).toPromise();\n  }\n  getAll(postIDs) {\n    return this.http.post('posts/many', {\n      postIDs\n    }).toPromise();\n  }\n  getAllByBoard(boardID, opts, type) {\n    let params = new HttpParams();\n    if (opts) {\n      params = params.append('size', opts.size);\n      params = params.append('page', opts.page);\n    }\n    if (type) {\n      params = params.append('type', type);\n    }\n    return this.http.get('posts/boards/' + boardID, {\n      params\n    }).toPromise();\n  }\n  getAllByBucket(bucketID, opts) {\n    let params = new HttpParams();\n    if (opts) {\n      params = params.append('size', opts.size);\n      params = params.append('page', opts.page);\n    }\n    return this.http.get('posts/buckets/' + bucketID, {\n      params\n    }).toPromise();\n  }\n  create(post) {\n    return this.http.post('posts/', post, {\n      headers: new HttpHeaders({\n        timeout: `${5000}`\n      })\n    }).toPromise();\n  }\n  update(postID, value) {\n    return this.http.put('posts/' + postID, value).toPromise();\n  }\n  remove(id) {\n    return this.http.delete('posts/' + id).toPromise();\n  }\n  static ɵfac = function PostService_Factory(t) {\n    return new (t || PostService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostService,\n    factory: PostService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,EAAEC,UAAU,QAAQ,sBAAsB;;;AAY1E,OAAM,MAAOC,WAAW;EACHC;EAAnBC,YAAmBD,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAEtCE,GAAG,CAACC,MAAc;IAChB,OAAO,IAAI,CAACH,IAAI,CAACE,GAAG,CAAO,QAAQ,GAAGC,MAAM,CAAC,CAACC,SAAS,EAAE;EAC3D;EAEAC,MAAM,CAACC,OAAiB;IACtB,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAS,YAAY,EAAE;MAAED;IAAO,CAAE,CAAC,CAACF,SAAS,EAAE;EACtE;EAEAI,aAAa,CACXC,OAAe,EACfC,IAAc,EACdC,IAAe;IAEf,IAAIC,MAAM,GAAG,IAAId,UAAU,EAAE;IAC7B,IAAIY,IAAI,EAAE;MACRE,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,MAAM,EAAEH,IAAI,CAACI,IAAI,CAAC;MACzCF,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,MAAM,EAAEH,IAAI,CAACK,IAAI,CAAC;;IAE3C,IAAIJ,IAAI,EAAE;MACRC,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,MAAM,EAAEF,IAAI,CAAC;;IAGtC,OAAO,IAAI,CAACX,IAAI,CACbE,GAAG,CAAS,eAAe,GAAGO,OAAO,EAAE;MAAEG;IAAM,CAAE,CAAC,CAClDR,SAAS,EAAE;EAChB;EAEAY,cAAc,CAACC,QAAgB,EAAEP,IAAc;IAC7C,IAAIE,MAAM,GAAG,IAAId,UAAU,EAAE;IAC7B,IAAIY,IAAI,EAAE;MACRE,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,MAAM,EAAEH,IAAI,CAACI,IAAI,CAAC;MACzCF,MAAM,GAAGA,MAAM,CAACC,MAAM,CAAC,MAAM,EAAEH,IAAI,CAACK,IAAI,CAAC;;IAG3C,OAAO,IAAI,CAACf,IAAI,CACbE,GAAG,CAAM,gBAAgB,GAAGe,QAAQ,EAAE;MAAEL;IAAM,CAAE,CAAC,CACjDR,SAAS,EAAE;EAChB;EAEAc,MAAM,CAACX,IAAU;IACf,OAAO,IAAI,CAACP,IAAI,CACbO,IAAI,CAAO,QAAQ,EAAEA,IAAI,EAAE;MAC1BY,OAAO,EAAE,IAAItB,WAAW,CAAC;QAAEuB,OAAO,EAAE,GAAG,IAAI;MAAE,CAAE;KAChD,CAAC,CACDhB,SAAS,EAAE;EAChB;EAEAiB,MAAM,CAAClB,MAAc,EAAEmB,KAAoB;IACzC,OAAO,IAAI,CAACtB,IAAI,CAACuB,GAAG,CAAO,QAAQ,GAAGpB,MAAM,EAAEmB,KAAK,CAAC,CAAClB,SAAS,EAAE;EAClE;EAEAoB,MAAM,CAACC,EAAU;IACf,OAAO,IAAI,CAACzB,IAAI,CAAC0B,MAAM,CAAO,QAAQ,GAAGD,EAAE,CAAC,CAACrB,SAAS,EAAE;EAC1D;;qBAxDWL,WAAW;EAAA;;WAAXA,WAAW;IAAA4B,SAAX5B,WAAW;IAAA6B,YAFV;EAAM","names":["HttpHeaders","HttpParams","PostService","http","constructor","get","postID","toPromise","getAll","postIDs","post","getAllByBoard","boardID","opts","type","params","append","size","page","getAllByBucket","bucketID","create","headers","timeout","update","value","put","remove","id","delete","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/services/post.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport Post, { PostType } from '../models/post';\n\nexport interface Options {\n  size: number;\n  page: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PostService {\n  constructor(public http: HttpClient) {}\n\n  get(postID: string): Promise<Post> {\n    return this.http.get<Post>('posts/' + postID).toPromise();\n  }\n\n  getAll(postIDs: string[]): Promise<Post[]> {\n    return this.http.post<Post[]>('posts/many', { postIDs }).toPromise();\n  }\n\n  getAllByBoard(\n    boardID: string,\n    opts?: Options,\n    type?: PostType\n  ): Promise<Post[]> {\n    let params = new HttpParams();\n    if (opts) {\n      params = params.append('size', opts.size);\n      params = params.append('page', opts.page);\n    }\n    if (type) {\n      params = params.append('type', type);\n    }\n\n    return this.http\n      .get<Post[]>('posts/boards/' + boardID, { params })\n      .toPromise();\n  }\n\n  getAllByBucket(bucketID: string, opts?: Options): Promise<any> {\n    let params = new HttpParams();\n    if (opts) {\n      params = params.append('size', opts.size);\n      params = params.append('page', opts.page);\n    }\n\n    return this.http\n      .get<any>('posts/buckets/' + bucketID, { params })\n      .toPromise();\n  }\n\n  create(post: Post) {\n    return this.http\n      .post<Post>('posts/', post, {\n        headers: new HttpHeaders({ timeout: `${5000}` }),\n      })\n      .toPromise();\n  }\n\n  update(postID: string, value: Partial<Post>): Promise<Post> {\n    return this.http.put<Post>('posts/' + postID, value).toPromise();\n  }\n\n  remove(id: string): Promise<Post> {\n    return this.http.delete<Post>('posts/' + id).toPromise();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}