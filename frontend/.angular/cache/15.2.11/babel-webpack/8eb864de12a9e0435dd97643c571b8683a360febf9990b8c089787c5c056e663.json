{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { SnackBarComponent } from '../components/snackbar/snackbar.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/legacy-snack-bar\";\nexport class SnackbarService {\n  snackBar;\n  snackBarQueue = new BehaviorSubject([]);\n  snackBarQueue$ = this.snackBarQueue.asObservable();\n  constructor(snackBar) {\n    this.snackBar = snackBar;\n    let alreadyDismissed = false;\n    this.snackBarQueue$.subscribe(e => {\n      if (!alreadyDismissed && this.snackBar._openedSnackBarRef) {\n        this.snackBar.dismiss();\n      }\n      alreadyDismissed = false;\n      const nextIndex = e.length - 1;\n      if (nextIndex >= 0) {\n        const next = e[nextIndex];\n        this.openSnackbar(next);\n        this.snackBar._openedSnackBarRef?.afterDismissed().subscribe(close => {\n          if (close.dismissedByAction) {\n            alreadyDismissed = true;\n            this.dequeueSnackbar();\n          }\n        });\n      }\n    });\n  }\n  queueSnackbar(title, description = '', configParams = {}) {\n    this.snackBarQueue.next(this.snackBarQueue.value.concat([{\n      title,\n      description,\n      configParams\n    }]));\n  }\n  dequeueSnackbar() {\n    this.snackBarQueue.value.pop();\n    this.snackBarQueue.next(this.snackBarQueue.value);\n  }\n  snackbarIsOpen() {\n    return Boolean(this.snackBar._openedSnackBarRef);\n  }\n  openSnackbar(item) {\n    const config = item.configParams.matSnackbarConfig ?? {};\n    config.data = {\n      title: item.title,\n      description: item.description,\n      action: item.configParams.action,\n      close: () => this.snackBar._openedSnackBarRef?.dismissWithAction()\n    };\n    config.duration = 5000;\n    this.snackBar.openFromComponent(SnackBarComponent, config);\n  }\n  ngOnDestroy() {\n    this.snackBarQueue.next([]);\n  }\n  static ɵfac = function SnackbarService_Factory(t) {\n    return new (t || SnackbarService)(i0.ɵɵinject(i1.MatLegacySnackBar));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SnackbarService,\n    factory: SnackbarService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAQ,MAAM;AACtC,SAASC,iBAAiB,QAAQ,2CAA2C;;;AAqB7E,OAAM,MAAOC,eAAe;EAINC;EAHHC,aAAa,GAAG,IAAIJ,eAAe,CAAsB,EAAE,CAAC;EAC5DK,cAAc,GAAG,IAAI,CAACD,aAAa,CAACE,YAAY,EAAE;EAEnEC,YAAoBJ,QAAqB;IAArB,aAAQ,GAARA,QAAQ;IAC1B,IAAIK,gBAAgB,GAAG,KAAK;IAE5B,IAAI,CAACH,cAAc,CAACI,SAAS,CAAEC,CAAC,IAAI;MAClC,IAAI,CAACF,gBAAgB,IAAI,IAAI,CAACL,QAAQ,CAACQ,kBAAkB,EAAE;QACzD,IAAI,CAACR,QAAQ,CAACS,OAAO,EAAE;;MAEzBJ,gBAAgB,GAAG,KAAK;MAExB,MAAMK,SAAS,GAAGH,CAAC,CAACI,MAAM,GAAG,CAAC;MAC9B,IAAID,SAAS,IAAI,CAAC,EAAE;QAClB,MAAME,IAAI,GAAGL,CAAC,CAACG,SAAS,CAAC;QACzB,IAAI,CAACG,YAAY,CAACD,IAAI,CAAC;QACvB,IAAI,CAACZ,QAAQ,CAACQ,kBAAkB,EAC5BM,cAAc,EAAE,CACjBR,SAAS,CAAES,KAAK,IAAI;UACnB,IAAIA,KAAK,CAACC,iBAAiB,EAAE;YAC3BX,gBAAgB,GAAG,IAAI;YACvB,IAAI,CAACY,eAAe,EAAE;;QAE1B,CAAC,CAAC;;IAER,CAAC,CAAC;EACJ;EAEAC,aAAa,CACXC,KAAa,EACbC,WAAW,GAAG,EAAE,EAChBC,eAA+B,EAAE;IAEjC,IAAI,CAACpB,aAAa,CAACW,IAAI,CACrB,IAAI,CAACX,aAAa,CAACqB,KAAK,CAACC,MAAM,CAAC,CAAC;MAAEJ,KAAK;MAAEC,WAAW;MAAEC;IAAY,CAAE,CAAC,CAAC,CACxE;EACH;EAEAJ,eAAe;IACb,IAAI,CAAChB,aAAa,CAACqB,KAAK,CAACE,GAAG,EAAE;IAC9B,IAAI,CAACvB,aAAa,CAACW,IAAI,CAAC,IAAI,CAACX,aAAa,CAACqB,KAAK,CAAC;EACnD;EAEAG,cAAc;IACZ,OAAOC,OAAO,CAAC,IAAI,CAAC1B,QAAQ,CAACQ,kBAAkB,CAAC;EAClD;EAEQK,YAAY,CAACc,IAAuB;IAC1C,MAAMC,MAAM,GAAGD,IAAI,CAACN,YAAY,CAACQ,iBAAiB,IAAI,EAAE;IACxDD,MAAM,CAACE,IAAI,GAAG;MACZX,KAAK,EAAEQ,IAAI,CAACR,KAAK;MACjBC,WAAW,EAAEO,IAAI,CAACP,WAAW;MAC7BW,MAAM,EAAEJ,IAAI,CAACN,YAAY,CAACU,MAAM;MAChChB,KAAK,EAAE,MAAM,IAAI,CAACf,QAAQ,CAACQ,kBAAkB,EAAEwB,iBAAiB;KACjE;IACDJ,MAAM,CAACK,QAAQ,GAAG,IAAI;IAEtB,IAAI,CAACjC,QAAQ,CAACkC,iBAAiB,CAACpC,iBAAiB,EAAE8B,MAAM,CAAC;EAC5D;EAEAO,WAAW;IACT,IAAI,CAAClC,aAAa,CAACW,IAAI,CAAC,EAAE,CAAC;EAC7B;;qBA/DWb,eAAe;EAAA;;WAAfA,eAAe;IAAAqC,SAAfrC,eAAe;IAAAsC,YAFd;EAAM","names":["BehaviorSubject","SnackBarComponent","SnackbarService","snackBar","snackBarQueue","snackBarQueue$","asObservable","constructor","alreadyDismissed","subscribe","e","_openedSnackBarRef","dismiss","nextIndex","length","next","openSnackbar","afterDismissed","close","dismissedByAction","dequeueSnackbar","queueSnackbar","title","description","configParams","value","concat","pop","snackbarIsOpen","Boolean","item","config","matSnackbarConfig","data","action","dismissWithAction","duration","openFromComponent","ngOnDestroy","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/services/snackbar.service.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { MatLegacySnackBar as MatSnackBar, MatLegacySnackBarConfig as MatSnackBarConfig } from '@angular/material/legacy-snack-bar';\nimport { BehaviorSubject } from 'rxjs';\nimport { SnackBarComponent } from '../components/snackbar/snackbar.component';\n\nexport interface SnackbarConfig {\n  matSnackbarConfig?: MatSnackBarConfig;\n  action?: Action;\n}\n\nexport interface Action {\n  name: string;\n  run: Function;\n}\n\nexport interface SnackBarQueueItem {\n  title: string;\n  description: string;\n  configParams: SnackbarConfig;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SnackbarService implements OnDestroy {\n  private readonly snackBarQueue = new BehaviorSubject<SnackBarQueueItem[]>([]);\n  private readonly snackBarQueue$ = this.snackBarQueue.asObservable();\n\n  constructor(private snackBar: MatSnackBar) {\n    let alreadyDismissed = false;\n\n    this.snackBarQueue$.subscribe((e) => {\n      if (!alreadyDismissed && this.snackBar._openedSnackBarRef) {\n        this.snackBar.dismiss();\n      }\n      alreadyDismissed = false;\n\n      const nextIndex = e.length - 1;\n      if (nextIndex >= 0) {\n        const next = e[nextIndex];\n        this.openSnackbar(next);\n        this.snackBar._openedSnackBarRef\n          ?.afterDismissed()\n          .subscribe((close) => {\n            if (close.dismissedByAction) {\n              alreadyDismissed = true;\n              this.dequeueSnackbar();\n            }\n          });\n      }\n    });\n  }\n\n  queueSnackbar(\n    title: string,\n    description = '',\n    configParams: SnackbarConfig = {}\n  ) {\n    this.snackBarQueue.next(\n      this.snackBarQueue.value.concat([{ title, description, configParams }])\n    );\n  }\n\n  dequeueSnackbar() {\n    this.snackBarQueue.value.pop();\n    this.snackBarQueue.next(this.snackBarQueue.value);\n  }\n\n  snackbarIsOpen(): boolean {\n    return Boolean(this.snackBar._openedSnackBarRef);\n  }\n\n  private openSnackbar(item: SnackBarQueueItem) {\n    const config = item.configParams.matSnackbarConfig ?? {};\n    config.data = {\n      title: item.title,\n      description: item.description,\n      action: item.configParams.action,\n      close: () => this.snackBar._openedSnackBarRef?.dismissWithAction(),\n    };\n    config.duration = 5000;\n\n    this.snackBar.openFromComponent(SnackBarComponent, config);\n  }\n\n  ngOnDestroy(): void {\n    this.snackBarQueue.next([]);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}