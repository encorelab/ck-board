{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BoardService {\n  http;\n  constructor(http) {\n    this.http = http;\n  }\n  get(boardID) {\n    return this.http.get('boards/' + boardID).toPromise();\n  }\n  getByProject(projectID) {\n    return this.http.get('boards/projects/' + projectID).toPromise();\n  }\n  getPersonal(projectID) {\n    return this.http.get('boards/personal/' + projectID).toPromise();\n  }\n  getAllPersonal(projectID) {\n    return this.http.get('boards/personal/all/' + projectID).toPromise();\n  }\n  getMultipleBy(ids, filter) {\n    return this.http.post('boards/multiple/', {\n      ids,\n      filter\n    }).toPromise();\n  }\n  update(boardID, board) {\n    return this.http.post('boards/' + boardID, board).toPromise();\n  }\n  create(board) {\n    return this.http.post('boards/', board).toPromise();\n  }\n  remove(id) {\n    return this.http.delete('boards/' + id).toPromise();\n  }\n  copyConfiguration(boardID, boards) {\n    return this.http.post(`boards/${boardID}/copy-configuration/`, {\n      boards\n    }).toPromise();\n  }\n  static ɵfac = function BoardService_Factory(t) {\n    return new (t || BoardService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BoardService,\n    factory: BoardService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,YAAY;EACHC;EAApBC,YAAoBD,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAEvCE,GAAG,CAACC,OAAe;IACjB,OAAO,IAAI,CAACH,IAAI,CAACE,GAAG,CAAQ,SAAS,GAAGC,OAAO,CAAC,CAACC,SAAS,EAAE;EAC9D;EAEAC,YAAY,CAACC,SAAiB;IAC5B,OAAO,IAAI,CAACN,IAAI,CAACE,GAAG,CAAU,kBAAkB,GAAGI,SAAS,CAAC,CAACF,SAAS,EAAE;EAC3E;EAEAG,WAAW,CAACD,SAAiB;IAC3B,OAAO,IAAI,CAACN,IAAI,CAACE,GAAG,CAAQ,kBAAkB,GAAGI,SAAS,CAAC,CAACF,SAAS,EAAE;EACzE;EAEAI,cAAc,CAACF,SAAiB;IAC9B,OAAO,IAAI,CAACN,IAAI,CACbE,GAAG,CAAU,sBAAsB,GAAGI,SAAS,CAAC,CAChDF,SAAS,EAAE;EAChB;EAEAK,aAAa,CAACC,GAAa,EAAEC,MAAuB;IAClD,OAAO,IAAI,CAACX,IAAI,CACbY,IAAI,CAAU,kBAAkB,EAAE;MAAEF,GAAG;MAAEC;IAAM,CAAE,CAAC,CAClDP,SAAS,EAAE;EAChB;EAEAS,MAAM,CAACV,OAAe,EAAEW,KAAqB;IAC3C,OAAO,IAAI,CAACd,IAAI,CAACY,IAAI,CAAQ,SAAS,GAAGT,OAAO,EAAEW,KAAK,CAAC,CAACV,SAAS,EAAE;EACtE;EAEAW,MAAM,CAACD,KAAY;IACjB,OAAO,IAAI,CAACd,IAAI,CAACY,IAAI,CAAQ,SAAS,EAAEE,KAAK,CAAC,CAACV,SAAS,EAAE;EAC5D;EAEAY,MAAM,CAACC,EAAU;IACf,OAAO,IAAI,CAACjB,IAAI,CAACkB,MAAM,CAAQ,SAAS,GAAGD,EAAE,CAAC,CAACb,SAAS,EAAE;EAC5D;EAEAe,iBAAiB,CAAChB,OAAe,EAAEiB,MAAgB;IACjD,OAAO,IAAI,CAACpB,IAAI,CACbY,IAAI,CAAM,UAAUT,OAAO,sBAAsB,EAAE;MAAEiB;IAAM,CAAE,CAAC,CAC9DhB,SAAS,EAAE;EAChB;;qBA3CWL,YAAY;EAAA;;WAAZA,YAAY;IAAAsB,SAAZtB,YAAY;IAAAuB,YAFX;EAAM","names":["BoardService","http","constructor","get","boardID","toPromise","getByProject","projectID","getPersonal","getAllPersonal","getMultipleBy","ids","filter","post","update","board","create","remove","id","delete","copyConfiguration","boards","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/services/board.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Board } from '../models/board';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BoardService {\n  constructor(private http: HttpClient) {}\n\n  get(boardID: string): Promise<Board> {\n    return this.http.get<Board>('boards/' + boardID).toPromise();\n  }\n\n  getByProject(projectID: string): Promise<Board[]> {\n    return this.http.get<Board[]>('boards/projects/' + projectID).toPromise();\n  }\n\n  getPersonal(projectID: string): Promise<Board> {\n    return this.http.get<Board>('boards/personal/' + projectID).toPromise();\n  }\n\n  getAllPersonal(projectID: string): Promise<Board[]> {\n    return this.http\n      .get<Board[]>('boards/personal/all/' + projectID)\n      .toPromise();\n  }\n\n  getMultipleBy(ids: string[], filter?: Partial<Board>): Promise<Board[]> {\n    return this.http\n      .post<Board[]>('boards/multiple/', { ids, filter })\n      .toPromise();\n  }\n\n  update(boardID: string, board: Partial<Board>): Promise<Board> {\n    return this.http.post<Board>('boards/' + boardID, board).toPromise();\n  }\n\n  create(board: Board) {\n    return this.http.post<Board>('boards/', board).toPromise();\n  }\n\n  remove(id: string) {\n    return this.http.delete<Board>('boards/' + id).toPromise();\n  }\n\n  copyConfiguration(boardID: string, boards: string[]) {\n    return this.http\n      .post<any>(`boards/${boardID}/copy-configuration/`, { boards })\n      .toPromise();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}