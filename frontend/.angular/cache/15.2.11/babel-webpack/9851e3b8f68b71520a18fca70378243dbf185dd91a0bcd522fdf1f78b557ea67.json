{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LearnerService {\n  constructor(http) {\n    this.http = http;\n  }\n  getByProjects(projectIDs) {\n    return this.http.post('learner/project/many', {\n      projectIDs\n    }).toPromise();\n  }\n  getByBoards(boardIDs) {\n    return this.http.post('learner/board/many', {\n      boardIDs\n    }).toPromise();\n  }\n  createModel(projectID, boardID, name, dimensions, data) {\n    return this.http.post('learner/', {\n      projectID,\n      boardID,\n      name,\n      dimensions,\n      data\n    }).toPromise();\n  }\n  addDimension(modelID, dimension) {\n    return this.http.post(`learner/${modelID}/addDimension`, {\n      dimension\n    }).toPromise();\n  }\n  removeDimension(modelID, dimension) {\n    return this.http.post(`learner/${modelID}/removeDimension`, {\n      dimension\n    }).toPromise();\n  }\n  updateData(modelID, studentID, assessment, dimensionValues) {\n    return this.http.post(`learner/${modelID}/updateData`, {\n      studentID,\n      assessment,\n      dimensionValues\n    }).toPromise();\n  }\n  updateModel(id, name, dimensions, data) {\n    return this.http.post(`learner/${id}/update`, {\n      name,\n      dimensions,\n      modelData: data\n    }).toPromise();\n  }\n  deleteModel(id) {\n    return this.http.delete(`learner/${id}`).toPromise();\n  }\n}\nLearnerService.ɵfac = function LearnerService_Factory(t) {\n  return new (t || LearnerService)(i0.ɵɵinject(i1.HttpClient));\n};\nLearnerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LearnerService,\n  factory: LearnerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,cAAc;EACzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAEvCC,aAAa,CAACC,UAAoB;IAChC,OAAO,IAAI,CAACF,IAAI,CACbG,IAAI,CAAiB,sBAAsB,EAAE;MAAED;IAAU,CAAE,CAAC,CAC5DE,SAAS,EAAE;EAChB;EAEAC,WAAW,CAACC,QAAkB;IAC5B,OAAO,IAAI,CAACN,IAAI,CACbG,IAAI,CAAiB,oBAAoB,EAAE;MAAEG;IAAQ,CAAE,CAAC,CACxDF,SAAS,EAAE;EAChB;EAEAG,WAAW,CACTC,SAAiB,EACjBC,OAAe,EACfC,IAAY,EACZC,UAAoB,EACpBC,IAAsB;IAEtB,OAAO,IAAI,CAACZ,IAAI,CACbG,IAAI,CAAe,UAAU,EAAE;MAC9BK,SAAS;MACTC,OAAO;MACPC,IAAI;MACJC,UAAU;MACVC;KACD,CAAC,CACDR,SAAS,EAAE;EAChB;EAEAS,YAAY,CAACC,OAAe,EAAEC,SAAiB;IAC7C,OAAO,IAAI,CAACf,IAAI,CACbG,IAAI,CAAe,WAAWW,OAAO,eAAe,EAAE;MAAEC;IAAS,CAAE,CAAC,CACpEX,SAAS,EAAE;EAChB;EAEAY,eAAe,CAACF,OAAe,EAAEC,SAAiB;IAChD,OAAO,IAAI,CAACf,IAAI,CACbG,IAAI,CAAe,WAAWW,OAAO,kBAAkB,EAAE;MAAEC;IAAS,CAAE,CAAC,CACvEX,SAAS,EAAE;EAChB;EAEAa,UAAU,CACRH,OAAe,EACfI,SAAiB,EACjBC,UAAkB,EAClBC,eAAiC;IAEjC,OAAO,IAAI,CAACpB,IAAI,CACbG,IAAI,CAAe,WAAWW,OAAO,aAAa,EAAE;MACnDI,SAAS;MACTC,UAAU;MACVC;KACD,CAAC,CACDhB,SAAS,EAAE;EAChB;EAEAiB,WAAW,CACTC,EAAU,EACVZ,IAAY,EACZC,UAAoB,EACpBC,IAAsB;IAEtB,OAAO,IAAI,CAACZ,IAAI,CACbG,IAAI,CAAe,WAAWmB,EAAE,SAAS,EAAE;MAC1CZ,IAAI;MACJC,UAAU;MACVY,SAAS,EAAEX;KACZ,CAAC,CACDR,SAAS,EAAE;EAChB;EAEAoB,WAAW,CAACF,EAAU;IACpB,OAAO,IAAI,CAACtB,IAAI,CAACyB,MAAM,CAAe,WAAWH,EAAE,EAAE,CAAC,CAAClB,SAAS,EAAE;EACpE;;;mBA7EWN,cAAc;AAAA;;SAAdA,cAAc;EAAA4B,SAAd5B,cAAc;EAAA6B,YAFb;AAAM","names":["LearnerService","constructor","http","getByProjects","projectIDs","post","toPromise","getByBoards","boardIDs","createModel","projectID","boardID","name","dimensions","data","addDimension","modelID","dimension","removeDimension","updateData","studentID","assessment","dimensionValues","updateModel","id","modelData","deleteModel","delete","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/services/learner.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport LearnerModel, { DimensionValue } from '../models/learner';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LearnerService {\n  constructor(private http: HttpClient) {}\n\n  getByProjects(projectIDs: string[]): Promise<LearnerModel[]> {\n    return this.http\n      .post<LearnerModel[]>('learner/project/many', { projectIDs })\n      .toPromise();\n  }\n\n  getByBoards(boardIDs: string[]): Promise<LearnerModel[]> {\n    return this.http\n      .post<LearnerModel[]>('learner/board/many', { boardIDs })\n      .toPromise();\n  }\n\n  createModel(\n    projectID: string,\n    boardID: string,\n    name: string,\n    dimensions: string[],\n    data: DimensionValue[]\n  ): Promise<LearnerModel> {\n    return this.http\n      .post<LearnerModel>('learner/', {\n        projectID,\n        boardID,\n        name,\n        dimensions,\n        data,\n      })\n      .toPromise();\n  }\n\n  addDimension(modelID: string, dimension: string): Promise<LearnerModel> {\n    return this.http\n      .post<LearnerModel>(`learner/${modelID}/addDimension`, { dimension })\n      .toPromise();\n  }\n\n  removeDimension(modelID: string, dimension: string): Promise<LearnerModel> {\n    return this.http\n      .post<LearnerModel>(`learner/${modelID}/removeDimension`, { dimension })\n      .toPromise();\n  }\n\n  updateData(\n    modelID: string,\n    studentID: string,\n    assessment: string,\n    dimensionValues: DimensionValue[]\n  ): Promise<LearnerModel> {\n    return this.http\n      .post<LearnerModel>(`learner/${modelID}/updateData`, {\n        studentID,\n        assessment,\n        dimensionValues,\n      })\n      .toPromise();\n  }\n\n  updateModel(\n    id: string,\n    name: string,\n    dimensions: string[],\n    data: DimensionValue[]\n  ): Promise<LearnerModel> {\n    return this.http\n      .post<LearnerModel>(`learner/${id}/update`, {\n        name,\n        dimensions,\n        modelData: data,\n      })\n      .toPromise();\n  }\n\n  deleteModel(id: string): Promise<LearnerModel> {\n    return this.http.delete<LearnerModel>(`learner/${id}`).toPromise();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}