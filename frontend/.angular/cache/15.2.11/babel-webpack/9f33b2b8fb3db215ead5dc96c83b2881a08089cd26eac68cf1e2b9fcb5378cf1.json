{"ast":null,"code":"import { SocketEvent } from '../utils/constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./socket.service\";\nexport class BucketService {\n  http;\n  socketService;\n  constructor(http, socketService) {\n    this.http = http;\n    this.socketService = socketService;\n  }\n  get(bucketID) {\n    return this.http.get('buckets/' + bucketID).toPromise();\n  }\n  getAllByBoard(boardID) {\n    return this.http.get('buckets/board/' + boardID).toPromise();\n  }\n  create(bucket) {\n    return this.http.post('buckets/', bucket).toPromise();\n  }\n  add(bucketID, ...posts) {\n    this.socketService.emit(SocketEvent.BUCKET_ADD_POST, {\n      bucketID,\n      posts\n    });\n    return this.http.post('buckets/' + bucketID + '/add', {\n      posts\n    }).toPromise();\n  }\n  remove(bucketID, ...posts) {\n    this.socketService.emit(SocketEvent.BUCKET_REMOVE_POST, {\n      bucketID,\n      posts\n    });\n    return this.http.post('buckets/' + bucketID + '/remove', {\n      posts\n    }).toPromise();\n  }\n  update(bucketID, bucket) {\n    return this.http.post('buckets/' + bucketID, bucket).toPromise();\n  }\n  delete(bucketID) {\n    return this.http.delete('buckets/' + bucketID).toPromise();\n  }\n  static ɵfac = function BucketService_Factory(t) {\n    return new (t || BucketService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SocketService));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BucketService,\n    factory: BucketService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAGA,SAASA,WAAW,QAAQ,oBAAoB;;;;AAMhD,OAAM,MAAOC,aAAa;EACJC;EAA0BC;EAA9CC,YAAoBF,IAAgB,EAAUC,aAA4B;IAAtD,SAAI,GAAJD,IAAI;IAAsB,kBAAa,GAAbC,aAAa;EAAkB;EAE7EE,GAAG,CAACC,QAAgB;IAClB,OAAO,IAAI,CAACJ,IAAI,CAACG,GAAG,CAAM,UAAU,GAAGC,QAAQ,CAAC,CAACC,SAAS,EAAE;EAC9D;EAEAC,aAAa,CAACC,OAAe;IAC3B,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAQ,gBAAgB,GAAGI,OAAO,CAAC,CAACF,SAAS,EAAE;EACrE;EAEAG,MAAM,CAACC,MAAc;IACnB,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAS,UAAU,EAAED,MAAM,CAAC,CAACJ,SAAS,EAAE;EAC/D;EAEAM,GAAG,CAACP,QAAgB,EAAE,GAAGQ,KAAe;IACtC,IAAI,CAACX,aAAa,CAACY,IAAI,CAACf,WAAW,CAACgB,eAAe,EAAE;MAAEV,QAAQ;MAAEQ;IAAK,CAAE,CAAC;IACzE,OAAO,IAAI,CAACZ,IAAI,CACbU,IAAI,CAAS,UAAU,GAAGN,QAAQ,GAAG,MAAM,EAAE;MAAEQ;IAAK,CAAE,CAAC,CACvDP,SAAS,EAAE;EAChB;EAEAU,MAAM,CAACX,QAAgB,EAAE,GAAGQ,KAAe;IACzC,IAAI,CAACX,aAAa,CAACY,IAAI,CAACf,WAAW,CAACkB,kBAAkB,EAAE;MACtDZ,QAAQ;MACRQ;KACD,CAAC;IACF,OAAO,IAAI,CAACZ,IAAI,CACbU,IAAI,CAAS,UAAU,GAAGN,QAAQ,GAAG,SAAS,EAAE;MAAEQ;IAAK,CAAE,CAAC,CAC1DP,SAAS,EAAE;EAChB;EAEAY,MAAM,CAACb,QAAgB,EAAEK,MAAuB;IAC9C,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAS,UAAU,GAAGN,QAAQ,EAAEK,MAAM,CAAC,CAACJ,SAAS,EAAE;EAC1E;EAEAa,MAAM,CAACd,QAAgB;IACrB,OAAO,IAAI,CAACJ,IAAI,CAACkB,MAAM,CAAS,UAAU,GAAGd,QAAQ,CAAC,CAACC,SAAS,EAAE;EACpE;;qBAtCWN,aAAa;EAAA;;WAAbA,aAAa;IAAAoB,SAAbpB,aAAa;IAAAqB,YAFZ;EAAM","names":["SocketEvent","BucketService","http","socketService","constructor","get","bucketID","toPromise","getAllByBoard","boardID","create","bucket","post","add","posts","emit","BUCKET_ADD_POST","remove","BUCKET_REMOVE_POST","update","delete","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/services/bucket.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport Bucket from '../models/bucket';\nimport { SocketEvent } from '../utils/constants';\nimport { SocketService } from './socket.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BucketService {\n  constructor(private http: HttpClient, private socketService: SocketService) {}\n\n  get(bucketID: string): Promise<any> {\n    return this.http.get<any>('buckets/' + bucketID).toPromise();\n  }\n\n  getAllByBoard(boardID: string): Promise<any[]> {\n    return this.http.get<any[]>('buckets/board/' + boardID).toPromise();\n  }\n\n  create(bucket: Bucket): Promise<Bucket> {\n    return this.http.post<Bucket>('buckets/', bucket).toPromise();\n  }\n\n  add(bucketID: string, ...posts: string[]): Promise<Bucket> {\n    this.socketService.emit(SocketEvent.BUCKET_ADD_POST, { bucketID, posts });\n    return this.http\n      .post<Bucket>('buckets/' + bucketID + '/add', { posts })\n      .toPromise();\n  }\n\n  remove(bucketID: string, ...posts: string[]): Promise<Bucket> {\n    this.socketService.emit(SocketEvent.BUCKET_REMOVE_POST, {\n      bucketID,\n      posts,\n    });\n    return this.http\n      .post<Bucket>('buckets/' + bucketID + '/remove', { posts })\n      .toPromise();\n  }\n\n  update(bucketID: string, bucket: Partial<Bucket>) {\n    return this.http.post<Bucket>('buckets/' + bucketID, bucket).toPromise();\n  }\n\n  delete(bucketID: string): Promise<Bucket> {\n    return this.http.delete<Bucket>('buckets/' + bucketID).toPromise();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}