{"ast":null,"code":"import { NotificationType } from '../models/notification';\nimport { generateUniqueID } from '../utils/Utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user.service\";\nimport * as i3 from \"./project.service\";\nexport class NotificationService {\n  http;\n  userService;\n  projectService;\n  constructor(http, userService, projectService) {\n    this.http = http;\n    this.userService = userService;\n    this.projectService = projectService;\n  }\n  getByUserAndBoard(userID, boardID) {\n    return this.http.get('notifications/user/' + userID + '/board/' + boardID).toPromise();\n  }\n  getByUserAndProject(userID, projectID) {\n    return this.http.get('notifications/user/' + userID + '/project/' + projectID).toPromise();\n  }\n  add(type, notification) {\n    return this.http.post('notifications/', {\n      type: type,\n      notification: notification\n    }).toPromise();\n  }\n  markAsRead(type, notificationID) {\n    return this.http.post('notifications/' + notificationID, {\n      type: type,\n      viewed: true\n    }).toPromise();\n  }\n  remove(type, notificationID) {\n    if (type === NotificationType.BOARD) {\n      return this.http.delete('notifications/board/' + notificationID).toPromise();\n    } else {\n      return this.http.delete('notifications/project/' + notificationID).toPromise();\n    }\n  }\n  buildUpvoteNotification(post) {\n    return {\n      notificationID: generateUniqueID(),\n      text: this.userService.user?.username + ' upvoted \"' + post.title + '\"',\n      type: NotificationType.BOARD,\n      viewed: false,\n      userID: post.userID,\n      postID: post.postID,\n      boardID: post.boardID\n    };\n  }\n  buildCommentNotification(post) {\n    return {\n      notificationID: generateUniqueID(),\n      text: this.userService.user?.username + ' commented on \"' + post.title + '\"',\n      type: NotificationType.BOARD,\n      viewed: false,\n      userID: post.userID,\n      postID: post.postID,\n      boardID: post.boardID\n    };\n  }\n  buildTagNotification(post) {\n    return {\n      notificationID: generateUniqueID(),\n      text: this.userService.user?.username + ' tagged \"' + post.title + '\"',\n      type: NotificationType.BOARD,\n      viewed: false,\n      userID: post.userID,\n      postID: post.postID,\n      boardID: post.boardID\n    };\n  }\n  buildTodoItemNotification(todoItem, project, overdue) {\n    const notificationID = generateUniqueID();\n    let text;\n    if (overdue) {\n      text = `Todo Item: ${todoItem.title} for Project: ${project.name} overdue`;\n    } else {\n      text = `Pending Todo Item: ${todoItem.title} for Project: ${project.name}`;\n    }\n    return {\n      notificationID: notificationID,\n      text: text,\n      viewed: false,\n      type: NotificationType.PROJECT,\n      userID: todoItem.userID,\n      projectID: todoItem.projectID\n    };\n  }\n  static ɵfac = function NotificationService_Factory(t) {\n    return new (t || NotificationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i3.ProjectService));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotificationService,\n    factory: NotificationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["NotificationType","generateUniqueID","NotificationService","http","userService","projectService","constructor","getByUserAndBoard","userID","boardID","get","toPromise","getByUserAndProject","projectID","add","type","notification","post","markAsRead","notificationID","viewed","remove","BOARD","delete","buildUpvoteNotification","text","user","username","title","postID","buildCommentNotification","buildTagNotification","buildTodoItemNotification","todoItem","project","overdue","name","PROJECT","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/services/notification.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  NotificationType,\n  BoardNotification,\n  ProjectNotification,\n} from '../models/notification';\nimport Post from '../models/post';\nimport { Project } from '../models/project';\nimport { TodoItem } from '../models/todoItem';\nimport { generateUniqueID } from '../utils/Utils';\nimport { UserService } from './user.service';\nimport { ProjectService } from './project.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationService {\n  constructor(\n    public http: HttpClient,\n    public userService: UserService,\n    public projectService: ProjectService\n  ) {}\n\n  getByUserAndBoard(\n    userID: string,\n    boardID: string\n  ): Promise<BoardNotification[]> {\n    return this.http\n      .get<BoardNotification[]>(\n        'notifications/user/' + userID + '/board/' + boardID\n      )\n      .toPromise();\n  }\n\n  getByUserAndProject(\n    userID: string,\n    projectID: string\n  ): Promise<ProjectNotification[]> {\n    return this.http\n      .get<ProjectNotification[]>(\n        'notifications/user/' + userID + '/project/' + projectID\n      )\n      .toPromise();\n  }\n\n  add(\n    type: NotificationType,\n    notification: ProjectNotification | BoardNotification\n  ): Promise<ProjectNotification | BoardNotification> {\n    return this.http\n      .post<ProjectNotification | BoardNotification>('notifications/', {\n        type: type,\n        notification: notification,\n      })\n      .toPromise();\n  }\n\n  markAsRead(\n    type: NotificationType,\n    notificationID: string\n  ): Promise<ProjectNotification | BoardNotification> {\n    return this.http\n      .post<ProjectNotification | BoardNotification>(\n        'notifications/' + notificationID,\n        { type: type, viewed: true }\n      )\n      .toPromise();\n  }\n\n  remove(\n    type: NotificationType,\n    notificationID: string\n  ): Promise<ProjectNotification | BoardNotification> {\n    if (type === NotificationType.BOARD) {\n      return this.http\n        .delete<BoardNotification>('notifications/board/' + notificationID)\n        .toPromise();\n    } else {\n      return this.http\n        .delete<ProjectNotification>('notifications/project/' + notificationID)\n        .toPromise();\n    }\n  }\n\n  buildUpvoteNotification(post: Post): BoardNotification {\n    return {\n      notificationID: generateUniqueID(),\n      text: this.userService.user?.username + ' upvoted \"' + post.title + '\"',\n      type: NotificationType.BOARD,\n      viewed: false,\n      userID: post.userID,\n      postID: post.postID,\n      boardID: post.boardID,\n    };\n  }\n\n  buildCommentNotification(post: Post): BoardNotification {\n    return {\n      notificationID: generateUniqueID(),\n      text:\n        this.userService.user?.username + ' commented on \"' + post.title + '\"',\n      type: NotificationType.BOARD,\n      viewed: false,\n      userID: post.userID,\n      postID: post.postID,\n      boardID: post.boardID,\n    };\n  }\n\n  buildTagNotification(post: Post): BoardNotification {\n    return {\n      notificationID: generateUniqueID(),\n      text: this.userService.user?.username + ' tagged \"' + post.title + '\"',\n      type: NotificationType.BOARD,\n      viewed: false,\n      userID: post.userID,\n      postID: post.postID,\n      boardID: post.boardID,\n    };\n  }\n\n  buildTodoItemNotification(\n    todoItem: TodoItem,\n    project: Project,\n    overdue: boolean\n  ): ProjectNotification {\n    const notificationID = generateUniqueID();\n    let text: string;\n    if (overdue) {\n      text = `Todo Item: ${todoItem.title} for Project: ${project.name} overdue`;\n    } else {\n      text = `Pending Todo Item: ${todoItem.title} for Project: ${project.name}`;\n    }\n    return {\n      notificationID: notificationID,\n      text: text,\n      viewed: false,\n      type: NotificationType.PROJECT,\n      userID: todoItem.userID,\n      projectID: todoItem.projectID,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}