{"ast":null,"code":"import { DialogModule } from '@angular/cdk/dialog';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/cdk/portal';\nimport { PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, InjectionToken, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/a11y';\nimport { MatDialogConfig, _defaultParams, _MatDialogContainerBase, matDialogAnimations, MatDialogRef, _MatDialogBase, _closeDialogVia } from '@angular/material/dialog';\nexport { MAT_DIALOG_SCROLL_STRATEGY_FACTORY as MAT_LEGACY_DIALOG_SCROLL_STRATEGY_FACTORY, _MatDialogBase as _MatLegacyDialogBase, _MatDialogContainerBase as _MatLegacyDialogContainerBase, _closeDialogVia as _closeLegacyDialogVia, matDialogAnimations as matLegacyDialogAnimations } from '@angular/material/dialog';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n * @deprecated Use `defaultParams` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nfunction MatLegacyDialogContainer_ng_template_0_Template(rf, ctx) {}\nconst defaultParams = {\n  params: {\n    enterAnimationDuration: '150ms',\n    exitAnimationDuration: '75ms'\n  }\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Use `MatDialogConfig` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogConfig extends MatDialogConfig {\n  constructor() {\n    super(...arguments);\n    /** Duration of the enter animation. Has to be a valid CSS value (e.g. 100ms). */\n    this.enterAnimationDuration = _defaultParams.params.enterAnimationDuration;\n    /** Duration of the exit animation. Has to be a valid CSS value (e.g. 50ms). */\n    this.exitAnimationDuration = _defaultParams.params.exitAnimationDuration;\n  }\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n * @deprecated Use `MatDialogContainer` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogContainer extends _MatDialogContainerBase {\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone({\n    toState,\n    totalTime\n  }) {\n    if (toState === 'enter') {\n      this._openAnimationDone(totalTime);\n    } else if (toState === 'exit') {\n      this._animationStateChanged.next({\n        state: 'closed',\n        totalTime\n      });\n    }\n  }\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart({\n    toState,\n    totalTime\n  }) {\n    if (toState === 'enter') {\n      this._animationStateChanged.next({\n        state: 'opening',\n        totalTime\n      });\n    } else if (toState === 'exit' || toState === 'void') {\n      this._animationStateChanged.next({\n        state: 'closing',\n        totalTime\n      });\n    }\n  }\n  /** Starts the dialog exit animation. */\n  _startExitAnimation() {\n    this._state = 'exit';\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  constructor(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, _changeDetectorRef, focusMonitor) {\n    super(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, focusMonitor);\n    this._changeDetectorRef = _changeDetectorRef;\n    /** State of the dialog animation. */\n    this._state = 'enter';\n  }\n  _getAnimationState() {\n    return {\n      value: this._state,\n      params: {\n        'enterAnimationDuration': this._config.enterAnimationDuration || defaultParams.params.enterAnimationDuration,\n        'exitAnimationDuration': this._config.exitAnimationDuration || defaultParams.params.exitAnimationDuration\n      }\n    };\n  }\n}\nMatLegacyDialogContainer.ɵfac = function MatLegacyDialogContainer_Factory(t) {\n  return new (t || MatLegacyDialogContainer)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MatLegacyDialogConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$1.OverlayRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n};\nMatLegacyDialogContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatLegacyDialogContainer,\n  selectors: [[\"mat-dialog-container\"]],\n  hostAttrs: [\"tabindex\", \"-1\", 1, \"mat-dialog-container\"],\n  hostVars: 7,\n  hostBindings: function MatLegacyDialogContainer_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatLegacyDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n        return ctx._onAnimationStart($event);\n      })(\"@dialogContainer.done\", function MatLegacyDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n        return ctx._onAnimationDone($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx._config.id);\n      i0.ɵɵattribute(\"aria-modal\", ctx._config.ariaModal)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n      i0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._getAnimationState());\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkPortalOutlet\", \"\"]],\n  template: function MatLegacyDialogContainer_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, MatLegacyDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    }\n  },\n  dependencies: [i4.CdkPortalOutlet],\n  styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions.mat-dialog-actions-align-center,.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions.mat-dialog-actions-align-end,.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matDialogAnimations.dialogContainer]\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'mat-dialog-container',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      animations: [matDialogAnimations.dialogContainer],\n      host: {\n        'class': 'mat-dialog-container',\n        'tabindex': '-1',\n        '[attr.aria-modal]': '_config.ariaModal',\n        '[id]': '_config.id',\n        '[attr.role]': '_config.role',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n        '[@dialogContainer]': `_getAnimationState()`,\n        '(@dialogContainer.start)': '_onAnimationStart($event)',\n        '(@dialogContainer.done)': '_onAnimationDone($event)'\n      },\n      template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n      styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions.mat-dialog-actions-align-center,.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions.mat-dialog-actions-align-end,.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MatLegacyDialogConfig\n    }, {\n      type: i1.InteractivityChecker\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1$1.OverlayRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.FocusMonitor\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @deprecated Use `MatDialogRef` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogRef extends MatDialogRef {}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to access the data that was passed in to a dialog.\n * @deprecated Use `MAT_DIALOG_DATA` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_DIALOG_DATA = new InjectionToken('MatDialogData');\n/**\n * Injection token that can be used to specify default dialog options.\n * @deprecated Use `MAT_DIALOG_DEFAULT_OPTIONS` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n * @deprecated Use `MAT_DIALOG_SCROLL_STRATEGY` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * @docs-private\n * @deprecated Use `MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nfunction MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated Use `MAT_DIALOG_SCROLL_STRATEGY_PROVIDER` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_LEGACY_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Service to open Material Design modal dialogs.\n * @deprecated Use `MatDialog` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialog extends _MatDialogBase {\n  constructor(overlay, injector,\n  /**\n   * @deprecated `_location` parameter to be removed.\n   * @breaking-change 10.0.0\n   */\n  _location, defaultOptions, scrollStrategy, parentDialog,\n  /**\n   * @deprecated No longer used. To be removed.\n   * @breaking-change 15.0.0\n   */\n  overlayContainer,\n  /**\n   * @deprecated No longer used. To be removed.\n   * @breaking-change 14.0.0\n   */\n  animationMode) {\n    super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatLegacyDialogRef, MatLegacyDialogContainer, MAT_LEGACY_DIALOG_DATA, animationMode);\n    this.dialogConfigClass = MatLegacyDialogConfig;\n  }\n}\nMatLegacyDialog.ɵfac = function MatLegacyDialog_Factory(t) {\n  return new (t || MatLegacyDialog)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.Location, 8), i0.ɵɵinject(MAT_LEGACY_DIALOG_DEFAULT_OPTIONS, 8), i0.ɵɵinject(MAT_LEGACY_DIALOG_SCROLL_STRATEGY), i0.ɵɵinject(MatLegacyDialog, 12), i0.ɵɵinject(i1$1.OverlayContainer), i0.ɵɵinject(ANIMATION_MODULE_TYPE, 8));\n};\nMatLegacyDialog.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MatLegacyDialog,\n  factory: MatLegacyDialog.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyDialog, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.Injector\n    }, {\n      type: i2.Location,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: MatLegacyDialogConfig,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_LEGACY_DIALOG_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_LEGACY_DIALOG_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: MatLegacyDialog,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: i1$1.OverlayContainer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n * @deprecated Use `MatDialogClose` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogClose {\n  constructor(\n  /**\n   * Reference to the containing dialog.\n   * @deprecated `dialogRef` property to become private.\n   * @breaking-change 13.0.0\n   */\n  // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  dialogRef, _elementRef, _dialog) {\n    this.dialogRef = dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /** Default to \"button\" to prevents accidental form submits. */\n    this.type = 'button';\n  }\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n  }\n  ngOnChanges(changes) {\n    const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n  _onButtonClick(event) {\n    // Determinate the focus origin using the click event, because using the FocusMonitor will\n    // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n    // dialog, and therefore clicking the button won't result in a focus change. This means that\n    // the FocusMonitor won't detect any origin change, and will always output `program`.\n    _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n  }\n}\nMatLegacyDialogClose.ɵfac = function MatLegacyDialogClose_Factory(t) {\n  return new (t || MatLegacyDialogClose)(i0.ɵɵdirectiveInject(MatLegacyDialogRef, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatLegacyDialog));\n};\nMatLegacyDialogClose.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyDialogClose,\n  selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]],\n  hostVars: 2,\n  hostBindings: function MatLegacyDialogClose_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatLegacyDialogClose_click_HostBindingHandler($event) {\n        return ctx._onButtonClick($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    }\n  },\n  inputs: {\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    type: \"type\",\n    dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n    _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n  },\n  exportAs: [\"matDialogClose\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyDialogClose, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-close], [matDialogClose]',\n      exportAs: 'matDialogClose',\n      host: {\n        '(click)': '_onButtonClick($event)',\n        '[attr.aria-label]': 'ariaLabel || null',\n        '[attr.type]': 'type'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatLegacyDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: MatLegacyDialog\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    type: [{\n      type: Input\n    }],\n    dialogResult: [{\n      type: Input,\n      args: ['mat-dialog-close']\n    }],\n    _matDialogClose: [{\n      type: Input,\n      args: ['matDialogClose']\n    }]\n  });\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n * @deprecated Use `MatDialogTitle` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogTitle {\n  constructor(\n  // The dialog title directive is always used in combination with a `MatDialogRef`.\n  // tslint:disable-next-line: lightweight-tokens\n  _dialogRef, _elementRef, _dialog) {\n    this._dialogRef = _dialogRef;\n    this._elementRef = _elementRef;\n    this._dialog = _dialog;\n    /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n    this.id = `mat-dialog-title-${dialogElementUid++}`;\n  }\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n    }\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\nMatLegacyDialogTitle.ɵfac = function MatLegacyDialogTitle_Factory(t) {\n  return new (t || MatLegacyDialogTitle)(i0.ɵɵdirectiveInject(MatLegacyDialogRef, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatLegacyDialog));\n};\nMatLegacyDialogTitle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyDialogTitle,\n  selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-title\"],\n  hostVars: 1,\n  hostBindings: function MatLegacyDialogTitle_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n    }\n  },\n  inputs: {\n    id: \"id\"\n  },\n  exportAs: [\"matDialogTitle\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyDialogTitle, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-dialog-title], [matDialogTitle]',\n      exportAs: 'matDialogTitle',\n      host: {\n        'class': 'mat-dialog-title',\n        '[id]': 'id'\n      }\n    }]\n  }], function () {\n    return [{\n      type: MatLegacyDialogRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: MatLegacyDialog\n    }];\n  }, {\n    id: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Scrollable content container of a dialog.\n * @deprecated Use `MatDialogContent` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogContent {}\nMatLegacyDialogContent.ɵfac = function MatLegacyDialogContent_Factory(t) {\n  return new (t || MatLegacyDialogContent)();\n};\nMatLegacyDialogContent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyDialogContent,\n  selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-content\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyDialogContent, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n      host: {\n        'class': 'mat-dialog-content'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n * @deprecated Use `MatDialogActions` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogActions {\n  constructor() {\n    /**\n     * Horizontal alignment of action buttons.\n     */\n    this.align = 'start';\n  }\n}\nMatLegacyDialogActions.ɵfac = function MatLegacyDialogActions_Factory(t) {\n  return new (t || MatLegacyDialogActions)();\n};\nMatLegacyDialogActions.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyDialogActions,\n  selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n  hostAttrs: [1, \"mat-dialog-actions\"],\n  hostVars: 4,\n  hostBindings: function MatLegacyDialogActions_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-dialog-actions-align-center\", ctx.align === \"center\")(\"mat-dialog-actions-align-end\", ctx.align === \"end\");\n    }\n  },\n  inputs: {\n    align: \"align\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyDialogActions, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n      host: {\n        'class': 'mat-dialog-actions',\n        '[class.mat-dialog-actions-align-center]': 'align === \"center\"',\n        '[class.mat-dialog-actions-align-end]': 'align === \"end\"'\n      }\n    }]\n  }], null, {\n    align: [{\n      type: Input\n    }]\n  });\n})();\n// TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n  let parent = element.nativeElement.parentElement;\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n  return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Use `MatDialogModule` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogModule {}\nMatLegacyDialogModule.ɵfac = function MatLegacyDialogModule_Factory(t) {\n  return new (t || MatLegacyDialogModule)();\n};\nMatLegacyDialogModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatLegacyDialogModule\n});\nMatLegacyDialogModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MatLegacyDialog, MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER],\n  imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyDialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule],\n      exports: [MatLegacyDialogContainer, MatLegacyDialogClose, MatLegacyDialogTitle, MatLegacyDialogContent, MatLegacyDialogActions, MatCommonModule],\n      declarations: [MatLegacyDialogContainer, MatLegacyDialogClose, MatLegacyDialogTitle, MatLegacyDialogActions, MatLegacyDialogContent],\n      providers: [MatLegacyDialog, MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_LEGACY_DIALOG_DATA, MAT_LEGACY_DIALOG_DEFAULT_OPTIONS, MAT_LEGACY_DIALOG_SCROLL_STRATEGY, MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatLegacyDialog, MatLegacyDialogActions, MatLegacyDialogClose, MatLegacyDialogConfig, MatLegacyDialogContainer, MatLegacyDialogContent, MatLegacyDialogModule, MatLegacyDialogRef, MatLegacyDialogTitle };","map":{"version":3,"names":["DialogModule","i1$1","Overlay","OverlayModule","i4","PortalModule","i0","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","Inject","InjectionToken","Injectable","SkipSelf","Directive","Input","NgModule","MatCommonModule","i2","DOCUMENT","i1","MatDialogConfig","_defaultParams","_MatDialogContainerBase","matDialogAnimations","MatDialogRef","_MatDialogBase","_closeDialogVia","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","MAT_LEGACY_DIALOG_SCROLL_STRATEGY_FACTORY","_MatLegacyDialogBase","_MatLegacyDialogContainerBase","_closeLegacyDialogVia","matLegacyDialogAnimations","ANIMATION_MODULE_TYPE","defaultParams","params","enterAnimationDuration","exitAnimationDuration","MatLegacyDialogConfig","constructor","arguments","MatLegacyDialogContainer","_onAnimationDone","toState","totalTime","_openAnimationDone","_animationStateChanged","next","state","_onAnimationStart","_startExitAnimation","_state","_changeDetectorRef","markForCheck","elementRef","focusTrapFactory","document","dialogConfig","checker","ngZone","overlayRef","focusMonitor","_getAnimationState","value","_config","ɵfac","ElementRef","FocusTrapFactory","InteractivityChecker","NgZone","OverlayRef","ChangeDetectorRef","FocusMonitor","ɵcmp","CdkPortalOutlet","dialogContainer","type","args","selector","encapsulation","None","changeDetection","Default","animations","host","template","styles","undefined","decorators","MatLegacyDialogRef","MAT_LEGACY_DIALOG_DATA","MAT_LEGACY_DIALOG_DEFAULT_OPTIONS","MAT_LEGACY_DIALOG_SCROLL_STRATEGY","MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","block","MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatLegacyDialog","injector","_location","defaultOptions","scrollStrategy","parentDialog","overlayContainer","animationMode","dialogConfigClass","Injector","Location","OverlayContainer","ɵprov","dialogElementUid","MatLegacyDialogClose","dialogRef","_elementRef","_dialog","ngOnInit","getClosestDialog","openDialogs","ngOnChanges","changes","proxiedChange","dialogResult","currentValue","_onButtonClick","event","screenX","screenY","ɵdir","exportAs","ariaLabel","_matDialogClose","MatLegacyDialogTitle","_dialogRef","id","Promise","resolve","then","container","_containerInstance","_ariaLabelledBy","MatLegacyDialogContent","MatLegacyDialogActions","align","element","parent","nativeElement","parentElement","classList","contains","find","dialog","MatLegacyDialogModule","ɵmod","ɵinj","imports","exports","declarations","providers"],"sources":["/Users/marieklinaeva/github/ck-board/frontend/node_modules/@angular/material/fesm2020/legacy-dialog.mjs"],"sourcesContent":["import { DialogModule } from '@angular/cdk/dialog';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/cdk/portal';\nimport { PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, InjectionToken, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/a11y';\nimport { MatDialogConfig, _defaultParams, _MatDialogContainerBase, matDialogAnimations, MatDialogRef, _MatDialogBase, _closeDialogVia } from '@angular/material/dialog';\nexport { MAT_DIALOG_SCROLL_STRATEGY_FACTORY as MAT_LEGACY_DIALOG_SCROLL_STRATEGY_FACTORY, _MatDialogBase as _MatLegacyDialogBase, _MatDialogContainerBase as _MatLegacyDialogContainerBase, _closeDialogVia as _closeLegacyDialogVia, matDialogAnimations as matLegacyDialogAnimations } from '@angular/material/dialog';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n * @deprecated Use `defaultParams` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst defaultParams = {\n    params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' },\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Use `MatDialogConfig` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogConfig extends MatDialogConfig {\n    constructor() {\n        super(...arguments);\n        /** Duration of the enter animation. Has to be a valid CSS value (e.g. 100ms). */\n        this.enterAnimationDuration = _defaultParams.params.enterAnimationDuration;\n        /** Duration of the exit animation. Has to be a valid CSS value (e.g. 50ms). */\n        this.exitAnimationDuration = _defaultParams.params.exitAnimationDuration;\n    }\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n * @deprecated Use `MatDialogContainer` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogContainer extends _MatDialogContainerBase {\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._openAnimationDone(totalTime);\n        }\n        else if (toState === 'exit') {\n            this._animationStateChanged.next({ state: 'closed', totalTime });\n        }\n    }\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart({ toState, totalTime }) {\n        if (toState === 'enter') {\n            this._animationStateChanged.next({ state: 'opening', totalTime });\n        }\n        else if (toState === 'exit' || toState === 'void') {\n            this._animationStateChanged.next({ state: 'closing', totalTime });\n        }\n    }\n    /** Starts the dialog exit animation. */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n    constructor(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, _changeDetectorRef, focusMonitor) {\n        super(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, focusMonitor);\n        this._changeDetectorRef = _changeDetectorRef;\n        /** State of the dialog animation. */\n        this._state = 'enter';\n    }\n    _getAnimationState() {\n        return {\n            value: this._state,\n            params: {\n                'enterAnimationDuration': this._config.enterAnimationDuration || defaultParams.params.enterAnimationDuration,\n                'exitAnimationDuration': this._config.exitAnimationDuration || defaultParams.params.exitAnimationDuration,\n            },\n        };\n    }\n}\nMatLegacyDialogContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: MatLegacyDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component });\nMatLegacyDialogContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyDialogContainer, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, listeners: { \"@dialogContainer.start\": \"_onAnimationStart($event)\", \"@dialogContainer.done\": \"_onAnimationDone($event)\" }, properties: { \"attr.aria-modal\": \"_config.ariaModal\", \"id\": \"_config.id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledBy\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"@dialogContainer\": \"_getAnimationState()\" }, classAttribute: \"mat-dialog-container\" }, usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions.mat-dialog-actions-align-center,.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions.mat-dialog-actions-align-end,.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"], dependencies: [{ kind: \"directive\", type: i4.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matDialogAnimations.dialogContainer], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, animations: [matDialogAnimations.dialogContainer], host: {\n                        'class': 'mat-dialog-container',\n                        'tabindex': '-1',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[id]': '_config.id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[@dialogContainer]': `_getAnimationState()`,\n                        '(@dialogContainer.start)': '_onAnimationStart($event)',\n                        '(@dialogContainer.done)': '_onAnimationDone($event)',\n                    }, template: \"<ng-template cdkPortalOutlet></ng-template>\\n\", styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions.mat-dialog-actions-align-center,.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions.mat-dialog-actions-align-end,.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MatLegacyDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @deprecated Use `MatDialogRef` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogRef extends MatDialogRef {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to access the data that was passed in to a dialog.\n * @deprecated Use `MAT_DIALOG_DATA` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_DIALOG_DATA = new InjectionToken('MatDialogData');\n/**\n * Injection token that can be used to specify default dialog options.\n * @deprecated Use `MAT_DIALOG_DEFAULT_OPTIONS` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n * @deprecated Use `MAT_DIALOG_SCROLL_STRATEGY` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * @docs-private\n * @deprecated Use `MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nfunction MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated Use `MAT_DIALOG_SCROLL_STRATEGY_PROVIDER` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nconst MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_LEGACY_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n * @deprecated Use `MatDialog` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialog extends _MatDialogBase {\n    constructor(overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    _location, defaultOptions, scrollStrategy, parentDialog, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 15.0.0\n     */\n    overlayContainer, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    animationMode) {\n        super(overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatLegacyDialogRef, MatLegacyDialogContainer, MAT_LEGACY_DIALOG_DATA, animationMode);\n        this.dialogConfigClass = MatLegacyDialogConfig;\n    }\n}\nMatLegacyDialog.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyDialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: i2.Location, optional: true }, { token: MAT_LEGACY_DIALOG_DEFAULT_OPTIONS, optional: true }, { token: MAT_LEGACY_DIALOG_SCROLL_STRATEGY }, { token: MatLegacyDialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nMatLegacyDialog.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyDialog });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyDialog, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: i2.Location, decorators: [{\n                    type: Optional\n                }] }, { type: MatLegacyDialogConfig, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_LEGACY_DIALOG_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_LEGACY_DIALOG_SCROLL_STRATEGY]\n                }] }, { type: MatLegacyDialog, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n * @deprecated Use `MatDialogClose` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogClose {\n    constructor(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n}\nMatLegacyDialogClose.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyDialogClose, deps: [{ token: MatLegacyDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatLegacyDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyDialogClose.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyDialogClose, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: MatLegacyDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatLegacyDialog }]; }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n * @deprecated Use `MatDialogTitle` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogTitle {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatLegacyDialogTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyDialogTitle, deps: [{ token: MatLegacyDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatLegacyDialog }], target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyDialogTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyDialogTitle, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-dialog-title\" }, exportAs: [\"matDialogTitle\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    host: {\n                        'class': 'mat-dialog-title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: MatLegacyDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatLegacyDialog }]; }, propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n * @deprecated Use `MatDialogContent` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogContent {\n}\nMatLegacyDialogContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyDialogContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyDialogContent, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-dialog-content\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-dialog-content' },\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n * @deprecated Use `MatDialogActions` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogActions {\n    constructor() {\n        /**\n         * Horizontal alignment of action buttons.\n         */\n        this.align = 'start';\n    }\n}\nMatLegacyDialogActions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyDialogActions, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyDialogActions.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyDialogActions, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", inputs: { align: \"align\" }, host: { properties: { \"class.mat-dialog-actions-align-center\": \"align === \\\"center\\\"\", \"class.mat-dialog-actions-align-end\": \"align === \\\"end\\\"\" }, classAttribute: \"mat-dialog-actions\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    host: {\n                        'class': 'mat-dialog-actions',\n                        '[class.mat-dialog-actions-align-center]': 'align === \"center\"',\n                        '[class.mat-dialog-actions-align-end]': 'align === \"end\"',\n                    },\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }] } });\n// TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Use `MatDialogModule` from `@angular/material/dialog` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyDialogModule {\n}\nMatLegacyDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatLegacyDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyDialogModule, declarations: [MatLegacyDialogContainer,\n        MatLegacyDialogClose,\n        MatLegacyDialogTitle,\n        MatLegacyDialogActions,\n        MatLegacyDialogContent], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule], exports: [MatLegacyDialogContainer,\n        MatLegacyDialogClose,\n        MatLegacyDialogTitle,\n        MatLegacyDialogContent,\n        MatLegacyDialogActions,\n        MatCommonModule] });\nMatLegacyDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyDialogModule, providers: [MatLegacyDialog, MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule],\n                    exports: [\n                        MatLegacyDialogContainer,\n                        MatLegacyDialogClose,\n                        MatLegacyDialogTitle,\n                        MatLegacyDialogContent,\n                        MatLegacyDialogActions,\n                        MatCommonModule,\n                    ],\n                    declarations: [\n                        MatLegacyDialogContainer,\n                        MatLegacyDialogClose,\n                        MatLegacyDialogTitle,\n                        MatLegacyDialogActions,\n                        MatLegacyDialogContent,\n                    ],\n                    providers: [MatLegacyDialog, MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_LEGACY_DIALOG_DATA, MAT_LEGACY_DIALOG_DEFAULT_OPTIONS, MAT_LEGACY_DIALOG_SCROLL_STRATEGY, MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_LEGACY_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatLegacyDialog, MatLegacyDialogActions, MatLegacyDialogClose, MatLegacyDialogConfig, MatLegacyDialogContainer, MatLegacyDialogContent, MatLegacyDialogModule, MatLegacyDialogRef, MatLegacyDialogTitle };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}