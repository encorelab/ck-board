{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, EventEmitter, Directive, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a re-layout. This re-layout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * re-layout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nclass PendingCopy {\n  constructor(text, _document) {\n    this._document = _document;\n    const textarea = this._textarea = this._document.createElement('textarea');\n    const styles = textarea.style;\n    // Hide the element for display and accessibility. Set a fixed position so the page layout\n    // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n    // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n    styles.position = 'fixed';\n    styles.top = styles.opacity = '0';\n    styles.left = '-999em';\n    textarea.setAttribute('aria-hidden', 'true');\n    textarea.value = text;\n    // Making the textarea `readonly` prevents the screen from jumping on iOS Safari (see #25169).\n    textarea.readOnly = true;\n    this._document.body.appendChild(textarea);\n  }\n  /** Finishes copying the text. */\n  copy() {\n    const textarea = this._textarea;\n    let successful = false;\n    try {\n      // Older browsers could throw if copy is not supported.\n      if (textarea) {\n        const currentFocus = this._document.activeElement;\n        textarea.select();\n        textarea.setSelectionRange(0, textarea.value.length);\n        successful = this._document.execCommand('copy');\n        if (currentFocus) {\n          currentFocus.focus();\n        }\n      }\n    } catch {\n      // Discard error.\n      // Initial setting of {@code successful} will represent failure here.\n    }\n    return successful;\n  }\n  /** Cleans up DOM changes used to perform the copy operation. */\n  destroy() {\n    const textarea = this._textarea;\n    if (textarea) {\n      textarea.remove();\n      this._textarea = undefined;\n    }\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n  constructor(document) {\n    this._document = document;\n  }\n  /**\n   * Copies the provided text into the user's clipboard.\n   *\n   * @param text The string to copy.\n   * @returns Whether the operation was successful.\n   */\n  copy(text) {\n    const pendingCopy = this.beginCopy(text);\n    const successful = pendingCopy.copy();\n    pendingCopy.destroy();\n    return successful;\n  }\n  /**\n   * Prepares a string to be copied later. This is useful for large strings\n   * which take too long to successfully render and be copied in the same tick.\n   *\n   * The caller must call `destroy` on the returned `PendingCopy`.\n   *\n   * @param text The string to copy.\n   * @returns the pending copy operation.\n   */\n  beginCopy(text) {\n    return new PendingCopy(text, this._document);\n  }\n}\nClipboard.ɵfac = function Clipboard_Factory(t) {\n  return new (t || Clipboard)(i0.ɵɵinject(DOCUMENT));\n};\nClipboard.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Clipboard,\n  factory: Clipboard.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Clipboard, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n  constructor(_clipboard, _ngZone, config) {\n    this._clipboard = _clipboard;\n    this._ngZone = _ngZone;\n    /** Content to be copied. */\n    this.text = '';\n    /**\n     * How many times to attempt to copy the text. This may be necessary for longer text, because\n     * the browser needs time to fill an intermediate textarea element and copy the content.\n     */\n    this.attempts = 1;\n    /**\n     * Emits when some text is copied to the clipboard. The\n     * emitted value indicates whether copying was successful.\n     */\n    this.copied = new EventEmitter();\n    /** Copies that are currently being attempted. */\n    this._pending = new Set();\n    if (config && config.attempts != null) {\n      this.attempts = config.attempts;\n    }\n  }\n  /** Copies the current text to the clipboard. */\n  copy(attempts = this.attempts) {\n    if (attempts > 1) {\n      let remainingAttempts = attempts;\n      const pending = this._clipboard.beginCopy(this.text);\n      this._pending.add(pending);\n      const attempt = () => {\n        const successful = pending.copy();\n        if (!successful && --remainingAttempts && !this._destroyed) {\n          // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n          this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n        } else {\n          this._currentTimeout = null;\n          this._pending.delete(pending);\n          pending.destroy();\n          this.copied.emit(successful);\n        }\n      };\n      attempt();\n    } else {\n      this.copied.emit(this._clipboard.copy(this.text));\n    }\n  }\n  ngOnDestroy() {\n    if (this._currentTimeout) {\n      clearTimeout(this._currentTimeout);\n    }\n    this._pending.forEach(copy => copy.destroy());\n    this._pending.clear();\n    this._destroyed = true;\n  }\n}\nCdkCopyToClipboard.ɵfac = function CdkCopyToClipboard_Factory(t) {\n  return new (t || CdkCopyToClipboard)(i0.ɵɵdirectiveInject(Clipboard), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(CDK_COPY_TO_CLIPBOARD_CONFIG, 8));\n};\nCdkCopyToClipboard.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkCopyToClipboard,\n  selectors: [[\"\", \"cdkCopyToClipboard\", \"\"]],\n  hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function CdkCopyToClipboard_click_HostBindingHandler() {\n        return ctx.copy();\n      });\n    }\n  },\n  inputs: {\n    text: [\"cdkCopyToClipboard\", \"text\"],\n    attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"]\n  },\n  outputs: {\n    copied: \"cdkCopyToClipboardCopied\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkCopyToClipboard, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkCopyToClipboard]',\n      host: {\n        '(click)': 'copy()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: Clipboard\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CDK_COPY_TO_CLIPBOARD_CONFIG]\n      }]\n    }];\n  }, {\n    text: [{\n      type: Input,\n      args: ['cdkCopyToClipboard']\n    }],\n    attempts: [{\n      type: Input,\n      args: ['cdkCopyToClipboardAttempts']\n    }],\n    copied: [{\n      type: Output,\n      args: ['cdkCopyToClipboardCopied']\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ClipboardModule {}\nClipboardModule.ɵfac = function ClipboardModule_Factory(t) {\n  return new (t || ClipboardModule)();\n};\nClipboardModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ClipboardModule\n});\nClipboardModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ClipboardModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CdkCopyToClipboard],\n      exports: [CdkCopyToClipboard]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };","map":{"version":3,"names":["DOCUMENT","i0","Injectable","Inject","InjectionToken","EventEmitter","Directive","Optional","Input","Output","NgModule","PendingCopy","constructor","text","_document","textarea","_textarea","createElement","styles","style","position","top","opacity","left","setAttribute","value","readOnly","body","appendChild","copy","successful","currentFocus","activeElement","select","setSelectionRange","length","execCommand","focus","destroy","remove","undefined","Clipboard","document","pendingCopy","beginCopy","ɵfac","ɵprov","type","args","providedIn","decorators","CDK_COPY_TO_CLIPBOARD_CONFIG","CdkCopyToClipboard","_clipboard","_ngZone","config","attempts","copied","_pending","Set","remainingAttempts","pending","add","attempt","_destroyed","_currentTimeout","runOutsideAngular","setTimeout","delete","emit","ngOnDestroy","clearTimeout","forEach","clear","NgZone","ɵdir","selector","host","ClipboardModule","ɵmod","ɵinj","declarations","exports"],"sources":["/Users/marieklinaeva/github/ck-board/frontend/node_modules/@angular/cdk/fesm2020/clipboard.mjs"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, EventEmitter, Directive, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a re-layout. This re-layout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * re-layout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nclass PendingCopy {\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = (this._textarea = this._document.createElement('textarea'));\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set a fixed position so the page layout\n        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n        styles.position = 'fixed';\n        styles.top = styles.opacity = '0';\n        styles.left = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        // Making the textarea `readonly` prevents the screen from jumping on iOS Safari (see #25169).\n        textarea.readOnly = true;\n        this._document.body.appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try {\n            // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            textarea.remove();\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n        const pendingCopy = this.beginCopy(text);\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n}\nClipboard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: Clipboard, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nClipboard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: Clipboard, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: Clipboard, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    constructor(_clipboard, _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /** Content to be copied. */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /** Copies that are currently being attempted. */\n        this._pending = new Set();\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            let remainingAttempts = attempts;\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            const attempt = () => {\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            };\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach(copy => copy.destroy());\n        this._pending.clear();\n        this._destroyed = true;\n    }\n}\nCdkCopyToClipboard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkCopyToClipboard, deps: [{ token: Clipboard }, { token: i0.NgZone }, { token: CDK_COPY_TO_CLIPBOARD_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCopyToClipboard.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkCopyToClipboard, selector: \"[cdkCopyToClipboard]\", inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" }, host: { listeners: { \"click\": \"copy()\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkCopyToClipboard, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCopyToClipboard]',\n                    host: {\n                        '(click)': 'copy()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: Clipboard }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_COPY_TO_CLIPBOARD_CONFIG]\n                }] }]; }, propDecorators: { text: [{\n                type: Input,\n                args: ['cdkCopyToClipboard']\n            }], attempts: [{\n                type: Input,\n                args: ['cdkCopyToClipboardAttempts']\n            }], copied: [{\n                type: Output,\n                args: ['cdkCopyToClipboardCopied']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass ClipboardModule {\n}\nClipboardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ClipboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nClipboardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ClipboardModule, declarations: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] });\nClipboardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ClipboardModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: ClipboardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdkCopyToClipboard],\n                    exports: [CdkCopyToClipboard],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}