{"ast":null,"code":"import _asyncToGenerator from \"/Users/marieklinaeva/github/ck-board/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _asyncIterator from \"/Users/marieklinaeva/github/ck-board/frontend/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { FabricPostComponent } from '../components/fabric-post/fabric-post.component';\nimport { PostType } from '../models/post';\nimport { SocketEvent } from '../utils/constants';\nimport { generateUniqueID } from '../utils/Utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./socket.service\";\nimport * as i2 from \"./user.service\";\nimport * as i3 from \"./post.service\";\nimport * as i4 from \"./upvotes.service\";\nimport * as i5 from \"./comment.service\";\nimport * as i6 from \"./board.service\";\nimport * as i7 from \"./bucket.service\";\nimport * as i8 from \"./workflow.service\";\nimport * as i9 from \"./notification.service\";\nimport * as i10 from \"../utils/FabricUtils\";\nexport class CanvasService {\n  socketService;\n  userService;\n  postService;\n  upvotesService;\n  commentService;\n  boardService;\n  bucketService;\n  workflowService;\n  notificationService;\n  fabricUtils;\n  constructor(socketService,\n  // private fileUploadService: FileUploadService,\n  userService, postService, upvotesService, commentService, boardService, bucketService, workflowService, notificationService, fabricUtils) {\n    this.socketService = socketService;\n    this.userService = userService;\n    this.postService = postService;\n    this.upvotesService = upvotesService;\n    this.commentService = commentService;\n    this.boardService = boardService;\n    this.bucketService = bucketService;\n    this.workflowService = workflowService;\n    this.notificationService = notificationService;\n    this.fabricUtils = fabricUtils;\n  }\n  createPost(post) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const savedPost = yield _this.postService.create(post);\n      const fabricPost = new FabricPostComponent(post);\n      _this.fabricUtils._canvas.add(fabricPost);\n      _this.socketService.emit(SocketEvent.POST_CREATE, savedPost);\n    })();\n  }\n  removePost(post) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.postService.remove(post.postID);\n      _this2.socketService.emit(SocketEvent.POST_DELETE, post);\n    })();\n  }\n  createBucketPost(bucketID, post) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const savedPost = yield _this3.postService.create(post);\n      yield _this3.bucketService.add(bucketID, post.postID);\n      _this3.socketService.emit(SocketEvent.POST_CREATE, savedPost);\n      return savedPost;\n    })();\n  }\n  createListPost(post) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const savedPost = yield _this4.postService.create(post);\n      _this4.socketService.emit(SocketEvent.POST_CREATE, savedPost);\n      for (const tag of post.tags) {\n        _this4.socketService.emit(SocketEvent.POST_TAG_ADD, {\n          tag,\n          post: savedPost\n        });\n      }\n      return savedPost;\n    })();\n  }\n  createBoardPostFromBucket(post) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const upvotes = yield _this5.upvotesService.getUpvotesByPost(post.postID);\n      const comments = yield _this5.commentService.getCommentsByPost(post.postID);\n      post.type = PostType.BOARD;\n      const fabricPost = new FabricPostComponent(post, {\n        upvotes: upvotes.length,\n        comments: comments.length\n      });\n      post = yield _this5.postService.update(post.postID, post);\n      _this5.fabricUtils._canvas.add(fabricPost);\n      _this5.socketService.emit(SocketEvent.POST_CREATE, post);\n      return post;\n    })();\n  }\n  clearPostsFromBoard(posts) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      const updatedPosts = [];\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n      var _iteratorError;\n      try {\n        for (var _iterator = _asyncIterator(posts), _step; _iteratorAbruptCompletion = !(_step = yield _iterator.next()).done; _iteratorAbruptCompletion = false) {\n          const post = _step.value;\n          {\n            if (post.type == PostType.BOARD) {\n              const updatedPost = yield _this6.postService.update(post.postID, {\n                type: PostType.BUCKET\n              });\n              updatedPosts.push(updatedPost);\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            yield _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n      _this6.socketService.emit(SocketEvent.BOARD_CLEAR, updatedPosts);\n      return updatedPosts;\n    })();\n  }\n  upvote(userID, post) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      if (typeof post === 'string') {\n        post = yield _this7.postService.get(post);\n      }\n      const upvote = {\n        upvoteID: generateUniqueID(),\n        voterID: userID,\n        postID: post.postID,\n        boardID: post.boardID\n      };\n      const result = yield _this7.upvotesService.add(upvote);\n      _this7.socketService.emit(SocketEvent.POST_UPVOTE_ADD, upvote);\n      if (post.userID !== userID) {\n        _this7.socketService.emit(SocketEvent.NOTIFICATION_CREATE, _this7.notificationService.buildUpvoteNotification(post));\n      }\n      return result.upvote;\n    })();\n  }\n  unupvote(userID, post) {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      if (typeof post === 'string') {\n        post = yield _this8.postService.get(post);\n      }\n      const result = yield _this8.upvotesService.remove(userID, post.postID);\n      _this8.socketService.emit(SocketEvent.POST_UPVOTE_REMOVE, result.upvote);\n      return result.upvote;\n    })();\n  }\n  comment(comment) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      const result = yield _this9.commentService.add(comment);\n      const post = yield _this9.postService.get(result.comment.postID);\n      _this9.socketService.emit(SocketEvent.POST_COMMENT_ADD, comment);\n      if (post.userID !== comment.userID) {\n        _this9.socketService.emit(SocketEvent.NOTIFICATION_CREATE, _this9.notificationService.buildCommentNotification(post));\n      }\n    })();\n  }\n  deleteComment(commentID, postID) {\n    var _this10 = this;\n    return _asyncToGenerator(function* () {\n      const result = yield _this10.commentService.remove(commentID);\n      _this10.socketService.emit(SocketEvent.POST_COMMENT_REMOVE, result.comment);\n    })();\n  }\n  tag(post, tag) {\n    var _this11 = this;\n    return _asyncToGenerator(function* () {\n      const tags = [...post.tags, tag];\n      const update = {\n        tags\n      };\n      if (tag.specialAttributes) {\n        const updatedAttr = _this11.fabricUtils.applyTagFeatures(post.postID, tag);\n        if (updatedAttr) update.displayAttributes = updatedAttr;\n      }\n      const savedPost = yield _this11.postService.update(post.postID, update);\n      _this11.socketService.emit(SocketEvent.POST_TAG_ADD, {\n        tag,\n        post: savedPost,\n        userId: _this11.userService.user?.userID\n      });\n      if (savedPost.userID !== post.userID) {\n        _this11.socketService.emit(SocketEvent.NOTIFICATION_CREATE, _this11.notificationService.buildTagNotification(post));\n      }\n      return savedPost;\n    })();\n  }\n  untag(post, tag) {\n    var _this12 = this;\n    return _asyncToGenerator(function* () {\n      post.tags = post.tags.filter(t => t.name != tag.name);\n      const update = {\n        tags: post.tags\n      };\n      if (!post.displayAttributes) {\n        return yield _this12.postService.update(post.postID, update);\n      }\n      if (tag.specialAttributes) {\n        update.displayAttributes = yield _this12.fabricUtils.resetTagFeatures(post.postID);\n      }\n      const savedPost = yield _this12.postService.update(post.postID, update);\n      _this12.socketService.emit(SocketEvent.POST_TAG_REMOVE, {\n        tag,\n        post: savedPost,\n        userId: _this12.userService.user?.userID\n      });\n      return savedPost;\n    })();\n  }\n  updateBoardTask(boardID, title, message) {\n    var _this13 = this;\n    return _asyncToGenerator(function* () {\n      const task = Object.assign({}, title === null ? null : {\n        title\n      }, message === null ? null : {\n        message\n      });\n      const board = yield _this13.boardService.update(boardID, {\n        task\n      });\n      _this13.socketService.emit(SocketEvent.BOARD_TASK_UPDATE, board);\n      return board;\n    })();\n  }\n  updateBoardName(boardID, name) {\n    var _this14 = this;\n    return _asyncToGenerator(function* () {\n      const board = yield _this14.boardService.update(boardID, {\n        name\n      });\n      _this14.socketService.emit(SocketEvent.BOARD_NAME_UPDATE, board);\n      return board;\n    })();\n  }\n  updateBoardImage(boardID, file, settings) {\n    var _this15 = this;\n    return _asyncToGenerator(function* () {\n      if (file === null) {\n        const board = yield _this15.boardService.update(boardID, {\n          bgImage: null\n        });\n        _this15.socketService.emit(SocketEvent.BOARD_IMAGE_UPDATE, board);\n        return board;\n      } else {\n        return new Promise(resolve => {\n          // fabric.Image.fromURL(file, async (image) => {\n          //   const url = await this.fileUploadService.upload(file);\n          //   const imgSettings =\n          //     settings ?? this.fabricUtils.createImageSettings(image);\n          //   const board: Board = await this.boardService.update(boardID, {\n          //     bgImage: { url, imgSettings },\n          //   });\n          //   this.socketService.emit(SocketEvent.BOARD_IMAGE_UPDATE, board);\n          //   resolve(board);\n          // });\n        });\n      }\n    })();\n  }\n  updateBoardImageSettings(boardID, imgSettings) {\n    var _this16 = this;\n    return _asyncToGenerator(function* () {\n      const oldBoard = yield _this16.boardService.get(boardID);\n      const url = oldBoard.bgImage?.url;\n      if (url) {\n        const board = yield _this16.boardService.update(boardID, {\n          bgImage: {\n            url,\n            imgSettings\n          }\n        });\n        _this16.socketService.emit(SocketEvent.BOARD_IMAGE_UPDATE, board);\n        return board;\n      }\n      return oldBoard;\n    })();\n  }\n  updateBoardPermissions(boardID, permissions) {\n    var _this17 = this;\n    return _asyncToGenerator(function* () {\n      const oldBoard = yield _this17.boardService.get(boardID);\n      if (oldBoard.permissions.allowTracing !== permissions.allowTracing) {\n        if (permissions.allowTracing) {\n          _this17.socketService.emit(SocketEvent.TRACING_ENABLED, permissions.allowTracing);\n        } else {\n          _this17.socketService.emit(SocketEvent.TRACING_DISABLED, permissions.allowTracing);\n        }\n      }\n      const board = yield _this17.boardService.update(boardID, {\n        permissions\n      });\n      _this17.socketService.emit(SocketEvent.BOARD_PERMISSIONS_UPDATE, board);\n      return board;\n    })();\n  }\n  updateBoardTags(boardID, tags) {\n    var _this18 = this;\n    return _asyncToGenerator(function* () {\n      const board = yield _this18.boardService.update(boardID, {\n        tags\n      });\n      _this18.socketService.emit(SocketEvent.BOARD_TAGS_UPDATE, board);\n      return board;\n    })();\n  }\n  updateBoardUpvotes(boardID, upvoteLimit) {\n    var _this19 = this;\n    return _asyncToGenerator(function* () {\n      const board = yield _this19.boardService.update(boardID, {\n        upvoteLimit\n      });\n      _this19.socketService.emit(SocketEvent.BOARD_UPVOTE_UPDATE, board);\n      return board;\n    })();\n  }\n  runDistributionWorkflow(workflow) {\n    var _this20 = this;\n    return _asyncToGenerator(function* () {\n      yield _this20.workflowService.runDistribution(workflow.workflowID);\n      _this20.socketService.emit(SocketEvent.WORKFLOW_RUN_DISTRIBUTION, workflow);\n    })();\n  }\n  runTaskWorkflow(workflow) {\n    var _this21 = this;\n    return _asyncToGenerator(function* () {\n      yield _this21.workflowService.runTask(workflow.workflowID);\n      _this21.socketService.emit(SocketEvent.WORKFLOW_RUN_TASK, workflow);\n    })();\n  }\n  readPost(postID) {\n    var _this22 = this;\n    return _asyncToGenerator(function* () {\n      _this22.socketService.emit(SocketEvent.POST_READ, postID);\n    })();\n  }\n  get centerPos() {\n    return this.fabricUtils._canvas.getCenter();\n  }\n  static ɵfac = function CanvasService_Factory(t) {\n    return new (t || CanvasService)(i0.ɵɵinject(i1.SocketService), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i3.PostService), i0.ɵɵinject(i4.UpvotesService), i0.ɵɵinject(i5.CommentService), i0.ɵɵinject(i6.BoardService), i0.ɵɵinject(i7.BucketService), i0.ɵɵinject(i8.WorkflowService), i0.ɵɵinject(i9.NotificationService), i0.ɵɵinject(i10.FabricUtils));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CanvasService,\n    factory: CanvasService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["FabricPostComponent","PostType","SocketEvent","generateUniqueID","CanvasService","socketService","userService","postService","upvotesService","commentService","boardService","bucketService","workflowService","notificationService","fabricUtils","constructor","createPost","post","savedPost","create","fabricPost","_canvas","add","emit","POST_CREATE","removePost","remove","postID","POST_DELETE","createBucketPost","bucketID","createListPost","tag","tags","POST_TAG_ADD","createBoardPostFromBucket","upvotes","getUpvotesByPost","comments","getCommentsByPost","type","BOARD","length","update","clearPostsFromBoard","posts","updatedPosts","updatedPost","BUCKET","push","BOARD_CLEAR","upvote","userID","get","upvoteID","voterID","boardID","result","POST_UPVOTE_ADD","NOTIFICATION_CREATE","buildUpvoteNotification","unupvote","POST_UPVOTE_REMOVE","comment","POST_COMMENT_ADD","buildCommentNotification","deleteComment","commentID","POST_COMMENT_REMOVE","specialAttributes","updatedAttr","applyTagFeatures","displayAttributes","userId","user","buildTagNotification","untag","filter","t","name","resetTagFeatures","POST_TAG_REMOVE","updateBoardTask","title","message","task","Object","assign","board","BOARD_TASK_UPDATE","updateBoardName","BOARD_NAME_UPDATE","updateBoardImage","file","settings","bgImage","BOARD_IMAGE_UPDATE","Promise","resolve","updateBoardImageSettings","imgSettings","oldBoard","url","updateBoardPermissions","permissions","allowTracing","TRACING_ENABLED","TRACING_DISABLED","BOARD_PERMISSIONS_UPDATE","updateBoardTags","BOARD_TAGS_UPDATE","updateBoardUpvotes","upvoteLimit","BOARD_UPVOTE_UPDATE","runDistributionWorkflow","workflow","runDistribution","workflowID","WORKFLOW_RUN_DISTRIBUTION","runTaskWorkflow","runTask","WORKFLOW_RUN_TASK","readPost","POST_READ","centerPos","getCenter","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/services/canvas.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { fabric } from 'fabric';\nimport { FabricPostComponent } from '../components/fabric-post/fabric-post.component';\nimport { Board, BoardPermissions } from '../models/board';\nimport Comment from '../models/comment';\nimport Post, { PostType } from '../models/post';\nimport { Tag } from '../models/tag';\nimport { DistributionWorkflow, TaskWorkflow } from '../models/workflow';\nimport { SocketEvent } from '../utils/constants';\nimport { FabricUtils, ImageSettings } from '../utils/FabricUtils';\nimport { generateUniqueID } from '../utils/Utils';\nimport { BoardService } from './board.service';\nimport { BucketService } from './bucket.service';\nimport { CommentService } from './comment.service';\n// import { FileUploadService } from './fileUpload.service';\nimport { UpvotesService } from './upvotes.service';\nimport { NotificationService } from './notification.service';\nimport { PostService } from './post.service';\nimport { SocketService } from './socket.service';\nimport Upvote from '../models/upvote';\nimport { WorkflowService } from './workflow.service';\nimport { UserService } from './user.service';\n\ninterface Position {\n  top: number;\n  left: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CanvasService {\n  constructor(\n    private socketService: SocketService,\n    // private fileUploadService: FileUploadService,\n    private userService: UserService,\n    private postService: PostService,\n    private upvotesService: UpvotesService,\n    private commentService: CommentService,\n    private boardService: BoardService,\n    private bucketService: BucketService,\n    private workflowService: WorkflowService,\n    private notificationService: NotificationService,\n    private fabricUtils: FabricUtils\n  ) {}\n\n  async createPost(post: Post) {\n    const savedPost = await this.postService.create(post);\n    const fabricPost = new FabricPostComponent(post);\n\n    this.fabricUtils._canvas.add(fabricPost);\n    this.socketService.emit(SocketEvent.POST_CREATE, savedPost);\n  }\n\n  async removePost(post: Post) {\n    await this.postService.remove(post.postID);\n\n    this.socketService.emit(SocketEvent.POST_DELETE, post);\n  }\n\n  async createBucketPost(bucketID: string, post: Post): Promise<Post> {\n    const savedPost = await this.postService.create(post);\n    await this.bucketService.add(bucketID, post.postID);\n\n    this.socketService.emit(SocketEvent.POST_CREATE, savedPost);\n    return savedPost;\n  }\n\n  async createListPost(post: Post) {\n    const savedPost = await this.postService.create(post);\n    this.socketService.emit(SocketEvent.POST_CREATE, savedPost);\n    for (const tag of post.tags) {\n      this.socketService.emit(SocketEvent.POST_TAG_ADD, {\n        tag,\n        post: savedPost,\n      });\n    }\n\n    return savedPost;\n  }\n\n  async createBoardPostFromBucket(post: Post): Promise<Post> {\n    const upvotes = await this.upvotesService.getUpvotesByPost(post.postID);\n    const comments = await this.commentService.getCommentsByPost(post.postID);\n    post.type = PostType.BOARD;\n\n    const fabricPost = new FabricPostComponent(post, {\n      upvotes: upvotes.length,\n      comments: comments.length,\n    });\n    post = await this.postService.update(post.postID, post);\n\n    this.fabricUtils._canvas.add(fabricPost);\n    this.socketService.emit(SocketEvent.POST_CREATE, post);\n\n    return post;\n  }\n\n  async clearPostsFromBoard(posts: Post[]): Promise<Post[]> {\n    const updatedPosts: Post[] = [];\n    for await (const post of posts) {\n      if (post.type == PostType.BOARD) {\n        const updatedPost = await this.postService.update(post.postID, {\n          type: PostType.BUCKET,\n        });\n        updatedPosts.push(updatedPost);\n      }\n    }\n\n    this.socketService.emit(SocketEvent.BOARD_CLEAR, updatedPosts);\n\n    return updatedPosts;\n  }\n\n  async upvote(userID: string, post: string | Post) {\n    if (typeof post === 'string') {\n      post = await this.postService.get(post);\n    }\n\n    const upvote: Upvote = {\n      upvoteID: generateUniqueID(),\n      voterID: userID,\n      postID: post.postID,\n      boardID: post.boardID,\n    };\n\n    const result = await this.upvotesService.add(upvote);\n\n    this.socketService.emit(SocketEvent.POST_UPVOTE_ADD, upvote);\n\n    if (post.userID !== userID) {\n      this.socketService.emit(\n        SocketEvent.NOTIFICATION_CREATE,\n        this.notificationService.buildUpvoteNotification(post)\n      );\n    }\n\n    return result.upvote;\n  }\n\n  async unupvote(userID: string, post: string | Post): Promise<Upvote> {\n    if (typeof post === 'string') {\n      post = await this.postService.get(post);\n    }\n\n    const result = await this.upvotesService.remove(userID, post.postID);\n\n    this.socketService.emit(SocketEvent.POST_UPVOTE_REMOVE, result.upvote);\n\n    return result.upvote;\n  }\n\n  async comment(comment: Comment) {\n    const result = await this.commentService.add(comment);\n\n    const post = await this.postService.get(result.comment.postID);\n\n    this.socketService.emit(SocketEvent.POST_COMMENT_ADD, comment);\n\n    if (post.userID !== comment.userID) {\n      this.socketService.emit(\n        SocketEvent.NOTIFICATION_CREATE,\n        this.notificationService.buildCommentNotification(post)\n      );\n    }\n  }\n\n  async deleteComment(commentID: string, postID: string) {\n    const result = await this.commentService.remove(commentID);\n\n    this.socketService.emit(SocketEvent.POST_COMMENT_REMOVE, result.comment);\n  }\n\n  async tag(post: Post, tag: Tag): Promise<Post> {\n    const tags = [...post.tags, tag];\n    const update: Partial<Post> = { tags };\n\n    if (tag.specialAttributes) {\n      const updatedAttr = this.fabricUtils.applyTagFeatures(post.postID, tag);\n      if (updatedAttr) update.displayAttributes = updatedAttr;\n    }\n    const savedPost = await this.postService.update(post.postID, update);\n    this.socketService.emit(SocketEvent.POST_TAG_ADD, {\n      tag,\n      post: savedPost,\n      userId: this.userService.user?.userID,\n    });\n\n    if (savedPost.userID !== post.userID) {\n      this.socketService.emit(\n        SocketEvent.NOTIFICATION_CREATE,\n        this.notificationService.buildTagNotification(post)\n      );\n    }\n\n    return savedPost;\n  }\n\n  async untag(post: Post, tag: Tag): Promise<Post> {\n    post.tags = post.tags.filter((t) => t.name != tag.name);\n    const update: Partial<Post> = { tags: post.tags };\n\n    if (!post.displayAttributes) {\n      return await this.postService.update(post.postID, update);\n    }\n\n    if (tag.specialAttributes) {\n      update.displayAttributes = await this.fabricUtils.resetTagFeatures(\n        post.postID\n      );\n    }\n\n    const savedPost = await this.postService.update(post.postID, update);\n\n    this.socketService.emit(SocketEvent.POST_TAG_REMOVE, {\n      tag,\n      post: savedPost,\n      userId: this.userService.user?.userID,\n    });\n\n    return savedPost;\n  }\n\n  async updateBoardTask(\n    boardID: string,\n    title: string,\n    message?: string\n  ): Promise<Board> {\n    const task = Object.assign(\n      {},\n      title === null ? null : { title },\n      message === null ? null : { message }\n    );\n\n    const board: Board = await this.boardService.update(boardID, { task });\n    this.socketService.emit(SocketEvent.BOARD_TASK_UPDATE, board);\n\n    return board;\n  }\n\n  async updateBoardName(boardID: string, name: string): Promise<Board> {\n    const board: Board = await this.boardService.update(boardID, { name });\n    this.socketService.emit(SocketEvent.BOARD_NAME_UPDATE, board);\n\n    return board;\n  }\n\n  async updateBoardImage(\n    boardID: string,\n    file: string | null,\n    settings?: any\n  ): Promise<Board> {\n    if (file === null) {\n      const board: Board = await this.boardService.update(boardID, {\n        bgImage: null,\n      });\n      this.socketService.emit(SocketEvent.BOARD_IMAGE_UPDATE, board);\n      return board;\n    } else {\n      return new Promise<Board>((resolve) => {\n        // fabric.Image.fromURL(file, async (image) => {\n        //   const url = await this.fileUploadService.upload(file);\n        //   const imgSettings =\n        //     settings ?? this.fabricUtils.createImageSettings(image);\n\n        //   const board: Board = await this.boardService.update(boardID, {\n        //     bgImage: { url, imgSettings },\n        //   });\n        //   this.socketService.emit(SocketEvent.BOARD_IMAGE_UPDATE, board);\n\n        //   resolve(board);\n        // });\n      });\n    }\n  }\n\n  async updateBoardImageSettings(\n    boardID: string,\n    imgSettings: ImageSettings\n  ): Promise<Board> {\n    const oldBoard = await this.boardService.get(boardID);\n    const url = oldBoard.bgImage?.url;\n\n    if (url) {\n      const board: Board = await this.boardService.update(boardID, {\n        bgImage: { url, imgSettings },\n      });\n      this.socketService.emit(SocketEvent.BOARD_IMAGE_UPDATE, board);\n      return board;\n    }\n    return oldBoard;\n  }\n\n  async updateBoardPermissions(\n    boardID: string,\n    permissions: BoardPermissions\n  ): Promise<Board> {\n    const oldBoard = await this.boardService.get(boardID);\n    if (oldBoard.permissions.allowTracing !== permissions.allowTracing) {\n      if (permissions.allowTracing) {\n        this.socketService.emit(\n          SocketEvent.TRACING_ENABLED,\n          permissions.allowTracing\n        );\n      } else {\n        this.socketService.emit(\n          SocketEvent.TRACING_DISABLED,\n          permissions.allowTracing\n        );\n      }\n    }\n    const board: Board = await this.boardService.update(boardID, {\n      permissions,\n    });\n    this.socketService.emit(SocketEvent.BOARD_PERMISSIONS_UPDATE, board);\n\n    return board;\n  }\n\n  async updateBoardTags(boardID: string, tags: Tag[]): Promise<Board> {\n    const board: Board = await this.boardService.update(boardID, { tags });\n    this.socketService.emit(SocketEvent.BOARD_TAGS_UPDATE, board);\n\n    return board;\n  }\n\n  async updateBoardUpvotes(\n    boardID: string,\n    upvoteLimit: number\n  ): Promise<Board> {\n    const board: Board = await this.boardService.update(boardID, {\n      upvoteLimit,\n    });\n    this.socketService.emit(SocketEvent.BOARD_UPVOTE_UPDATE, board);\n\n    return board;\n  }\n\n  async runDistributionWorkflow(workflow: DistributionWorkflow): Promise<void> {\n    await this.workflowService.runDistribution(workflow.workflowID);\n\n    this.socketService.emit(SocketEvent.WORKFLOW_RUN_DISTRIBUTION, workflow);\n  }\n\n  async runTaskWorkflow(workflow: TaskWorkflow): Promise<void> {\n    await this.workflowService.runTask(workflow.workflowID);\n\n    this.socketService.emit(SocketEvent.WORKFLOW_RUN_TASK, workflow);\n  }\n\n  async readPost(postID: string) {\n    this.socketService.emit(SocketEvent.POST_READ, postID);\n  }\n\n  get centerPos(): Position {\n    return this.fabricUtils._canvas.getCenter();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}