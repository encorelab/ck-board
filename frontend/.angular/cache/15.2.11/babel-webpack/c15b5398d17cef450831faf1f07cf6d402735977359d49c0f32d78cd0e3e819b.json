{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./socket.service\";\nexport class GroupService {\n  constructor(http, socketService) {\n    this.http = http;\n    this.socketService = socketService;\n  }\n  getByProjectUser(projectID, userID) {\n    return this.http.get('groups/project/' + projectID + '/user/' + userID).toPromise();\n  }\n  getById(groupID) {\n    return this.http.get('groups/' + groupID).toPromise();\n  }\n  getByUserId(userID) {\n    return this.http.get('groups/user/' + userID).toPromise();\n  }\n  getByUserAndProject(userID, projectID) {\n    return this.http.get(`groups/user/${userID}/project/${projectID}`).toPromise();\n  }\n  getByProjectId(projectID) {\n    return this.http.get('groups/project/' + projectID).toPromise();\n  }\n  create(group) {\n    return this.http.post('groups/', group).toPromise();\n  }\n  delete(groupID) {\n    return this.http.delete('groups/' + groupID).toPromise();\n  }\n  update(groupID, group) {\n    return this.http.post('groups/' + groupID, group).toPromise();\n  }\n  addUsers(groupID, ...users) {\n    return this.http.post('groups/' + groupID + '/users/add/', users).toPromise();\n  }\n  removeUsers(groupID, ...users) {\n    return this.http.post('groups/' + groupID + '/users/remove/', users).toPromise();\n  }\n}\nGroupService.ɵfac = function GroupService_Factory(t) {\n  return new (t || GroupService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SocketService));\n};\nGroupService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GroupService,\n  factory: GroupService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,YAAY;EACvBC,YAAoBC,IAAgB,EAAUC,aAA4B;IAAtD,SAAI,GAAJD,IAAI;IAAsB,kBAAa,GAAbC,aAAa;EAAkB;EAE7EC,gBAAgB,CAACC,SAAiB,EAAEC,MAAc;IAChD,OAAO,IAAI,CAACJ,IAAI,CACbK,GAAG,CAAQ,iBAAiB,GAAGF,SAAS,GAAG,QAAQ,GAAGC,MAAM,CAAC,CAC7DE,SAAS,EAAE;EAChB;EAEAC,OAAO,CAACC,OAAe;IACrB,OAAO,IAAI,CAACR,IAAI,CAACK,GAAG,CAAQ,SAAS,GAAGG,OAAO,CAAC,CAACF,SAAS,EAAE;EAC9D;EAEAG,WAAW,CAACL,MAAc;IACxB,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAU,cAAc,GAAGD,MAAM,CAAC,CAACE,SAAS,EAAE;EACpE;EAEAI,mBAAmB,CAACN,MAAc,EAAED,SAAiB;IACnD,OAAO,IAAI,CAACH,IAAI,CACbK,GAAG,CAAU,eAAeD,MAAM,YAAYD,SAAS,EAAE,CAAC,CAC1DG,SAAS,EAAE;EAChB;EAEAK,cAAc,CAACR,SAAiB;IAC9B,OAAO,IAAI,CAACH,IAAI,CAACK,GAAG,CAAU,iBAAiB,GAAGF,SAAS,CAAC,CAACG,SAAS,EAAE;EAC1E;EAEAM,MAAM,CAACC,KAAY;IACjB,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAQ,SAAS,EAAED,KAAK,CAAC,CAACP,SAAS,EAAE;EAC5D;EAEAS,MAAM,CAACP,OAAe;IACpB,OAAO,IAAI,CAACR,IAAI,CAACe,MAAM,CAAQ,SAAS,GAAGP,OAAO,CAAC,CAACF,SAAS,EAAE;EACjE;EAEAU,MAAM,CAACR,OAAe,EAAEK,KAAqB;IAC3C,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAQ,SAAS,GAAGN,OAAO,EAAEK,KAAK,CAAC,CAACP,SAAS,EAAE;EACtE;EAEAW,QAAQ,CAACT,OAAe,EAAE,GAAGU,KAAe;IAC1C,OAAO,IAAI,CAAClB,IAAI,CACbc,IAAI,CAAQ,SAAS,GAAGN,OAAO,GAAG,aAAa,EAAEU,KAAK,CAAC,CACvDZ,SAAS,EAAE;EAChB;EAEAa,WAAW,CAACX,OAAe,EAAE,GAAGU,KAAe;IAC7C,OAAO,IAAI,CAAClB,IAAI,CACbc,IAAI,CAAQ,SAAS,GAAGN,OAAO,GAAG,gBAAgB,EAAEU,KAAK,CAAC,CAC1DZ,SAAS,EAAE;EAChB;;;mBAjDWR,YAAY;AAAA;;SAAZA,YAAY;EAAAsB,SAAZtB,YAAY;EAAAuB,YAFX;AAAM","names":["GroupService","constructor","http","socketService","getByProjectUser","projectID","userID","get","toPromise","getById","groupID","getByUserId","getByUserAndProject","getByProjectId","create","group","post","delete","update","addUsers","users","removeUsers","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/services/group.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Group } from '../models/group';\nimport { SocketService } from './socket.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GroupService {\n  constructor(private http: HttpClient, private socketService: SocketService) {}\n\n  getByProjectUser(projectID: string, userID: string): Promise<Group> {\n    return this.http\n      .get<Group>('groups/project/' + projectID + '/user/' + userID)\n      .toPromise();\n  }\n\n  getById(groupID: string): Promise<Group> {\n    return this.http.get<Group>('groups/' + groupID).toPromise();\n  }\n\n  getByUserId(userID: string): Promise<Group[]> {\n    return this.http.get<Group[]>('groups/user/' + userID).toPromise();\n  }\n\n  getByUserAndProject(userID: string, projectID: string): Promise<Group[]> {\n    return this.http\n      .get<Group[]>(`groups/user/${userID}/project/${projectID}`)\n      .toPromise();\n  }\n\n  getByProjectId(projectID: string): Promise<Group[]> {\n    return this.http.get<Group[]>('groups/project/' + projectID).toPromise();\n  }\n\n  create(group: Group): Promise<Group> {\n    return this.http.post<Group>('groups/', group).toPromise();\n  }\n\n  delete(groupID: string): Promise<Group> {\n    return this.http.delete<Group>('groups/' + groupID).toPromise();\n  }\n\n  update(groupID: string, group: Partial<Group>): Promise<Group> {\n    return this.http.post<Group>('groups/' + groupID, group).toPromise();\n  }\n\n  addUsers(groupID: string, ...users: string[]): Promise<Group> {\n    return this.http\n      .post<Group>('groups/' + groupID + '/users/add/', users)\n      .toPromise();\n  }\n\n  removeUsers(groupID: string, ...users: string[]): Promise<Group> {\n    return this.http\n      .post<Group>('groups/' + groupID + '/users/remove/', users)\n      .toPromise();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}