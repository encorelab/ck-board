{"ast":null,"code":"import { DimensionType } from '../models/learner';\nimport sorting from './sorting';\nconst FILL_OPACITY = 0.6;\nexport const createClassGraph = (model, handlers, dimensionType = DimensionType.DIAGNOSTIC, enableExporting = true) => {\n  const dimensions = model.dimensions;\n  const studentToDims = sorting.groupItemBy(model.data, 'student.username');\n  const series = [];\n  for (const [student, values] of Object.entries(studentToDims)) {\n    series.push({\n      type: 'line',\n      name: student,\n      data: values.map(v => dimensionType === DimensionType.DIAGNOSTIC ? v.diagnostic : v.reassessment)\n    });\n  }\n  return {\n    chart: {\n      polar: true\n    },\n    exporting: {\n      enabled: enableExporting,\n      buttons: {\n        contextButton: {\n          text: 'Edit Model',\n          menuItems: ['data', 'export', 'delete']\n        }\n      },\n      menuItemDefinitions: {\n        data: {\n          text: 'Edit Data',\n          onclick: () => {\n            handlers.onEditData(model);\n          }\n        },\n        export: {\n          text: 'Export as CSV',\n          onclick: () => {\n            handlers.onExport(model);\n          }\n        },\n        delete: {\n          text: 'Delete Model',\n          onclick: () => {\n            handlers.onDeleteModel(model);\n          }\n        }\n      }\n    },\n    title: {\n      text: model.name\n    },\n    xAxis: {\n      categories: dimensions,\n      tickmarkPlacement: 'on',\n      lineWidth: 0\n    },\n    yAxis: {\n      gridLineInterpolation: 'polygon',\n      lineWidth: 0,\n      min: 0,\n      max: 100\n    },\n    tooltip: {\n      shared: true,\n      valueSuffix: '%'\n    },\n    series: series\n  };\n};\nexport const createStudentGraph = (model, handlers, student, enableExporting = true) => {\n  const dimToData = sorting.groupItemBy(model.data, 'dimension');\n  const dimensions = [];\n  const studentDiagnostics = [];\n  const studentReassessments = [];\n  const averageDiagnostics = [];\n  const averageReassessments = [];\n  for (const [dimension, values] of Object.entries(dimToData)) {\n    dimensions.push(dimension);\n    let sumDiagnostics = 0;\n    let sumReassessments = 0;\n    let numValues = 0;\n    for (const value of values) {\n      numValues += 1;\n      sumDiagnostics += value.diagnostic;\n      sumReassessments += value.reassessment;\n      if (value.student.userID === student.userID) {\n        studentDiagnostics.push(value.diagnostic);\n        studentReassessments.push(value.reassessment);\n      }\n    }\n    averageDiagnostics.push(sumDiagnostics / numValues);\n    averageReassessments.push(sumReassessments / numValues);\n  }\n  const series = [];\n  series.push({\n    type: 'area',\n    name: 'Reassessment',\n    data: studentReassessments,\n    opacity: FILL_OPACITY\n  });\n  series.push({\n    type: 'area',\n    name: 'Diagnostic',\n    data: studentDiagnostics,\n    opacity: FILL_OPACITY\n  });\n  series.push({\n    type: 'line',\n    name: 'Average Diagnostic',\n    data: averageDiagnostics\n  });\n  series.push({\n    type: 'line',\n    name: 'Average Reassessment',\n    data: averageReassessments\n  });\n  return {\n    chart: {\n      polar: true\n    },\n    exporting: {\n      enabled: enableExporting,\n      buttons: {\n        contextButton: {\n          text: 'Edit Model',\n          menuItems: ['data', 'export', 'delete']\n        }\n      },\n      menuItemDefinitions: {\n        data: {\n          text: 'Edit Data',\n          onclick: () => {\n            handlers.onEditData(model);\n          }\n        },\n        export: {\n          text: 'Export as CSV',\n          onclick: () => {\n            handlers.onExport(model);\n          }\n        },\n        delete: {\n          text: 'Delete Model',\n          onclick: () => {\n            handlers.onDeleteModel(model);\n          }\n        }\n      }\n    },\n    title: {\n      text: model.name\n    },\n    xAxis: {\n      categories: dimensions,\n      tickmarkPlacement: 'on',\n      lineWidth: 0\n    },\n    yAxis: {\n      gridLineInterpolation: 'polygon',\n      lineWidth: 0,\n      min: 0,\n      max: 100\n    },\n    tooltip: {\n      shared: true,\n      valueSuffix: '%'\n    },\n    series: series\n  };\n};","map":{"version":3,"mappings":"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","names":["DimensionType","sorting","FILL_OPACITY","createClassGraph","model","handlers","dimensionType","DIAGNOSTIC","enableExporting","dimensions","studentToDims","groupItemBy","data","series","student","values","Object","entries","push","type","name","map","v","diagnostic","reassessment","chart","polar","exporting","enabled","buttons","contextButton","text","menuItems","menuItemDefinitions","onclick","onEditData","export","onExport","delete","onDeleteModel","title","xAxis","categories","tickmarkPlacement","lineWidth","yAxis","gridLineInterpolation","min","max","tooltip","shared","valueSuffix","createStudentGraph","dimToData","studentDiagnostics","studentReassessments","averageDiagnostics","averageReassessments","dimension","sumDiagnostics","sumReassessments","numValues","value","userID","opacity"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/utils/highchart.ts"],"sourcesContent":["import { SeriesOptionsType } from 'highcharts';\nimport LearnerModel, { DimensionType, DimensionValue } from '../models/learner';\nimport { AuthUser } from '../models/user';\nimport sorting from './sorting';\n\nconst FILL_OPACITY = 0.6;\n\nexport interface MenuHandlers {\n  onEditData: Function;\n  onExport: Function;\n  onDeleteModel: Function;\n}\n\nexport const createClassGraph = (\n  model: LearnerModel,\n  handlers: MenuHandlers,\n  dimensionType: DimensionType = DimensionType.DIAGNOSTIC,\n  enableExporting: boolean = true\n): Highcharts.Options => {\n  const dimensions = model.dimensions;\n  const studentToDims: Map<string, DimensionValue[]> = sorting.groupItemBy(\n    model.data,\n    'student.username'\n  );\n\n  const series: SeriesOptionsType[] = [];\n  for (const [student, values] of Object.entries(studentToDims)) {\n    series.push({\n      type: 'line',\n      name: student,\n      data: values.map((v: DimensionValue) =>\n        dimensionType === DimensionType.DIAGNOSTIC\n          ? v.diagnostic\n          : v.reassessment\n      ),\n    });\n  }\n\n  return {\n    chart: {\n      polar: true,\n    },\n    exporting: {\n      enabled: enableExporting,\n      buttons: {\n        contextButton: {\n          text: 'Edit Model',\n          menuItems: ['data', 'export', 'delete'],\n        },\n      },\n      menuItemDefinitions: {\n        data: {\n          text: 'Edit Data',\n          onclick: () => {\n            handlers.onEditData(model);\n          },\n        },\n        export: {\n          text: 'Export as CSV',\n          onclick: () => {\n            handlers.onExport(model);\n          },\n        },\n        delete: {\n          text: 'Delete Model',\n          onclick: () => {\n            handlers.onDeleteModel(model);\n          },\n        },\n      },\n    },\n    title: {\n      text: model.name,\n    },\n    xAxis: {\n      categories: dimensions,\n      tickmarkPlacement: 'on',\n      lineWidth: 0,\n    },\n    yAxis: {\n      gridLineInterpolation: 'polygon',\n      lineWidth: 0,\n      min: 0,\n      max: 100,\n    },\n    tooltip: {\n      shared: true,\n      valueSuffix: '%',\n    },\n    series: series,\n  };\n};\n\nexport const createStudentGraph = (\n  model: LearnerModel,\n  handlers: MenuHandlers,\n  student: AuthUser,\n  enableExporting: boolean = true\n): Highcharts.Options => {\n  const dimToData: Map<string, DimensionValue[]> = sorting.groupItemBy(\n    model.data,\n    'dimension'\n  );\n\n  const dimensions: string[] = [];\n  const studentDiagnostics: number[] = [];\n  const studentReassessments: number[] = [];\n  const averageDiagnostics: number[] = [];\n  const averageReassessments: number[] = [];\n  for (const [dimension, values] of Object.entries(dimToData)) {\n    dimensions.push(dimension);\n    let sumDiagnostics = 0;\n    let sumReassessments = 0;\n    let numValues = 0;\n    for (const value of values) {\n      numValues += 1;\n      sumDiagnostics += value.diagnostic;\n      sumReassessments += value.reassessment;\n      if (value.student.userID === student.userID) {\n        studentDiagnostics.push(value.diagnostic);\n        studentReassessments.push(value.reassessment);\n      }\n    }\n    averageDiagnostics.push(sumDiagnostics / numValues);\n    averageReassessments.push(sumReassessments / numValues);\n  }\n\n  const series: SeriesOptionsType[] = [];\n  series.push({\n    type: 'area',\n    name: 'Reassessment',\n    data: studentReassessments,\n    opacity: FILL_OPACITY,\n  });\n  series.push({\n    type: 'area',\n    name: 'Diagnostic',\n    data: studentDiagnostics,\n    opacity: FILL_OPACITY,\n  });\n  series.push({\n    type: 'line',\n    name: 'Average Diagnostic',\n    data: averageDiagnostics,\n  });\n  series.push({\n    type: 'line',\n    name: 'Average Reassessment',\n    data: averageReassessments,\n  });\n\n  return {\n    chart: {\n      polar: true,\n    },\n    exporting: {\n      enabled: enableExporting,\n      buttons: {\n        contextButton: {\n          text: 'Edit Model',\n          menuItems: ['data', 'export', 'delete'],\n        },\n      },\n      menuItemDefinitions: {\n        data: {\n          text: 'Edit Data',\n          onclick: () => {\n            handlers.onEditData(model);\n          },\n        },\n        export: {\n          text: 'Export as CSV',\n          onclick: () => {\n            handlers.onExport(model);\n          },\n        },\n        delete: {\n          text: 'Delete Model',\n          onclick: () => {\n            handlers.onDeleteModel(model);\n          },\n        },\n      },\n    },\n    title: {\n      text: model.name,\n    },\n    xAxis: {\n      categories: dimensions,\n      tickmarkPlacement: 'on',\n      lineWidth: 0,\n    },\n    yAxis: {\n      gridLineInterpolation: 'polygon',\n      lineWidth: 0,\n      min: 0,\n      max: 100,\n    },\n    tooltip: {\n      shared: true,\n      valueSuffix: '%',\n    },\n    series: series,\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}