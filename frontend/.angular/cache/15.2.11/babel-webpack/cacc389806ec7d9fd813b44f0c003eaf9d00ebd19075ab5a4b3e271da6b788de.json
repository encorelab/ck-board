{"ast":null,"code":"'use strict';\n\nvar linkifyjs = require('linkifyjs');\n\n/**\n\tConvert strings of text into linkable HTML text\n*/\n\nfunction escapeText(text) {\n  return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\nfunction escapeAttr(href) {\n  return href.replace(/\"/g, '&quot;');\n}\nfunction attributesToString(attributes) {\n  if (!attributes) {\n    return '';\n  }\n  var result = [];\n  for (var attr in attributes) {\n    var val = attributes[attr] + '';\n    result.push(\"\".concat(attr, \"=\\\"\").concat(escapeAttr(val), \"\\\"\"));\n  }\n  return result.join(' ');\n}\n/**\n * Convert a plan text string to an HTML string with links. Expects that the\n * given strings does not contain any HTML entities. Use the linkify-html\n * interface if you need to parse HTML entities.\n *\n * @param {string} str string to linkify\n * @param {object} [opts] overridable options\n * @returns {string}\n */\n\nfunction linkifyStr(str) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  opts = new linkifyjs.Options(opts);\n  var tokens = linkifyjs.tokenize(str);\n  var result = [];\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n    if (token.t === 'nl' && opts.nl2br) {\n      result.push('<br>\\n');\n      continue;\n    } else if (!token.isLink || !opts.check(token)) {\n      result.push(escapeText(token.toString()));\n      continue;\n    }\n    var _opts$resolve = opts.resolve(token),\n      formatted = _opts$resolve.formatted,\n      formattedHref = _opts$resolve.formattedHref,\n      tagName = _opts$resolve.tagName,\n      className = _opts$resolve.className,\n      target = _opts$resolve.target,\n      rel = _opts$resolve.rel,\n      attributes = _opts$resolve.attributes;\n    var link = [\"<\".concat(tagName, \" href=\\\"\").concat(escapeAttr(formattedHref), \"\\\"\")];\n    if (className) {\n      link.push(\" class=\\\"\".concat(escapeAttr(className), \"\\\"\"));\n    }\n    if (target) {\n      link.push(\" target=\\\"\".concat(escapeAttr(target), \"\\\"\"));\n    }\n    if (rel) {\n      link.push(\" rel=\\\"\".concat(escapeAttr(rel), \"\\\"\"));\n    }\n    if (attributes) {\n      link.push(\" \".concat(attributesToString(attributes)));\n    }\n    link.push(\">\".concat(escapeText(formatted), \"</\").concat(tagName, \">\"));\n    result.push(link.join(''));\n  }\n  return result.join('');\n}\nif (!String.prototype.linkify) {\n  Object.defineProperty(String.prototype, 'linkify', {\n    writable: false,\n    value: function linkify(options) {\n      return linkifyStr(this, options);\n    }\n  });\n}\nmodule.exports = linkifyStr;","map":{"version":3,"names":["linkifyjs","require","escapeText","text","replace","escapeAttr","href","attributesToString","attributes","result","attr","val","push","concat","join","linkifyStr","str","opts","arguments","length","undefined","Options","tokens","tokenize","i","token","t","nl2br","isLink","check","toString","_opts$resolve","resolve","formatted","formattedHref","tagName","className","target","rel","link","String","prototype","linkify","Object","defineProperty","writable","value","options","module","exports"],"sources":["/Users/marieklinaeva/github/ck-board/frontend/node_modules/linkifyjs/lib/linkify-string.js"],"sourcesContent":["'use strict';\n\nvar linkifyjs = require('linkifyjs');\n\n/**\n\tConvert strings of text into linkable HTML text\n*/\n\nfunction escapeText(text) {\n  return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\n\nfunction escapeAttr(href) {\n  return href.replace(/\"/g, '&quot;');\n}\n\nfunction attributesToString(attributes) {\n  if (!attributes) {\n    return '';\n  }\n\n  var result = [];\n\n  for (var attr in attributes) {\n    var val = attributes[attr] + '';\n    result.push(\"\".concat(attr, \"=\\\"\").concat(escapeAttr(val), \"\\\"\"));\n  }\n\n  return result.join(' ');\n}\n/**\n * Convert a plan text string to an HTML string with links. Expects that the\n * given strings does not contain any HTML entities. Use the linkify-html\n * interface if you need to parse HTML entities.\n *\n * @param {string} str string to linkify\n * @param {object} [opts] overridable options\n * @returns {string}\n */\n\n\nfunction linkifyStr(str) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  opts = new linkifyjs.Options(opts);\n  var tokens = linkifyjs.tokenize(str);\n  var result = [];\n\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (token.t === 'nl' && opts.nl2br) {\n      result.push('<br>\\n');\n      continue;\n    } else if (!token.isLink || !opts.check(token)) {\n      result.push(escapeText(token.toString()));\n      continue;\n    }\n\n    var _opts$resolve = opts.resolve(token),\n        formatted = _opts$resolve.formatted,\n        formattedHref = _opts$resolve.formattedHref,\n        tagName = _opts$resolve.tagName,\n        className = _opts$resolve.className,\n        target = _opts$resolve.target,\n        rel = _opts$resolve.rel,\n        attributes = _opts$resolve.attributes;\n\n    var link = [\"<\".concat(tagName, \" href=\\\"\").concat(escapeAttr(formattedHref), \"\\\"\")];\n\n    if (className) {\n      link.push(\" class=\\\"\".concat(escapeAttr(className), \"\\\"\"));\n    }\n\n    if (target) {\n      link.push(\" target=\\\"\".concat(escapeAttr(target), \"\\\"\"));\n    }\n\n    if (rel) {\n      link.push(\" rel=\\\"\".concat(escapeAttr(rel), \"\\\"\"));\n    }\n\n    if (attributes) {\n      link.push(\" \".concat(attributesToString(attributes)));\n    }\n\n    link.push(\">\".concat(escapeText(formatted), \"</\").concat(tagName, \">\"));\n    result.push(link.join(''));\n  }\n\n  return result.join('');\n}\n\nif (!String.prototype.linkify) {\n  Object.defineProperty(String.prototype, 'linkify', {\n    writable: false,\n    value: function linkify(options) {\n      return linkifyStr(this, options);\n    }\n  });\n}\n\nmodule.exports = linkifyStr;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}