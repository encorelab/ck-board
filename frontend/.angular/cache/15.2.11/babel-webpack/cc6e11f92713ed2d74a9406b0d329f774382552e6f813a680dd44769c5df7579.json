{"ast":null,"code":"import _asyncToGenerator from \"/Users/marieklinaeva/github/ck-board/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { fabric } from 'fabric';\nimport { Role } from '../models/user';\nimport { DEFAULT_TAGS, POST_DEFAULT_BORDER, POST_DEFAULT_BORDER_THICKNESS, POST_DEFAULT_OPACITY, STUDENT_POST_COLOR, TEACHER_POST_COLOR } from './constants';\nimport { numDigits, generateUniqueID } from './Utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/user.service\";\nexport class FabricUtils {\n  userService;\n  constructor(userService) {\n    this.userService = userService;\n  }\n  _canvas;\n  canvasConfig = {\n    width: window.innerWidth,\n    height: window.innerHeight - 64,\n    fireRightClick: true,\n    stopContextMenu: true\n  };\n  embeddedCanvasConfig = {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    fireRightClick: true,\n    stopContextMenu: true\n  };\n  set canvas(surface) {\n    this._canvas = surface;\n  }\n  setField(obj, key, value) {\n    obj.set(key, value);\n    fabric.util.object.extend(obj, {\n      [key]: value\n    });\n    return obj;\n  }\n  getObjectFromId(postID) {\n    if (!this._canvas) return null;\n    const currentObjects = this._canvas.getObjects();\n    for (let i = currentObjects.length - 1; i >= 0; i--) {\n      if (currentObjects[i].postID == postID) return currentObjects[i];\n    }\n    return null;\n  }\n  getDefaultTagsForBoard(boardID) {\n    return DEFAULT_TAGS.map(tag => {\n      const fullTag = {\n        boardID,\n        tagID: generateUniqueID(),\n        name: tag.name,\n        color: tag.color,\n        specialAttributes: tag.specialAttributes\n      };\n      return fullTag;\n    });\n  }\n  getChildFromGroup(group, child) {\n    if (group instanceof fabric.Group) {\n      const childObj = group.getObjects().find(obj => obj.name == child);\n      return childObj;\n    } else {\n      const childObj = group?.objects.find(obj => obj.name == child);\n      return childObj;\n    }\n  }\n  setBorderColor(existing, color) {\n    if (color == null) return existing;\n    const content = this.getChildFromGroup(existing, 'content');\n    if (content) {\n      content.set({\n        stroke: color,\n        dirty: true\n      });\n    }\n    existing.dirty = true;\n    existing.addWithUpdate();\n    return existing;\n  }\n  setBorderThickness(existing, thickness) {\n    if (thickness == null) return existing;\n    const content = this.getChildFromGroup(existing, 'content');\n    if (content) {\n      content.set({\n        strokeWidth: thickness,\n        dirty: true\n      });\n    }\n    existing.dirty = true;\n    existing.addWithUpdate();\n    return existing;\n  }\n  setFillColor(existing, color) {\n    if (color == null) return existing;\n    const content = this.getChildFromGroup(existing, 'content');\n    if (content) {\n      content.set({\n        fill: color,\n        dirty: true\n      });\n    }\n    existing.dirty = true;\n    existing.addWithUpdate();\n    return existing;\n  }\n  setOpacity(existing, level) {\n    if (level == null) return existing;\n    existing.set({\n      opacity: level,\n      dirty: true\n    });\n    existing.dirty = true;\n    existing.addWithUpdate();\n    return existing;\n  }\n  /**\n  Updates the position and formatting of a fabric post\n  after the author name is changed.\n       @param obj the fabric post being updated\n  @param author new author name\n    @returns updated fabric post\n    */\n  updateAuthor(obj, author) {\n    const children = obj.getObjects();\n    const authorObj = children.filter(obj => obj.name == 'author').pop();\n    const descObj = children.filter(obj => obj.name == 'desc').pop();\n    const upvoteObj = children.filter(obj => obj.name == 'upvote').pop();\n    const downvoteObj = children.filter(obj => obj.name == 'downvote').pop();\n    const upvoteCountObj = children.filter(obj => obj.name == 'upvoteCount').pop();\n    const commentObj = children.filter(obj => obj.name == 'comment').pop();\n    const commentCountObj = children.filter(obj => obj.name == 'commentCount').pop();\n    const contentObj = children.filter(obj => obj.name == 'content').pop();\n    const oldAuthorHeight = authorObj.height;\n    authorObj.set({\n      text: author,\n      dirty: true\n    });\n    const authorDelta = authorObj.height - oldAuthorHeight;\n    descObj.set({\n      top: descObj.top + authorDelta,\n      dirty: true\n    });\n    upvoteObj.set({\n      top: upvoteObj.top + authorDelta,\n      dirty: true\n    });\n    downvoteObj.set({\n      top: downvoteObj.top + authorDelta,\n      dirty: true\n    });\n    upvoteCountObj.set({\n      top: upvoteCountObj.top + authorDelta,\n      dirty: true\n    });\n    commentObj.set({\n      top: commentObj.top + authorDelta,\n      dirty: true\n    });\n    commentCountObj.set({\n      top: commentCountObj.top + authorDelta,\n      dirty: true\n    });\n    contentObj.set({\n      height: contentObj.height,\n      dirty: true\n    });\n    obj.dirty = true;\n    obj.addWithUpdate();\n    return obj;\n  }\n  /**\n  Updates the position and formatting of a fabric post\n  after the title or description is changed.\n       @param obj the fabric post being updated\n  @param title new title\n  @param desc new desc\n    @returns updated fabric post\n    */\n  updatePostTitleDesc(obj, title, desc) {\n    const children = obj.getObjects();\n    const titleObj = children.filter(obj => obj.name == 'title').pop();\n    const authorObj = children.filter(obj => obj.name == 'author').pop();\n    const descObj = children.filter(obj => obj.name == 'desc').pop();\n    const upvoteObj = children.filter(obj => obj.name == 'upvote').pop();\n    const downvoteObj = children.filter(obj => obj.name == 'downvote').pop();\n    const upvoteCountObj = children.filter(obj => obj.name == 'upvoteCount').pop();\n    const commentObj = children.filter(obj => obj.name == 'comment').pop();\n    const commentCountObj = children.filter(obj => obj.name == 'commentCount').pop();\n    const contentObj = children.filter(obj => obj.name == 'content').pop();\n    const oldTitleHeight = titleObj.height;\n    const oldDescHeight = descObj.height;\n    const oldAuthorHeight = authorObj.height;\n    titleObj.set({\n      text: title,\n      dirty: true\n    });\n    descObj.set({\n      text: desc.length > 200 ? desc.substr(0, 200) + '...' : desc,\n      dirty: true\n    });\n    const titleDelta = titleObj.height - oldTitleHeight;\n    const authorDelta = authorObj.height - oldAuthorHeight;\n    const descDelta = descObj.height - oldDescHeight;\n    authorObj.set({\n      top: authorObj.top + titleDelta,\n      dirty: true\n    });\n    descObj.set({\n      top: descObj.top + titleDelta + authorDelta,\n      dirty: true\n    });\n    upvoteObj.set({\n      top: upvoteObj.top + titleDelta + authorDelta + descDelta,\n      dirty: true\n    });\n    downvoteObj.set({\n      top: downvoteObj.top + titleDelta + authorDelta + descDelta,\n      dirty: true\n    });\n    upvoteCountObj.set({\n      top: upvoteCountObj.top + titleDelta + authorDelta + descDelta,\n      dirty: true\n    });\n    commentObj.set({\n      top: commentObj.top + titleDelta + authorDelta + descDelta,\n      dirty: true\n    });\n    commentCountObj.set({\n      top: commentCountObj.top + titleDelta + authorDelta + descDelta,\n      dirty: true\n    });\n    contentObj.set({\n      height: contentObj.height + titleDelta + descDelta,\n      dirty: true\n    });\n    obj.desc = title;\n    obj.title = desc;\n    obj.dirty = true;\n    obj.addWithUpdate();\n    return obj;\n  }\n  /**\n  Applies a set of attributes to a post depending on which\n    tag is being attached to the post.\n       Attributes can range from changed border width, border color,\n    post color, etc.\n       @param postID the post being tagged\n    @param tag the tag being attached\n    @returns display attributes for post or null if no special features\n    */\n  applyTagFeatures(postID, tag) {\n    if (tag.specialAttributes == null) {\n      return null;\n    }\n    const {\n      borderColor,\n      borderWidth,\n      fillColor,\n      opacity\n    } = tag.specialAttributes;\n    let fabricPost = this.getObjectFromId(postID);\n    if (fabricPost) {\n      fabricPost = this.setBorderColor(fabricPost, borderColor);\n      fabricPost = this.setBorderThickness(fabricPost, borderWidth);\n      fabricPost = this.setFillColor(fabricPost, fillColor);\n      fabricPost = this.setOpacity(fabricPost, opacity);\n      this._canvas.requestRenderAll();\n    }\n    return Object.assign({}, borderColor === null ? null : {\n      borderColor\n    }, borderWidth === null ? null : {\n      borderWidth\n    }, fillColor === null ? null : {\n      fillColor\n    }, opacity === null ? null : {\n      opacity\n    });\n  }\n  /**\n  Resets display attributes of a post to its default values.\n       Attributes that are reset can range from changed border width,\n  border color,  post color, etc.\n       @param postID the post being tagged\n    @returns display attributes for post\n    */\n  resetTagFeatures(postID) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let fabricPost = _this.getObjectFromId(postID);\n      const fill = yield _this.defaultPostColor(fabricPost.userID);\n      if (fabricPost) {\n        fabricPost = _this.setBorderColor(fabricPost, POST_DEFAULT_BORDER);\n        fabricPost = _this.setBorderThickness(fabricPost, POST_DEFAULT_BORDER_THICKNESS);\n        fabricPost = _this.setFillColor(fabricPost, fill);\n        fabricPost = _this.setOpacity(fabricPost, POST_DEFAULT_OPACITY);\n        _this._canvas.requestRenderAll();\n      }\n      return {\n        borderColor: POST_DEFAULT_BORDER,\n        borderWidth: POST_DEFAULT_BORDER_THICKNESS,\n        fillColor: fill,\n        opacity: POST_DEFAULT_OPACITY\n      };\n    })();\n  }\n  /**\n  Sets the number of upvotes on a fabric post.\n       When going from n-digit -> (n+1)-digit upvotes, the\n  button position will be adjusted to accomodate for extra space.\n       @param fabricObject the post\n  @param amount new amount of upvotes\n    @returns updated fabric post\n    */\n  setUpvoteCount(fabricObject, amount) {\n    const upvoteCount = this.getChildFromGroup(fabricObject, 'upvoteCount');\n    const downvote = this.getChildFromGroup(fabricObject, 'downvote');\n    const prevAmountDigits = upvoteCount.text.length;\n    const amountDigits = numDigits(amount);\n    const left = downvote.left + (amountDigits - prevAmountDigits) * 9;\n    upvoteCount.set({\n      text: amount.toString(),\n      dirty: true\n    });\n    downvote.set({\n      left,\n      dirty: true\n    });\n    fabricObject.dirty = true;\n    fabricObject.addWithUpdate();\n    return fabricObject;\n  }\n  /**\n  Sets the number of comments on a fabric post.\n       @param fabricObj the post\n  @param amount new amount of comments\n    @returns updated fabric post\n    */\n  setCommentCount(fabricObj, amount) {\n    const comment = this.getChildFromGroup(fabricObj, 'comment');\n    const commentCount = this.getChildFromGroup(fabricObj, 'commentCount');\n    commentCount?.set({\n      text: amount.toString(),\n      dirty: true\n    });\n    if (amount >= 1) {\n      commentCount?.set({\n        opacity: 1,\n        dirty: true\n      });\n      comment?.set({\n        opacity: 1,\n        dirty: true\n      });\n    } else {\n      commentCount?.set({\n        opacity: 0,\n        dirty: true\n      });\n      comment?.set({\n        opacity: 0,\n        dirty: true\n      });\n    }\n    fabricObj.dirty = true;\n    fabricObj.addWithUpdate();\n    return fabricObj;\n  }\n  createImageSettings(image) {\n    const dimensions = this._calcCanvasDimensions();\n    const scale = this._scaleImage(image, dimensions);\n    const offset = this._calcImageOffsets(image, scale, dimensions);\n    return {\n      top: offset.offsetY,\n      left: offset.offsetX,\n      width: image.width,\n      height: image.height,\n      scaleX: scale.scaleX,\n      scaleY: scale.scaleY\n    };\n  }\n  animateToPosition(object, left, top, callback) {\n    object.animate({\n      left,\n      top\n    }, {\n      onChange: this._canvas.renderAll.bind(this._canvas),\n      duration: 1000,\n      onComplete: callback\n    });\n  }\n  setPostMovement(object, lock) {\n    object = object.set('lockMovementX', lock);\n    object = object.set('lockMovementY', lock);\n    return object;\n  }\n  setBackgroundImage(image, settings) {\n    if (image == null) {\n      image = new fabric.Image('');\n    }\n    this._canvas.setBackgroundImage(image, this._canvas.renderAll.bind(this._canvas), settings);\n  }\n  /**\n   * Returns designated post color for users depending on their role.\n   *\n   * @param userID id of user\n   * @returns color as string\n   */\n  defaultPostColor(userID) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const user = yield _this2.userService.getOneById(userID);\n      return user.role === Role.TEACHER ? TEACHER_POST_COLOR : STUDENT_POST_COLOR;\n    })();\n  }\n  /**\n   * Calculates the height and width of canvas.\n   *\n   * @returns dimensions of canvas\n   */\n  _calcCanvasDimensions() {\n    if (!this._canvas) {\n      return {\n        width: window.innerWidth,\n        height: window.innerHeight - 64\n      };\n    }\n    const vptCoords = this._canvas.vptCoords;\n    let width = this._canvas.getWidth();\n    let height = this._canvas.getHeight();\n    if (vptCoords) {\n      width = Math.abs(vptCoords.tr.x - vptCoords.tl.x);\n      height = Math.abs(vptCoords.br.y - vptCoords.tr.y);\n    }\n    return {\n      width,\n      height\n    };\n  }\n  /**\n   * Scales an image to appropriately fit canvas dimensions.\n   * Scales both width and height by smaller of two scales.\n   *\n   * Ex:\n   * image.width = 16\n   * image.height = 9\n   * scaleX = 2/16 = 1/8, scaleY = 2/9\n   * scaleX = 16/8 = 2, scaleY = 9/8 = 1.125\n   *\n   * @param image image to be scaled\n   * @param dimensions dimensions of canvas\n   * @returns x and y scaling amounts\n   */\n  _scaleImage(image, dimensions) {\n    let scaleX = dimensions.width / (image.width ?? 1);\n    let scaleY = dimensions.height / (image.height ?? 1);\n    if (scaleX <= scaleY) {\n      scaleY = scaleX;\n    } else {\n      scaleX = scaleY;\n    }\n    return {\n      scaleX,\n      scaleY\n    };\n  }\n  /**\n   * Calculates vertical and horizontal offsets for image to be centered\n   * across canvas.\n   *\n   * @param image image to be centered\n   * @param scale vertical and horizontal scaling of image\n   * @param dimensions dimensions of canvas\n   * @returns horizontal and vertical offsets\n   */\n  _calcImageOffsets(image, scale, dimensions) {\n    const offsetX = Math.floor((dimensions.width - scale.scaleX * image.width) / 2);\n    const offsetY = Math.floor((dimensions.height - scale.scaleY * image.height) / 2);\n    const vptCoords = this._canvas?.vptCoords;\n    if (vptCoords) {\n      return {\n        offsetX: offsetX + vptCoords.tl.x,\n        offsetY: offsetY + vptCoords?.tl.y\n      };\n    }\n    return {\n      offsetX,\n      offsetY\n    };\n  }\n  static ɵfac = function FabricUtils_Factory(t) {\n    return new (t || FabricUtils)(i0.ɵɵinject(i1.UserService));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FabricUtils,\n    factory: FabricUtils.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AACA,SAASA,MAAM,QAAQ,QAAQ;AAG/B,SAASC,IAAI,QAAQ,gBAAgB;AAErC,SACEC,YAAY,EACZC,mBAAmB,EACnBC,6BAA6B,EAC7BC,oBAAoB,EACpBC,kBAAkB,EAClBC,kBAAkB,QACb,aAAa;AACpB,SAASC,SAAS,EAAEC,gBAAgB,QAAQ,SAAS;;;AA2BrD,OAAM,MAAOC,WAAW;EACFC;EAApBC,YAAoBD,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CE,OAAO;EAEPC,YAAY,GAAG;IACbC,KAAK,EAAEC,MAAM,CAACC,UAAU;IACxBC,MAAM,EAAEF,MAAM,CAACG,WAAW,GAAG,EAAE;IAC/BC,cAAc,EAAE,IAAI;IACpBC,eAAe,EAAE;GAClB;EAEDC,oBAAoB,GAAG;IACrBP,KAAK,EAAEC,MAAM,CAACC,UAAU;IACxBC,MAAM,EAAEF,MAAM,CAACG,WAAW;IAC1BC,cAAc,EAAE,IAAI;IACpBC,eAAe,EAAE;GAClB;EAED,IAAWE,MAAM,CAACC,OAAsB;IACtC,IAAI,CAACX,OAAO,GAAGW,OAAO;EACxB;EAEAC,QAAQ,CAACC,GAAG,EAAEC,GAAG,EAAEC,KAAK;IACtBF,GAAG,CAACG,GAAG,CAACF,GAAG,EAAEC,KAAK,CAAC;IACnB5B,MAAM,CAAC8B,IAAI,CAACC,MAAM,CAACC,MAAM,CAACN,GAAG,EAAE;MAAE,CAACC,GAAG,GAAGC;IAAK,CAAE,CAAC;IAChD,OAAOF,GAAG;EACZ;EAEAO,eAAe,CAACC,MAAc;IAC5B,IAAI,CAAC,IAAI,CAACrB,OAAO,EAAE,OAAO,IAAI;IAE9B,MAAMsB,cAAc,GAAU,IAAI,CAACtB,OAAO,CAACuB,UAAU,EAAE;IAEvD,KAAK,IAAIC,CAAC,GAAGF,cAAc,CAACG,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACnD,IAAIF,cAAc,CAACE,CAAC,CAAC,CAACH,MAAM,IAAIA,MAAM,EAAE,OAAOC,cAAc,CAACE,CAAC,CAAC;;IAGlE,OAAO,IAAI;EACb;EAEAE,sBAAsB,CAACC,OAAe;IACpC,OAAOtC,YAAY,CAACuC,GAAG,CAAEC,GAAG,IAAI;MAC9B,MAAMC,OAAO,GAAQ;QACnBH,OAAO;QACPI,KAAK,EAAEnC,gBAAgB,EAAE;QACzBoC,IAAI,EAAEH,GAAG,CAACG,IAAK;QACfC,KAAK,EAAEJ,GAAG,CAACI,KAAM;QACjBC,iBAAiB,EAAEL,GAAG,CAACK;OACxB;MAED,OAAOJ,OAAO;IAChB,CAAC,CAAC;EACJ;EAEAK,iBAAiB,CAACC,KAAyB,EAAEC,KAAa;IACxD,IAAID,KAAK,YAAYjD,MAAM,CAACmD,KAAK,EAAE;MACjC,MAAMC,QAAQ,GAAGH,KAAK,CAACb,UAAU,EAAE,CAACiB,IAAI,CAAE3B,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAIK,KAAK,CAAC;MACpE,OAAOE,QAAQ;KAChB,MAAM;MACL,MAAMA,QAAQ,GAAGH,KAAK,EAAEK,OAAO,CAACD,IAAI,CAAE3B,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAIK,KAAK,CAAC;MAChE,OAAOE,QAAQ;;EAEnB;EAEAG,cAAc,CAACC,QAAsB,EAAEV,KAAyB;IAC9D,IAAIA,KAAK,IAAI,IAAI,EAAE,OAAOU,QAAQ;IAElC,MAAMC,OAAO,GAAG,IAAI,CAACT,iBAAiB,CAACQ,QAAQ,EAAE,SAAS,CAAC;IAE3D,IAAIC,OAAO,EAAE;MACXA,OAAO,CAAC5B,GAAG,CAAC;QAAE6B,MAAM,EAAEZ,KAAK;QAAEa,KAAK,EAAE;MAAI,CAAE,CAAC;;IAG7CH,QAAQ,CAACG,KAAK,GAAG,IAAI;IACrBH,QAAQ,CAACI,aAAa,EAAE;IACxB,OAAOJ,QAAQ;EACjB;EAEAK,kBAAkB,CAACL,QAAsB,EAAEM,SAA6B;IACtE,IAAIA,SAAS,IAAI,IAAI,EAAE,OAAON,QAAQ;IAEtC,MAAMC,OAAO,GAAG,IAAI,CAACT,iBAAiB,CAACQ,QAAQ,EAAE,SAAS,CAAC;IAE3D,IAAIC,OAAO,EAAE;MACXA,OAAO,CAAC5B,GAAG,CAAC;QAAEkC,WAAW,EAAED,SAAS;QAAEH,KAAK,EAAE;MAAI,CAAE,CAAC;;IAGtDH,QAAQ,CAACG,KAAK,GAAG,IAAI;IACrBH,QAAQ,CAACI,aAAa,EAAE;IACxB,OAAOJ,QAAQ;EACjB;EAEAQ,YAAY,CAACR,QAAsB,EAAEV,KAAyB;IAC5D,IAAIA,KAAK,IAAI,IAAI,EAAE,OAAOU,QAAQ;IAElC,MAAMC,OAAO,GAAG,IAAI,CAACT,iBAAiB,CAACQ,QAAQ,EAAE,SAAS,CAAC;IAE3D,IAAIC,OAAO,EAAE;MACXA,OAAO,CAAC5B,GAAG,CAAC;QAAEoC,IAAI,EAAEnB,KAAK;QAAEa,KAAK,EAAE;MAAI,CAAE,CAAC;;IAG3CH,QAAQ,CAACG,KAAK,GAAG,IAAI;IACrBH,QAAQ,CAACI,aAAa,EAAE;IACxB,OAAOJ,QAAQ;EACjB;EAEAU,UAAU,CAACV,QAAsB,EAAEW,KAAyB;IAC1D,IAAIA,KAAK,IAAI,IAAI,EAAE,OAAOX,QAAQ;IAElCA,QAAQ,CAAC3B,GAAG,CAAC;MAAEuC,OAAO,EAAED,KAAK;MAAER,KAAK,EAAE;IAAI,CAAE,CAAC;IAC7CH,QAAQ,CAACG,KAAK,GAAG,IAAI;IACrBH,QAAQ,CAACI,aAAa,EAAE;IACxB,OAAOJ,QAAQ;EACjB;EAEA;;;;;;;EAQAa,YAAY,CAAC3C,GAAQ,EAAE4C,MAAc;IACnC,MAAMC,QAAQ,GAAoB7C,GAAG,CAACU,UAAU,EAAE;IAClD,MAAMoC,SAAS,GAAQD,QAAQ,CAACE,MAAM,CAAE/C,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAI,QAAQ,CAAC,CAAC6B,GAAG,EAAE;IAC3E,MAAMC,OAAO,GAAQJ,QAAQ,CAACE,MAAM,CAAE/C,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAI,MAAM,CAAC,CAAC6B,GAAG,EAAE;IACvE,MAAME,SAAS,GAAQL,QAAQ,CAACE,MAAM,CAAE/C,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAI,QAAQ,CAAC,CAAC6B,GAAG,EAAE;IAC3E,MAAMG,WAAW,GAAQN,QAAQ,CAC9BE,MAAM,CAAE/C,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAI,UAAU,CAAC,CACvC6B,GAAG,EAAE;IACR,MAAMI,cAAc,GAAQP,QAAQ,CACjCE,MAAM,CAAE/C,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAI,aAAa,CAAC,CAC1C6B,GAAG,EAAE;IACR,MAAMK,UAAU,GAAQR,QAAQ,CAC7BE,MAAM,CAAE/C,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAI,SAAS,CAAC,CACtC6B,GAAG,EAAE;IACR,MAAMM,eAAe,GAAQT,QAAQ,CAClCE,MAAM,CAAE/C,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAI,cAAc,CAAC,CAC3C6B,GAAG,EAAE;IACR,MAAMO,UAAU,GAAQV,QAAQ,CAC7BE,MAAM,CAAE/C,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAI,SAAS,CAAC,CACtC6B,GAAG,EAAE;IAER,MAAMQ,eAAe,GAAGV,SAAS,CAACtD,MAAM;IAExCsD,SAAS,CAAC3C,GAAG,CAAC;MAAEsD,IAAI,EAAEb,MAAM;MAAEX,KAAK,EAAE;IAAI,CAAE,CAAC;IAE5C,MAAMyB,WAAW,GAAGZ,SAAS,CAACtD,MAAM,GAAGgE,eAAe;IAEtDP,OAAO,CAAC9C,GAAG,CAAC;MAAEwD,GAAG,EAAEV,OAAO,CAACU,GAAG,GAAGD,WAAW;MAAEzB,KAAK,EAAE;IAAI,CAAE,CAAC;IAC5DiB,SAAS,CAAC/C,GAAG,CAAC;MAAEwD,GAAG,EAAET,SAAS,CAACS,GAAG,GAAGD,WAAW;MAAEzB,KAAK,EAAE;IAAI,CAAE,CAAC;IAChEkB,WAAW,CAAChD,GAAG,CAAC;MAAEwD,GAAG,EAAER,WAAW,CAACQ,GAAG,GAAGD,WAAW;MAAEzB,KAAK,EAAE;IAAI,CAAE,CAAC;IACpEmB,cAAc,CAACjD,GAAG,CAAC;MAAEwD,GAAG,EAAEP,cAAc,CAACO,GAAG,GAAGD,WAAW;MAAEzB,KAAK,EAAE;IAAI,CAAE,CAAC;IAC1EoB,UAAU,CAAClD,GAAG,CAAC;MAAEwD,GAAG,EAAEN,UAAU,CAACM,GAAG,GAAGD,WAAW;MAAEzB,KAAK,EAAE;IAAI,CAAE,CAAC;IAClEqB,eAAe,CAACnD,GAAG,CAAC;MAClBwD,GAAG,EAAEL,eAAe,CAACK,GAAG,GAAGD,WAAW;MACtCzB,KAAK,EAAE;KACR,CAAC;IACFsB,UAAU,CAACpD,GAAG,CAAC;MAAEX,MAAM,EAAE+D,UAAU,CAAC/D,MAAM;MAAEyC,KAAK,EAAE;IAAI,CAAE,CAAC;IAE1DjC,GAAG,CAACiC,KAAK,GAAG,IAAI;IAChBjC,GAAG,CAACkC,aAAa,EAAE;IACnB,OAAOlC,GAAG;EACZ;EAEA;;;;;;;;EASA4D,mBAAmB,CAAC5D,GAAQ,EAAE6D,KAAa,EAAEC,IAAY;IACvD,MAAMjB,QAAQ,GAAoB7C,GAAG,CAACU,UAAU,EAAE;IAClD,MAAMqD,QAAQ,GAAQlB,QAAQ,CAACE,MAAM,CAAE/C,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAI,OAAO,CAAC,CAAC6B,GAAG,EAAE;IACzE,MAAMF,SAAS,GAAQD,QAAQ,CAACE,MAAM,CAAE/C,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAI,QAAQ,CAAC,CAAC6B,GAAG,EAAE;IAC3E,MAAMC,OAAO,GAAQJ,QAAQ,CAACE,MAAM,CAAE/C,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAI,MAAM,CAAC,CAAC6B,GAAG,EAAE;IACvE,MAAME,SAAS,GAAQL,QAAQ,CAACE,MAAM,CAAE/C,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAI,QAAQ,CAAC,CAAC6B,GAAG,EAAE;IAC3E,MAAMG,WAAW,GAAQN,QAAQ,CAC9BE,MAAM,CAAE/C,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAI,UAAU,CAAC,CACvC6B,GAAG,EAAE;IACR,MAAMI,cAAc,GAAQP,QAAQ,CACjCE,MAAM,CAAE/C,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAI,aAAa,CAAC,CAC1C6B,GAAG,EAAE;IACR,MAAMK,UAAU,GAAQR,QAAQ,CAC7BE,MAAM,CAAE/C,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAI,SAAS,CAAC,CACtC6B,GAAG,EAAE;IACR,MAAMM,eAAe,GAAQT,QAAQ,CAClCE,MAAM,CAAE/C,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAI,cAAc,CAAC,CAC3C6B,GAAG,EAAE;IACR,MAAMO,UAAU,GAAQV,QAAQ,CAC7BE,MAAM,CAAE/C,GAAG,IAAKA,GAAG,CAACmB,IAAI,IAAI,SAAS,CAAC,CACtC6B,GAAG,EAAE;IAER,MAAMgB,cAAc,GAAGD,QAAQ,CAACvE,MAAM;IACtC,MAAMyE,aAAa,GAAGhB,OAAO,CAACzD,MAAM;IACpC,MAAMgE,eAAe,GAAGV,SAAS,CAACtD,MAAM;IAExCuE,QAAQ,CAAC5D,GAAG,CAAC;MAAEsD,IAAI,EAAEI,KAAK;MAAE5B,KAAK,EAAE;IAAI,CAAE,CAAC;IAC1CgB,OAAO,CAAC9C,GAAG,CAAC;MACVsD,IAAI,EAAEK,IAAI,CAAClD,MAAM,GAAG,GAAG,GAAGkD,IAAI,CAACI,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,GAAGJ,IAAI;MAC5D7B,KAAK,EAAE;KACR,CAAC;IAEF,MAAMkC,UAAU,GAAGJ,QAAQ,CAACvE,MAAM,GAAGwE,cAAc;IACnD,MAAMN,WAAW,GAAGZ,SAAS,CAACtD,MAAM,GAAGgE,eAAe;IACtD,MAAMY,SAAS,GAAGnB,OAAO,CAACzD,MAAM,GAAGyE,aAAa;IAEhDnB,SAAS,CAAC3C,GAAG,CAAC;MAAEwD,GAAG,EAAEb,SAAS,CAACa,GAAG,GAAGQ,UAAU;MAAElC,KAAK,EAAE;IAAI,CAAE,CAAC;IAC/DgB,OAAO,CAAC9C,GAAG,CAAC;MAAEwD,GAAG,EAAEV,OAAO,CAACU,GAAG,GAAGQ,UAAU,GAAGT,WAAW;MAAEzB,KAAK,EAAE;IAAI,CAAE,CAAC;IACzEiB,SAAS,CAAC/C,GAAG,CAAC;MACZwD,GAAG,EAAET,SAAS,CAACS,GAAG,GAAGQ,UAAU,GAAGT,WAAW,GAAGU,SAAS;MACzDnC,KAAK,EAAE;KACR,CAAC;IACFkB,WAAW,CAAChD,GAAG,CAAC;MACdwD,GAAG,EAAER,WAAW,CAACQ,GAAG,GAAGQ,UAAU,GAAGT,WAAW,GAAGU,SAAS;MAC3DnC,KAAK,EAAE;KACR,CAAC;IACFmB,cAAc,CAACjD,GAAG,CAAC;MACjBwD,GAAG,EAAEP,cAAc,CAACO,GAAG,GAAGQ,UAAU,GAAGT,WAAW,GAAGU,SAAS;MAC9DnC,KAAK,EAAE;KACR,CAAC;IACFoB,UAAU,CAAClD,GAAG,CAAC;MACbwD,GAAG,EAAEN,UAAU,CAACM,GAAG,GAAGQ,UAAU,GAAGT,WAAW,GAAGU,SAAS;MAC1DnC,KAAK,EAAE;KACR,CAAC;IACFqB,eAAe,CAACnD,GAAG,CAAC;MAClBwD,GAAG,EAAEL,eAAe,CAACK,GAAG,GAAGQ,UAAU,GAAGT,WAAW,GAAGU,SAAS;MAC/DnC,KAAK,EAAE;KACR,CAAC;IACFsB,UAAU,CAACpD,GAAG,CAAC;MACbX,MAAM,EAAE+D,UAAU,CAAC/D,MAAM,GAAG2E,UAAU,GAAGC,SAAS;MAClDnC,KAAK,EAAE;KACR,CAAC;IAEFjC,GAAG,CAAC8D,IAAI,GAAGD,KAAK;IAChB7D,GAAG,CAAC6D,KAAK,GAAGC,IAAI;IAChB9D,GAAG,CAACiC,KAAK,GAAG,IAAI;IAChBjC,GAAG,CAACkC,aAAa,EAAE;IACnB,OAAOlC,GAAG;EACZ;EAEA;;;;;;;;;EAWAqE,gBAAgB,CAAC7D,MAAc,EAAEQ,GAAQ;IACvC,IAAIA,GAAG,CAACK,iBAAiB,IAAI,IAAI,EAAE;MACjC,OAAO,IAAI;;IAGb,MAAM;MAAEiD,WAAW;MAAEC,WAAW;MAAEC,SAAS;MAAE9B;IAAO,CAAE,GACpD1B,GAAG,CAACK,iBAAiB;IAEvB,IAAIoD,UAAU,GAAG,IAAI,CAAClE,eAAe,CAACC,MAAM,CAAC;IAC7C,IAAIiE,UAAU,EAAE;MACdA,UAAU,GAAG,IAAI,CAAC5C,cAAc,CAAC4C,UAAU,EAAEH,WAAW,CAAC;MACzDG,UAAU,GAAG,IAAI,CAACtC,kBAAkB,CAACsC,UAAU,EAAEF,WAAW,CAAC;MAC7DE,UAAU,GAAG,IAAI,CAACnC,YAAY,CAACmC,UAAU,EAAED,SAAS,CAAC;MACrDC,UAAU,GAAG,IAAI,CAACjC,UAAU,CAACiC,UAAU,EAAE/B,OAAO,CAAC;MACjD,IAAI,CAACvD,OAAO,CAACuF,gBAAgB,EAAE;;IAGjC,OAAOC,MAAM,CAACC,MAAM,CAClB,EAAE,EACFN,WAAW,KAAK,IAAI,GAAG,IAAI,GAAG;MAAEA;IAAW,CAAE,EAC7CC,WAAW,KAAK,IAAI,GAAG,IAAI,GAAG;MAAEA;IAAW,CAAE,EAC7CC,SAAS,KAAK,IAAI,GAAG,IAAI,GAAG;MAAEA;IAAS,CAAE,EACzC9B,OAAO,KAAK,IAAI,GAAG,IAAI,GAAG;MAAEA;IAAO,CAAE,CACtC;EACH;EAEA;;;;;;;EASMmC,gBAAgB,CAACrE,MAAc;IAAA;IAAA;MACnC,IAAIiE,UAAU,GAAG,KAAI,CAAClE,eAAe,CAACC,MAAM,CAAC;MAC7C,MAAM+B,IAAI,SAAS,KAAI,CAACuC,gBAAgB,CAACL,UAAU,CAACM,MAAM,CAAC;MAC3D,IAAIN,UAAU,EAAE;QACdA,UAAU,GAAG,KAAI,CAAC5C,cAAc,CAAC4C,UAAU,EAAEhG,mBAAmB,CAAC;QACjEgG,UAAU,GAAG,KAAI,CAACtC,kBAAkB,CAClCsC,UAAU,EACV/F,6BAA6B,CAC9B;QACD+F,UAAU,GAAG,KAAI,CAACnC,YAAY,CAACmC,UAAU,EAAElC,IAAI,CAAC;QAChDkC,UAAU,GAAG,KAAI,CAACjC,UAAU,CAACiC,UAAU,EAAE9F,oBAAoB,CAAC;QAC9D,KAAI,CAACQ,OAAO,CAACuF,gBAAgB,EAAE;;MAGjC,OAAO;QACLJ,WAAW,EAAE7F,mBAAmB;QAChC8F,WAAW,EAAE7F,6BAA6B;QAC1C8F,SAAS,EAAEjC,IAAI;QACfG,OAAO,EAAE/D;OACV;IAAC;EACJ;EAEA;;;;;;;;EAUAqG,cAAc,CAACC,YAA0B,EAAEC,MAAc;IACvD,MAAMC,WAAW,GAAQ,IAAI,CAAC7D,iBAAiB,CAC7C2D,YAAY,EACZ,aAAa,CACd;IACD,MAAMG,QAAQ,GAAQ,IAAI,CAAC9D,iBAAiB,CAAC2D,YAAY,EAAE,UAAU,CAAC;IAEtE,MAAMI,gBAAgB,GAAGF,WAAW,CAAC1B,IAAI,CAAC7C,MAAM;IAChD,MAAM0E,YAAY,GAAGxG,SAAS,CAACoG,MAAM,CAAC;IACtC,MAAMK,IAAI,GAAGH,QAAQ,CAACG,IAAI,GAAG,CAACD,YAAY,GAAGD,gBAAgB,IAAI,CAAC;IAElEF,WAAW,CAAChF,GAAG,CAAC;MAAEsD,IAAI,EAAEyB,MAAM,CAACM,QAAQ,EAAE;MAAEvD,KAAK,EAAE;IAAI,CAAE,CAAC;IACzDmD,QAAQ,CAACjF,GAAG,CAAC;MAAEoF,IAAI;MAAEtD,KAAK,EAAE;IAAI,CAAE,CAAC;IAEnCgD,YAAY,CAAChD,KAAK,GAAG,IAAI;IACzBgD,YAAY,CAAC/C,aAAa,EAAE;IAC5B,OAAO+C,YAAY;EACrB;EAEA;;;;;;EAOAQ,eAAe,CAACC,SAAuB,EAAER,MAAc;IACrD,MAAMS,OAAO,GAAQ,IAAI,CAACrE,iBAAiB,CAACoE,SAAS,EAAE,SAAS,CAAC;IACjE,MAAME,YAAY,GAAQ,IAAI,CAACtE,iBAAiB,CAACoE,SAAS,EAAE,cAAc,CAAC;IAE3EE,YAAY,EAAEzF,GAAG,CAAC;MAAEsD,IAAI,EAAEyB,MAAM,CAACM,QAAQ,EAAE;MAAEvD,KAAK,EAAE;IAAI,CAAE,CAAC;IAE3D,IAAIiD,MAAM,IAAI,CAAC,EAAE;MACfU,YAAY,EAAEzF,GAAG,CAAC;QAAEuC,OAAO,EAAE,CAAC;QAAET,KAAK,EAAE;MAAI,CAAE,CAAC;MAC9C0D,OAAO,EAAExF,GAAG,CAAC;QAAEuC,OAAO,EAAE,CAAC;QAAET,KAAK,EAAE;MAAI,CAAE,CAAC;KAC1C,MAAM;MACL2D,YAAY,EAAEzF,GAAG,CAAC;QAAEuC,OAAO,EAAE,CAAC;QAAET,KAAK,EAAE;MAAI,CAAE,CAAC;MAC9C0D,OAAO,EAAExF,GAAG,CAAC;QAAEuC,OAAO,EAAE,CAAC;QAAET,KAAK,EAAE;MAAI,CAAE,CAAC;;IAG3CyD,SAAS,CAACzD,KAAK,GAAG,IAAI;IACtByD,SAAS,CAACxD,aAAa,EAAE;IACzB,OAAOwD,SAAS;EAClB;EAEAG,mBAAmB,CAACC,KAAmB;IACrC,MAAMC,UAAU,GAAG,IAAI,CAACC,qBAAqB,EAAE;IAC/C,MAAMC,KAAK,GAAG,IAAI,CAACC,WAAW,CAACJ,KAAK,EAAEC,UAAU,CAAC;IACjD,MAAMI,MAAM,GAAG,IAAI,CAACC,iBAAiB,CAACN,KAAK,EAAEG,KAAK,EAAEF,UAAU,CAAC;IAE/D,OAAO;MACLpC,GAAG,EAAEwC,MAAM,CAACE,OAAO;MACnBd,IAAI,EAAEY,MAAM,CAACG,OAAO;MACpBjH,KAAK,EAAEyG,KAAK,CAACzG,KAAM;MACnBG,MAAM,EAAEsG,KAAK,CAACtG,MAAO;MACrB+G,MAAM,EAAEN,KAAK,CAACM,MAAM;MACpBC,MAAM,EAAEP,KAAK,CAACO;KACf;EACH;EAEAC,iBAAiB,CACfpG,MAAqB,EACrBkF,IAAY,EACZ5B,GAAW,EACX+C,QAAkB;IAElBrG,MAAM,CAACsG,OAAO,CACZ;MAAEpB,IAAI;MAAE5B;IAAG,CAAE,EACb;MACEiD,QAAQ,EAAE,IAAI,CAACzH,OAAO,CAAC0H,SAAS,CAACC,IAAI,CAAC,IAAI,CAAC3H,OAAO,CAAC;MACnD4H,QAAQ,EAAE,IAAI;MACdC,UAAU,EAAEN;KACb,CACF;EACH;EAEAO,eAAe,CAAC5G,MAAW,EAAE6G,IAAa;IACxC7G,MAAM,GAAGA,MAAM,CAACF,GAAG,CAAC,eAAe,EAAE+G,IAAI,CAAC;IAC1C7G,MAAM,GAAGA,MAAM,CAACF,GAAG,CAAC,eAAe,EAAE+G,IAAI,CAAC;IAC1C,OAAO7G,MAAM;EACf;EAEA8G,kBAAkB,CAACrB,KAAwC,EAAEsB,QAAc;IACzE,IAAItB,KAAK,IAAI,IAAI,EAAE;MACjBA,KAAK,GAAG,IAAIxH,MAAM,CAAC+I,KAAK,CAAC,EAAE,CAAC;;IAE9B,IAAI,CAAClI,OAAO,CAACgI,kBAAkB,CAC7BrB,KAAK,EACL,IAAI,CAAC3G,OAAO,CAAC0H,SAAS,CAACC,IAAI,CAAC,IAAI,CAAC3H,OAAO,CAAC,EACzCiI,QAAQ,CACT;EACH;EAEA;;;;;;EAMMtC,gBAAgB,CAACC,MAAc;IAAA;IAAA;MACnC,MAAMuC,IAAI,SAAS,MAAI,CAACrI,WAAW,CAACsI,UAAU,CAACxC,MAAM,CAAC;MACtD,OAAOuC,IAAI,CAACE,IAAI,KAAKjJ,IAAI,CAACkJ,OAAO,GAAG5I,kBAAkB,GAAGD,kBAAkB;IAAC;EAC9E;EAEA;;;;;EAKQoH,qBAAqB;IAC3B,IAAI,CAAC,IAAI,CAAC7G,OAAO,EAAE;MACjB,OAAO;QAAEE,KAAK,EAAEC,MAAM,CAACC,UAAU;QAAEC,MAAM,EAAEF,MAAM,CAACG,WAAW,GAAG;MAAE,CAAE;;IAGtE,MAAMiI,SAAS,GAAG,IAAI,CAACvI,OAAO,CAACuI,SAAU;IACzC,IAAIrI,KAAK,GAAG,IAAI,CAACF,OAAO,CAACwI,QAAQ,EAAE;IACnC,IAAInI,MAAM,GAAG,IAAI,CAACL,OAAO,CAACyI,SAAS,EAAE;IAErC,IAAIF,SAAS,EAAE;MACbrI,KAAK,GAAGwI,IAAI,CAACC,GAAG,CAACJ,SAAS,CAACK,EAAE,CAACC,CAAC,GAAGN,SAAS,CAACO,EAAE,CAACD,CAAC,CAAC;MACjDxI,MAAM,GAAGqI,IAAI,CAACC,GAAG,CAACJ,SAAS,CAACQ,EAAE,CAACC,CAAC,GAAGT,SAAS,CAACK,EAAE,CAACI,CAAC,CAAC;;IAGpD,OAAO;MAAE9I,KAAK;MAAEG;IAAM,CAAE;EAC1B;EAEA;;;;;;;;;;;;;;EAcQ0G,WAAW,CACjBJ,KAAmB,EACnBC,UAA4B;IAE5B,IAAIQ,MAAM,GAAGR,UAAU,CAAC1G,KAAK,IAAIyG,KAAK,CAACzG,KAAK,IAAI,CAAC,CAAC;IAClD,IAAImH,MAAM,GAAGT,UAAU,CAACvG,MAAM,IAAIsG,KAAK,CAACtG,MAAM,IAAI,CAAC,CAAC;IAEpD,IAAI+G,MAAM,IAAIC,MAAM,EAAE;MACpBA,MAAM,GAAGD,MAAM;KAChB,MAAM;MACLA,MAAM,GAAGC,MAAM;;IAGjB,OAAO;MAAED,MAAM;MAAEC;IAAM,CAAE;EAC3B;EAEA;;;;;;;;;EASQJ,iBAAiB,CACvBN,KAAmB,EACnBG,KAAiB,EACjBF,UAA4B;IAE5B,MAAMO,OAAO,GAAGuB,IAAI,CAACO,KAAK,CACxB,CAACrC,UAAU,CAAC1G,KAAK,GAAG4G,KAAK,CAACM,MAAM,GAAGT,KAAK,CAACzG,KAAM,IAAI,CAAC,CACrD;IACD,MAAMgH,OAAO,GAAGwB,IAAI,CAACO,KAAK,CACxB,CAACrC,UAAU,CAACvG,MAAM,GAAGyG,KAAK,CAACO,MAAM,GAAGV,KAAK,CAACtG,MAAO,IAAI,CAAC,CACvD;IAED,MAAMkI,SAAS,GAAG,IAAI,CAACvI,OAAO,EAAEuI,SAAS;IACzC,IAAIA,SAAS,EAAE;MACb,OAAO;QACLpB,OAAO,EAAEA,OAAO,GAAGoB,SAAS,CAACO,EAAE,CAACD,CAAC;QACjC3B,OAAO,EAAEA,OAAO,GAAGqB,SAAS,EAAEO,EAAE,CAACE;OAClC;;IAGH,OAAO;MAAE7B,OAAO;MAAED;IAAO,CAAE;EAC7B;;qBA9fWrH,WAAW;EAAA;;WAAXA,WAAW;IAAAqJ,SAAXrJ,WAAW;IAAAsJ,YADE;EAAM","names":["fabric","Role","DEFAULT_TAGS","POST_DEFAULT_BORDER","POST_DEFAULT_BORDER_THICKNESS","POST_DEFAULT_OPACITY","STUDENT_POST_COLOR","TEACHER_POST_COLOR","numDigits","generateUniqueID","FabricUtils","userService","constructor","_canvas","canvasConfig","width","window","innerWidth","height","innerHeight","fireRightClick","stopContextMenu","embeddedCanvasConfig","canvas","surface","setField","obj","key","value","set","util","object","extend","getObjectFromId","postID","currentObjects","getObjects","i","length","getDefaultTagsForBoard","boardID","map","tag","fullTag","tagID","name","color","specialAttributes","getChildFromGroup","group","child","Group","childObj","find","objects","setBorderColor","existing","content","stroke","dirty","addWithUpdate","setBorderThickness","thickness","strokeWidth","setFillColor","fill","setOpacity","level","opacity","updateAuthor","author","children","authorObj","filter","pop","descObj","upvoteObj","downvoteObj","upvoteCountObj","commentObj","commentCountObj","contentObj","oldAuthorHeight","text","authorDelta","top","updatePostTitleDesc","title","desc","titleObj","oldTitleHeight","oldDescHeight","substr","titleDelta","descDelta","applyTagFeatures","borderColor","borderWidth","fillColor","fabricPost","requestRenderAll","Object","assign","resetTagFeatures","defaultPostColor","userID","setUpvoteCount","fabricObject","amount","upvoteCount","downvote","prevAmountDigits","amountDigits","left","toString","setCommentCount","fabricObj","comment","commentCount","createImageSettings","image","dimensions","_calcCanvasDimensions","scale","_scaleImage","offset","_calcImageOffsets","offsetY","offsetX","scaleX","scaleY","animateToPosition","callback","animate","onChange","renderAll","bind","duration","onComplete","setPostMovement","lock","setBackgroundImage","settings","Image","user","getOneById","role","TEACHER","vptCoords","getWidth","getHeight","Math","abs","tr","x","tl","br","y","floor","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/utils/FabricUtils.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { fabric } from 'fabric';\nimport { DisplayAttributes } from '../models/post';\nimport { Tag } from '../models/tag';\nimport { Role } from '../models/user';\nimport { UserService } from '../services/user.service';\nimport {\n  DEFAULT_TAGS,\n  POST_DEFAULT_BORDER,\n  POST_DEFAULT_BORDER_THICKNESS,\n  POST_DEFAULT_OPACITY,\n  STUDENT_POST_COLOR,\n  TEACHER_POST_COLOR,\n} from './constants';\nimport { numDigits, generateUniqueID } from './Utils';\n\nexport interface ImageSettings {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n  scaleX: number;\n  scaleY: number;\n}\n\nexport interface CanvasDimensions {\n  width: number;\n  height: number;\n}\n\nexport interface ImageScale {\n  scaleX: number;\n  scaleY: number;\n}\n\nexport interface ImageOffset {\n  offsetX: number;\n  offsetY: number;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class FabricUtils {\n  constructor(private userService: UserService) {}\n\n  _canvas: fabric.Canvas;\n\n  canvasConfig = {\n    width: window.innerWidth,\n    height: window.innerHeight - 64,\n    fireRightClick: true,\n    stopContextMenu: true,\n  };\n\n  embeddedCanvasConfig = {\n    width: window.innerWidth,\n    height: window.innerHeight,\n    fireRightClick: true,\n    stopContextMenu: true,\n  };\n\n  public set canvas(surface: fabric.Canvas) {\n    this._canvas = surface;\n  }\n\n  setField(obj, key, value) {\n    obj.set(key, value);\n    fabric.util.object.extend(obj, { [key]: value });\n    return obj;\n  }\n\n  getObjectFromId(postID: string) {\n    if (!this._canvas) return null;\n\n    const currentObjects: any[] = this._canvas.getObjects();\n\n    for (let i = currentObjects.length - 1; i >= 0; i--) {\n      if (currentObjects[i].postID == postID) return currentObjects[i];\n    }\n\n    return null;\n  }\n\n  getDefaultTagsForBoard(boardID: string): Tag[] {\n    return DEFAULT_TAGS.map((tag) => {\n      const fullTag: Tag = {\n        boardID,\n        tagID: generateUniqueID(),\n        name: tag.name!,\n        color: tag.color!,\n        specialAttributes: tag.specialAttributes,\n      };\n\n      return fullTag;\n    });\n  }\n\n  getChildFromGroup(group: fabric.Group | any, child: string) {\n    if (group instanceof fabric.Group) {\n      const childObj = group.getObjects().find((obj) => obj.name == child);\n      return childObj;\n    } else {\n      const childObj = group?.objects.find((obj) => obj.name == child);\n      return childObj;\n    }\n  }\n\n  setBorderColor(existing: fabric.Group, color: string | undefined) {\n    if (color == null) return existing;\n\n    const content = this.getChildFromGroup(existing, 'content');\n\n    if (content) {\n      content.set({ stroke: color, dirty: true });\n    }\n\n    existing.dirty = true;\n    existing.addWithUpdate();\n    return existing;\n  }\n\n  setBorderThickness(existing: fabric.Group, thickness: number | undefined) {\n    if (thickness == null) return existing;\n\n    const content = this.getChildFromGroup(existing, 'content');\n\n    if (content) {\n      content.set({ strokeWidth: thickness, dirty: true });\n    }\n\n    existing.dirty = true;\n    existing.addWithUpdate();\n    return existing;\n  }\n\n  setFillColor(existing: fabric.Group, color: string | undefined) {\n    if (color == null) return existing;\n\n    const content = this.getChildFromGroup(existing, 'content');\n\n    if (content) {\n      content.set({ fill: color, dirty: true });\n    }\n\n    existing.dirty = true;\n    existing.addWithUpdate();\n    return existing;\n  }\n\n  setOpacity(existing: fabric.Group, level: number | undefined) {\n    if (level == null) return existing;\n\n    existing.set({ opacity: level, dirty: true });\n    existing.dirty = true;\n    existing.addWithUpdate();\n    return existing;\n  }\n\n  /** \n  Updates the position and formatting of a fabric post\n  after the author name is changed.\n\n\t@param obj the fabric post being updated\n  @param author new author name \n\t@returns updated fabric post\n\t*/\n  updateAuthor(obj: any, author: string) {\n    const children: fabric.Object[] = obj.getObjects();\n    const authorObj: any = children.filter((obj) => obj.name == 'author').pop();\n    const descObj: any = children.filter((obj) => obj.name == 'desc').pop();\n    const upvoteObj: any = children.filter((obj) => obj.name == 'upvote').pop();\n    const downvoteObj: any = children\n      .filter((obj) => obj.name == 'downvote')\n      .pop();\n    const upvoteCountObj: any = children\n      .filter((obj) => obj.name == 'upvoteCount')\n      .pop();\n    const commentObj: any = children\n      .filter((obj) => obj.name == 'comment')\n      .pop();\n    const commentCountObj: any = children\n      .filter((obj) => obj.name == 'commentCount')\n      .pop();\n    const contentObj: any = children\n      .filter((obj) => obj.name == 'content')\n      .pop();\n\n    const oldAuthorHeight = authorObj.height;\n\n    authorObj.set({ text: author, dirty: true });\n\n    const authorDelta = authorObj.height - oldAuthorHeight;\n\n    descObj.set({ top: descObj.top + authorDelta, dirty: true });\n    upvoteObj.set({ top: upvoteObj.top + authorDelta, dirty: true });\n    downvoteObj.set({ top: downvoteObj.top + authorDelta, dirty: true });\n    upvoteCountObj.set({ top: upvoteCountObj.top + authorDelta, dirty: true });\n    commentObj.set({ top: commentObj.top + authorDelta, dirty: true });\n    commentCountObj.set({\n      top: commentCountObj.top + authorDelta,\n      dirty: true,\n    });\n    contentObj.set({ height: contentObj.height, dirty: true });\n\n    obj.dirty = true;\n    obj.addWithUpdate();\n    return obj;\n  }\n\n  /** \n  Updates the position and formatting of a fabric post\n  after the title or description is changed.\n\n\t@param obj the fabric post being updated\n  @param title new title \n  @param desc new desc\n\t@returns updated fabric post\n\t*/\n  updatePostTitleDesc(obj: any, title: string, desc: string) {\n    const children: fabric.Object[] = obj.getObjects();\n    const titleObj: any = children.filter((obj) => obj.name == 'title').pop();\n    const authorObj: any = children.filter((obj) => obj.name == 'author').pop();\n    const descObj: any = children.filter((obj) => obj.name == 'desc').pop();\n    const upvoteObj: any = children.filter((obj) => obj.name == 'upvote').pop();\n    const downvoteObj: any = children\n      .filter((obj) => obj.name == 'downvote')\n      .pop();\n    const upvoteCountObj: any = children\n      .filter((obj) => obj.name == 'upvoteCount')\n      .pop();\n    const commentObj: any = children\n      .filter((obj) => obj.name == 'comment')\n      .pop();\n    const commentCountObj: any = children\n      .filter((obj) => obj.name == 'commentCount')\n      .pop();\n    const contentObj: any = children\n      .filter((obj) => obj.name == 'content')\n      .pop();\n\n    const oldTitleHeight = titleObj.height;\n    const oldDescHeight = descObj.height;\n    const oldAuthorHeight = authorObj.height;\n\n    titleObj.set({ text: title, dirty: true });\n    descObj.set({\n      text: desc.length > 200 ? desc.substr(0, 200) + '...' : desc,\n      dirty: true,\n    });\n\n    const titleDelta = titleObj.height - oldTitleHeight;\n    const authorDelta = authorObj.height - oldAuthorHeight;\n    const descDelta = descObj.height - oldDescHeight;\n\n    authorObj.set({ top: authorObj.top + titleDelta, dirty: true });\n    descObj.set({ top: descObj.top + titleDelta + authorDelta, dirty: true });\n    upvoteObj.set({\n      top: upvoteObj.top + titleDelta + authorDelta + descDelta,\n      dirty: true,\n    });\n    downvoteObj.set({\n      top: downvoteObj.top + titleDelta + authorDelta + descDelta,\n      dirty: true,\n    });\n    upvoteCountObj.set({\n      top: upvoteCountObj.top + titleDelta + authorDelta + descDelta,\n      dirty: true,\n    });\n    commentObj.set({\n      top: commentObj.top + titleDelta + authorDelta + descDelta,\n      dirty: true,\n    });\n    commentCountObj.set({\n      top: commentCountObj.top + titleDelta + authorDelta + descDelta,\n      dirty: true,\n    });\n    contentObj.set({\n      height: contentObj.height + titleDelta + descDelta,\n      dirty: true,\n    });\n\n    obj.desc = title;\n    obj.title = desc;\n    obj.dirty = true;\n    obj.addWithUpdate();\n    return obj;\n  }\n\n  /** \n  Applies a set of attributes to a post depending on which \n\ttag is being attached to the post.\n\n\tAttributes can range from changed border width, border color,\n\tpost color, etc. \n\n\t@param postID the post being tagged\n\t@param tag the tag being attached\n\t@returns display attributes for post or null if no special features\n\t*/\n  applyTagFeatures(postID: string, tag: Tag): DisplayAttributes | null {\n    if (tag.specialAttributes == null) {\n      return null;\n    }\n\n    const { borderColor, borderWidth, fillColor, opacity } =\n      tag.specialAttributes;\n\n    let fabricPost = this.getObjectFromId(postID);\n    if (fabricPost) {\n      fabricPost = this.setBorderColor(fabricPost, borderColor);\n      fabricPost = this.setBorderThickness(fabricPost, borderWidth);\n      fabricPost = this.setFillColor(fabricPost, fillColor);\n      fabricPost = this.setOpacity(fabricPost, opacity);\n      this._canvas.requestRenderAll();\n    }\n\n    return Object.assign(\n      {},\n      borderColor === null ? null : { borderColor },\n      borderWidth === null ? null : { borderWidth },\n      fillColor === null ? null : { fillColor },\n      opacity === null ? null : { opacity }\n    );\n  }\n\n  /** \n  Resets display attributes of a post to its default values.\n\n\tAttributes that are reset can range from changed border width, \n  border color,  post color, etc. \n\n\t@param postID the post being tagged\n\t@returns display attributes for post\n\t*/\n  async resetTagFeatures(postID: string): Promise<DisplayAttributes> {\n    let fabricPost = this.getObjectFromId(postID);\n    const fill = await this.defaultPostColor(fabricPost.userID);\n    if (fabricPost) {\n      fabricPost = this.setBorderColor(fabricPost, POST_DEFAULT_BORDER);\n      fabricPost = this.setBorderThickness(\n        fabricPost,\n        POST_DEFAULT_BORDER_THICKNESS\n      );\n      fabricPost = this.setFillColor(fabricPost, fill);\n      fabricPost = this.setOpacity(fabricPost, POST_DEFAULT_OPACITY);\n      this._canvas.requestRenderAll();\n    }\n\n    return {\n      borderColor: POST_DEFAULT_BORDER,\n      borderWidth: POST_DEFAULT_BORDER_THICKNESS,\n      fillColor: fill,\n      opacity: POST_DEFAULT_OPACITY,\n    };\n  }\n\n  /** \n  Sets the number of upvotes on a fabric post.\n\n\tWhen going from n-digit -> (n+1)-digit upvotes, the \n  button position will be adjusted to accomodate for extra space. \n\n\t@param fabricObject the post\n  @param amount new amount of upvotes\n\t@returns updated fabric post\n\t*/\n  setUpvoteCount(fabricObject: fabric.Group, amount: number): fabric.Group {\n    const upvoteCount: any = this.getChildFromGroup(\n      fabricObject,\n      'upvoteCount'\n    );\n    const downvote: any = this.getChildFromGroup(fabricObject, 'downvote');\n\n    const prevAmountDigits = upvoteCount.text.length;\n    const amountDigits = numDigits(amount);\n    const left = downvote.left + (amountDigits - prevAmountDigits) * 9;\n\n    upvoteCount.set({ text: amount.toString(), dirty: true });\n    downvote.set({ left, dirty: true });\n\n    fabricObject.dirty = true;\n    fabricObject.addWithUpdate();\n    return fabricObject;\n  }\n\n  /** \n  Sets the number of comments on a fabric post.\n\n\t@param fabricObj the post\n  @param amount new amount of comments\n\t@returns updated fabric post\n\t*/\n  setCommentCount(fabricObj: fabric.Group, amount: number): fabric.Group {\n    const comment: any = this.getChildFromGroup(fabricObj, 'comment');\n    const commentCount: any = this.getChildFromGroup(fabricObj, 'commentCount');\n\n    commentCount?.set({ text: amount.toString(), dirty: true });\n\n    if (amount >= 1) {\n      commentCount?.set({ opacity: 1, dirty: true });\n      comment?.set({ opacity: 1, dirty: true });\n    } else {\n      commentCount?.set({ opacity: 0, dirty: true });\n      comment?.set({ opacity: 0, dirty: true });\n    }\n\n    fabricObj.dirty = true;\n    fabricObj.addWithUpdate();\n    return fabricObj;\n  }\n\n  createImageSettings(image: fabric.Image): ImageSettings {\n    const dimensions = this._calcCanvasDimensions();\n    const scale = this._scaleImage(image, dimensions);\n    const offset = this._calcImageOffsets(image, scale, dimensions);\n\n    return {\n      top: offset.offsetY,\n      left: offset.offsetX,\n      width: image.width!,\n      height: image.height!,\n      scaleX: scale.scaleX,\n      scaleY: scale.scaleY,\n    };\n  }\n\n  animateToPosition(\n    object: fabric.Object,\n    left: number,\n    top: number,\n    callback: Function\n  ) {\n    object.animate(\n      { left, top },\n      {\n        onChange: this._canvas.renderAll.bind(this._canvas),\n        duration: 1000,\n        onComplete: callback,\n      }\n    );\n  }\n\n  setPostMovement(object: any, lock: boolean) {\n    object = object.set('lockMovementX', lock);\n    object = object.set('lockMovementY', lock);\n    return object;\n  }\n\n  setBackgroundImage(image: fabric.Image | string | undefined, settings?: any) {\n    if (image == null) {\n      image = new fabric.Image('');\n    }\n    this._canvas.setBackgroundImage(\n      image,\n      this._canvas.renderAll.bind(this._canvas),\n      settings\n    );\n  }\n\n  /**\n   * Returns designated post color for users depending on their role.\n   *\n   * @param userID id of user\n   * @returns color as string\n   */\n  async defaultPostColor(userID: string): Promise<string> {\n    const user = await this.userService.getOneById(userID);\n    return user.role === Role.TEACHER ? TEACHER_POST_COLOR : STUDENT_POST_COLOR;\n  }\n\n  /**\n   * Calculates the height and width of canvas.\n   *\n   * @returns dimensions of canvas\n   */\n  private _calcCanvasDimensions(): CanvasDimensions {\n    if (!this._canvas) {\n      return { width: window.innerWidth, height: window.innerHeight - 64 };\n    }\n\n    const vptCoords = this._canvas.vptCoords!;\n    let width = this._canvas.getWidth();\n    let height = this._canvas.getHeight();\n\n    if (vptCoords) {\n      width = Math.abs(vptCoords.tr.x - vptCoords.tl.x);\n      height = Math.abs(vptCoords.br.y - vptCoords.tr.y);\n    }\n\n    return { width, height };\n  }\n\n  /**\n   * Scales an image to appropriately fit canvas dimensions.\n   * Scales both width and height by smaller of two scales.\n   *\n   * Ex:\n   * image.width = 16\n   * image.height = 9\n   * scaleX = 2/16 = 1/8, scaleY = 2/9\n   * scaleX = 16/8 = 2, scaleY = 9/8 = 1.125\n   *\n   * @param image image to be scaled\n   * @param dimensions dimensions of canvas\n   * @returns x and y scaling amounts\n   */\n  private _scaleImage(\n    image: fabric.Image,\n    dimensions: CanvasDimensions\n  ): ImageScale {\n    let scaleX = dimensions.width / (image.width ?? 1);\n    let scaleY = dimensions.height / (image.height ?? 1);\n\n    if (scaleX <= scaleY) {\n      scaleY = scaleX;\n    } else {\n      scaleX = scaleY;\n    }\n\n    return { scaleX, scaleY };\n  }\n\n  /**\n   * Calculates vertical and horizontal offsets for image to be centered\n   * across canvas.\n   *\n   * @param image image to be centered\n   * @param scale vertical and horizontal scaling of image\n   * @param dimensions dimensions of canvas\n   * @returns horizontal and vertical offsets\n   */\n  private _calcImageOffsets(\n    image: fabric.Image,\n    scale: ImageScale,\n    dimensions: CanvasDimensions\n  ): ImageOffset {\n    const offsetX = Math.floor(\n      (dimensions.width - scale.scaleX * image.width!) / 2\n    );\n    const offsetY = Math.floor(\n      (dimensions.height - scale.scaleY * image.height!) / 2\n    );\n\n    const vptCoords = this._canvas?.vptCoords;\n    if (vptCoords) {\n      return {\n        offsetX: offsetX + vptCoords.tl.x,\n        offsetY: offsetY + vptCoords?.tl.y,\n      };\n    }\n\n    return { offsetX, offsetY };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}