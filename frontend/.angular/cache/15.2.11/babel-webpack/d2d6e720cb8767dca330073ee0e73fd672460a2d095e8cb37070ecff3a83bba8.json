{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-socket-io\";\nimport * as i2 from \"./trace.service\";\nexport class SocketService {\n  constructor(socket, traceService) {\n    this.socket = socket;\n    this.traceService = traceService;\n  }\n  /**\n   * Connect to specific board's websocket connection.\n   *\n   * @param boardID board's ID\n   * @returns void\n   */\n  connect(userID, boardID) {\n    this.socket.emit('join', userID, boardID);\n  }\n  /**\n   * Listen and handle specific incoming events.\n   *\n   * @param event event to listen for\n   * @param handler handler function once event is received\n   * @returns subscription object to unsubscribe from in the future\n   */\n  listen(event, handler) {\n    const observable = this.socket.fromEvent(event);\n    return observable.subscribe(value => handler(value));\n  }\n  /**\n   * Emits event to users connected to board.\n   *\n   * @param event event to emit\n   * @param value value to emit along with event\n   * @returns void\n   */\n  emit(event, value) {\n    const trace = this.traceService.getTraceContext();\n    const socketPayload = {\n      trace,\n      eventData: value\n    };\n    this.socket.emit(event, socketPayload);\n  }\n  /**\n   * Disconnect from board's websocket connection.\n   *\n   * @returns void\n   */\n  disconnect(userID, boardID) {\n    this.socket.emit('leave', userID, boardID);\n  }\n  disconnectAll(boardID) {\n    this.socket.emit('disconnectAll', boardID);\n  }\n}\nSocketService.ɵfac = function SocketService_Factory(t) {\n  return new (t || SocketService)(i0.ɵɵinject(i1.Socket), i0.ɵɵinject(i2.TraceService));\n};\nSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SocketService,\n  factory: SocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAUA,OAAM,MAAOA,aAAa;EACxBC,YAAoBC,MAAc,EAAUC,YAA0B;IAAlD,WAAM,GAAND,MAAM;IAAkB,iBAAY,GAAZC,YAAY;EAAiB;EAEzE;;;;;;EAMAC,OAAO,CAACC,MAAc,EAAEC,OAAe;IACrC,IAAI,CAACJ,MAAM,CAACK,IAAI,CAAC,MAAM,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC3C;EAEA;;;;;;;EAOAE,MAAM,CAACC,KAAkB,EAAEC,OAAiB;IAC1C,MAAMC,UAAU,GAAG,IAAI,CAACT,MAAM,CAACU,SAAS,CAAMH,KAAK,CAAC;IACpD,OAAOE,UAAU,CAACE,SAAS,CAAEC,KAAK,IAAKJ,OAAO,CAACI,KAAK,CAAC,CAAC;EACxD;EAEA;;;;;;;EAOAP,IAAI,CAACE,KAAkB,EAAEK,KAAU;IACjC,MAAMC,KAAK,GAAG,IAAI,CAACZ,YAAY,CAACa,eAAe,EAAE;IACjD,MAAMC,aAAa,GAAkB;MACnCF,KAAK;MACLG,SAAS,EAAEJ;KACZ;IACD,IAAI,CAACZ,MAAM,CAACK,IAAI,CAACE,KAAK,EAAEQ,aAAa,CAAC;EACxC;EAEA;;;;;EAKAE,UAAU,CAACd,MAAc,EAAEC,OAAe;IACxC,IAAI,CAACJ,MAAM,CAACK,IAAI,CAAC,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC5C;EAEAc,aAAa,CAACd,OAAO;IACnB,IAAI,CAACJ,MAAM,CAACK,IAAI,CAAC,eAAe,EAAED,OAAO,CAAC;EAC5C;;;mBApDWN,aAAa;AAAA;;SAAbA,aAAa;EAAAqB,SAAbrB,aAAa;EAAAsB,YAFZ;AAAM","names":["SocketService","constructor","socket","traceService","connect","userID","boardID","emit","listen","event","handler","observable","fromEvent","subscribe","value","trace","getTraceContext","socketPayload","eventData","disconnect","disconnectAll","factory","providedIn"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/services/socket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Socket } from 'ngx-socket-io';\nimport { Observable, Subscription } from 'rxjs';\nimport { SocketPayload } from '../models/socketPayload';\nimport { SocketEvent } from '../utils/constants';\nimport { TraceService } from './trace.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SocketService {\n  constructor(private socket: Socket, private traceService: TraceService) {}\n\n  /**\n   * Connect to specific board's websocket connection.\n   *\n   * @param boardID board's ID\n   * @returns void\n   */\n  connect(userID: string, boardID: string): void {\n    this.socket.emit('join', userID, boardID);\n  }\n\n  /**\n   * Listen and handle specific incoming events.\n   *\n   * @param event event to listen for\n   * @param handler handler function once event is received\n   * @returns subscription object to unsubscribe from in the future\n   */\n  listen(event: SocketEvent, handler: Function): Subscription {\n    const observable = this.socket.fromEvent<any>(event);\n    return observable.subscribe((value) => handler(value));\n  }\n\n  /**\n   * Emits event to users connected to board.\n   *\n   * @param event event to emit\n   * @param value value to emit along with event\n   * @returns void\n   */\n  emit(event: SocketEvent, value: any): void {\n    const trace = this.traceService.getTraceContext();\n    const socketPayload: SocketPayload = {\n      trace,\n      eventData: value,\n    };\n    this.socket.emit(event, socketPayload);\n  }\n\n  /**\n   * Disconnect from board's websocket connection.\n   *\n   * @returns void\n   */\n  disconnect(userID: string, boardID: string): void {\n    this.socket.emit('leave', userID, boardID);\n  }\n\n  disconnectAll(boardID): void {\n    this.socket.emit('disconnectAll', boardID);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}