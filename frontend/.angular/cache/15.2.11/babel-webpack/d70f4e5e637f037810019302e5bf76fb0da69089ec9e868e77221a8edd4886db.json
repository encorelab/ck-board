{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/table';\nimport { CdkTable, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, CDK_TABLE_TEMPLATE, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _MatTableDataSource } from '@angular/material/table';\nconst _c0 = [[[\"caption\"]], [[\"colgroup\"], [\"col\"]]];\nconst _c1 = [\"caption\", \"colgroup, col\"];\nfunction MatLegacyTextColumn_th_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r0.justify);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.headerText, \" \");\n  }\n}\nfunction MatLegacyTextColumn_td_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const data_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-align\", ctx_r1.justify);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.dataAccessor(data_r2, ctx_r1.name), \" \");\n  }\n}\nexport { _MatTableDataSource as _MatLegacyTableDataSource } from '@angular/material/table';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n * @deprecated Use `MatRecycleRows` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyRecycleRows {}\nMatLegacyRecycleRows.ɵfac = function MatLegacyRecycleRows_Factory(t) {\n  return new (t || MatLegacyRecycleRows)();\n};\nMatLegacyRecycleRows.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyRecycleRows,\n  selectors: [[\"mat-table\", \"recycleRows\", \"\"], [\"table\", \"mat-table\", \"\", \"recycleRows\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: _VIEW_REPEATER_STRATEGY,\n    useClass: _RecycleViewRepeaterStrategy\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyRecycleRows, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n      providers: [{\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _RecycleViewRepeaterStrategy\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @deprecated Use `MatTable` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyTable extends CdkTable {\n  constructor() {\n    super(...arguments);\n    /** Overrides the sticky CSS class set by the `CdkTable`. */\n    this.stickyCssClass = 'mat-table-sticky';\n    /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n    this.needsPositionStickyOnElement = false;\n  }\n}\nMatLegacyTable.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacyTable_BaseFactory;\n  return function MatLegacyTable_Factory(t) {\n    return (ɵMatLegacyTable_BaseFactory || (ɵMatLegacyTable_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyTable)))(t || MatLegacyTable);\n  };\n}();\nMatLegacyTable.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatLegacyTable,\n  selectors: [[\"mat-table\"], [\"table\", \"mat-table\", \"\"]],\n  hostAttrs: [1, \"mat-table\"],\n  hostVars: 2,\n  hostBindings: function MatLegacyTable_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-table-fixed-layout\", ctx.fixedLayout);\n    }\n  },\n  exportAs: [\"matTable\"],\n  features: [i0.ɵɵProvidersFeature([\n  // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n  //  is only included in the build if used.\n  {\n    provide: _VIEW_REPEATER_STRATEGY,\n    useClass: _DisposeViewRepeaterStrategy\n  }, {\n    provide: CdkTable,\n    useExisting: MatLegacyTable\n  }, {\n    provide: CDK_TABLE,\n    useExisting: MatLegacyTable\n  }, {\n    provide: _COALESCED_STYLE_SCHEDULER,\n    useClass: _CoalescedStyleScheduler\n  },\n  // Prevent nested tables from seeing this table's StickyPositioningListener.\n  {\n    provide: STICKY_POSITIONING_LISTENER,\n    useValue: null\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 6,\n  vars: 0,\n  consts: [[\"headerRowOutlet\", \"\"], [\"rowOutlet\", \"\"], [\"noDataRowOutlet\", \"\"], [\"footerRowOutlet\", \"\"]],\n  template: function MatLegacyTable_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c0);\n      i0.ɵɵprojection(0);\n      i0.ɵɵprojection(1, 1);\n      i0.ɵɵelementContainer(2, 0)(3, 1)(4, 2)(5, 3);\n    }\n  },\n  dependencies: [i1.DataRowOutlet, i1.HeaderRowOutlet, i1.FooterRowOutlet, i1.NoDataRowOutlet],\n  styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\"],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyTable, [{\n    type: Component,\n    args: [{\n      selector: 'mat-table, table[mat-table]',\n      exportAs: 'matTable',\n      template: CDK_TABLE_TEMPLATE,\n      host: {\n        'class': 'mat-table',\n        '[class.mat-table-fixed-layout]': 'fixedLayout'\n      },\n      providers: [\n      // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n      //  is only included in the build if used.\n      {\n        provide: _VIEW_REPEATER_STRATEGY,\n        useClass: _DisposeViewRepeaterStrategy\n      }, {\n        provide: CdkTable,\n        useExisting: MatLegacyTable\n      }, {\n        provide: CDK_TABLE,\n        useExisting: MatLegacyTable\n      }, {\n        provide: _COALESCED_STYLE_SCHEDULER,\n        useClass: _CoalescedStyleScheduler\n      },\n      // Prevent nested tables from seeing this table's StickyPositioningListener.\n      {\n        provide: STICKY_POSITIONING_LISTENER,\n        useValue: null\n      }],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\"]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n * @deprecated Use `MatCellDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyCellDef extends CdkCellDef {}\nMatLegacyCellDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacyCellDef_BaseFactory;\n  return function MatLegacyCellDef_Factory(t) {\n    return (ɵMatLegacyCellDef_BaseFactory || (ɵMatLegacyCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyCellDef)))(t || MatLegacyCellDef);\n  };\n}();\nMatLegacyCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyCellDef,\n  selectors: [[\"\", \"matCellDef\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkCellDef,\n    useExisting: MatLegacyCellDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matCellDef]',\n      providers: [{\n        provide: CdkCellDef,\n        useExisting: MatLegacyCellDef\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n * @deprecated Use `MatHeaderCellDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyHeaderCellDef extends CdkHeaderCellDef {}\nMatLegacyHeaderCellDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacyHeaderCellDef_BaseFactory;\n  return function MatLegacyHeaderCellDef_Factory(t) {\n    return (ɵMatLegacyHeaderCellDef_BaseFactory || (ɵMatLegacyHeaderCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyHeaderCellDef)))(t || MatLegacyHeaderCellDef);\n  };\n}();\nMatLegacyHeaderCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyHeaderCellDef,\n  selectors: [[\"\", \"matHeaderCellDef\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkHeaderCellDef,\n    useExisting: MatLegacyHeaderCellDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyHeaderCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matHeaderCellDef]',\n      providers: [{\n        provide: CdkHeaderCellDef,\n        useExisting: MatLegacyHeaderCellDef\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n * @deprecated Use `MatFooterCellDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyFooterCellDef extends CdkFooterCellDef {}\nMatLegacyFooterCellDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacyFooterCellDef_BaseFactory;\n  return function MatLegacyFooterCellDef_Factory(t) {\n    return (ɵMatLegacyFooterCellDef_BaseFactory || (ɵMatLegacyFooterCellDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyFooterCellDef)))(t || MatLegacyFooterCellDef);\n  };\n}();\nMatLegacyFooterCellDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyFooterCellDef,\n  selectors: [[\"\", \"matFooterCellDef\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkFooterCellDef,\n    useExisting: MatLegacyFooterCellDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyFooterCellDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matFooterCellDef]',\n      providers: [{\n        provide: CdkFooterCellDef,\n        useExisting: MatLegacyFooterCellDef\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n * @deprecated Use `MatColumnDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  get name() {\n    return this._name;\n  }\n  set name(name) {\n    this._setNameInput(name);\n  }\n  /**\n   * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n   * In the future, this will only add \"mat-column-\" and columnCssClassName\n   * will change from type string[] to string.\n   * @docs-private\n   */\n  _updateColumnCssClassName() {\n    super._updateColumnCssClassName();\n    this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n  }\n}\nMatLegacyColumnDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacyColumnDef_BaseFactory;\n  return function MatLegacyColumnDef_Factory(t) {\n    return (ɵMatLegacyColumnDef_BaseFactory || (ɵMatLegacyColumnDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyColumnDef)))(t || MatLegacyColumnDef);\n  };\n}();\nMatLegacyColumnDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyColumnDef,\n  selectors: [[\"\", \"matColumnDef\", \"\"]],\n  inputs: {\n    sticky: \"sticky\",\n    name: [\"matColumnDef\", \"name\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkColumnDef,\n    useExisting: MatLegacyColumnDef\n  }, {\n    provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n    useExisting: MatLegacyColumnDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyColumnDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matColumnDef]',\n      inputs: ['sticky'],\n      providers: [{\n        provide: CdkColumnDef,\n        useExisting: MatLegacyColumnDef\n      }, {\n        provide: 'MAT_SORT_HEADER_COLUMN_DEF',\n        useExisting: MatLegacyColumnDef\n      }]\n    }]\n  }], null, {\n    name: [{\n      type: Input,\n      args: ['matColumnDef']\n    }]\n  });\n})();\n/**\n * Header cell template container that adds the right classes and role.\n * @deprecated Use `MatHeaderCell` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyHeaderCell extends CdkHeaderCell {}\nMatLegacyHeaderCell.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacyHeaderCell_BaseFactory;\n  return function MatLegacyHeaderCell_Factory(t) {\n    return (ɵMatLegacyHeaderCell_BaseFactory || (ɵMatLegacyHeaderCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyHeaderCell)))(t || MatLegacyHeaderCell);\n  };\n}();\nMatLegacyHeaderCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyHeaderCell,\n  selectors: [[\"mat-header-cell\"], [\"th\", \"mat-header-cell\", \"\"]],\n  hostAttrs: [\"role\", \"columnheader\", 1, \"mat-header-cell\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyHeaderCell, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-header-cell, th[mat-header-cell]',\n      host: {\n        'class': 'mat-header-cell',\n        'role': 'columnheader'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Footer cell template container that adds the right classes and role.\n * @deprecated Use `MatFooterCell` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyFooterCell extends CdkFooterCell {}\nMatLegacyFooterCell.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacyFooterCell_BaseFactory;\n  return function MatLegacyFooterCell_Factory(t) {\n    return (ɵMatLegacyFooterCell_BaseFactory || (ɵMatLegacyFooterCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyFooterCell)))(t || MatLegacyFooterCell);\n  };\n}();\nMatLegacyFooterCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyFooterCell,\n  selectors: [[\"mat-footer-cell\"], [\"td\", \"mat-footer-cell\", \"\"]],\n  hostAttrs: [\"role\", \"gridcell\", 1, \"mat-footer-cell\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyFooterCell, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-footer-cell, td[mat-footer-cell]',\n      host: {\n        'class': 'mat-footer-cell',\n        'role': 'gridcell'\n      }\n    }]\n  }], null, null);\n})();\n/**\n * Cell template container that adds the right classes and role.\n * @deprecated Use `MatCell` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyCell extends CdkCell {}\nMatLegacyCell.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacyCell_BaseFactory;\n  return function MatLegacyCell_Factory(t) {\n    return (ɵMatLegacyCell_BaseFactory || (ɵMatLegacyCell_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyCell)))(t || MatLegacyCell);\n  };\n}();\nMatLegacyCell.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyCell,\n  selectors: [[\"mat-cell\"], [\"td\", \"mat-cell\", \"\"]],\n  hostAttrs: [\"role\", \"gridcell\", 1, \"mat-cell\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyCell, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-cell, td[mat-cell]',\n      host: {\n        'class': 'mat-cell',\n        'role': 'gridcell'\n      }\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n * @deprecated Use `MatHeaderRowDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyHeaderRowDef extends CdkHeaderRowDef {}\nMatLegacyHeaderRowDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacyHeaderRowDef_BaseFactory;\n  return function MatLegacyHeaderRowDef_Factory(t) {\n    return (ɵMatLegacyHeaderRowDef_BaseFactory || (ɵMatLegacyHeaderRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyHeaderRowDef)))(t || MatLegacyHeaderRowDef);\n  };\n}();\nMatLegacyHeaderRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyHeaderRowDef,\n  selectors: [[\"\", \"matHeaderRowDef\", \"\"]],\n  inputs: {\n    columns: [\"matHeaderRowDef\", \"columns\"],\n    sticky: [\"matHeaderRowDefSticky\", \"sticky\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkHeaderRowDef,\n    useExisting: MatLegacyHeaderRowDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyHeaderRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matHeaderRowDef]',\n      providers: [{\n        provide: CdkHeaderRowDef,\n        useExisting: MatLegacyHeaderRowDef\n      }],\n      inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky']\n    }]\n  }], null, null);\n})();\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n * @deprecated Use `MatFooterRowDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyFooterRowDef extends CdkFooterRowDef {}\nMatLegacyFooterRowDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacyFooterRowDef_BaseFactory;\n  return function MatLegacyFooterRowDef_Factory(t) {\n    return (ɵMatLegacyFooterRowDef_BaseFactory || (ɵMatLegacyFooterRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyFooterRowDef)))(t || MatLegacyFooterRowDef);\n  };\n}();\nMatLegacyFooterRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyFooterRowDef,\n  selectors: [[\"\", \"matFooterRowDef\", \"\"]],\n  inputs: {\n    columns: [\"matFooterRowDef\", \"columns\"],\n    sticky: [\"matFooterRowDefSticky\", \"sticky\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkFooterRowDef,\n    useExisting: MatLegacyFooterRowDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyFooterRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matFooterRowDef]',\n      providers: [{\n        provide: CdkFooterRowDef,\n        useExisting: MatLegacyFooterRowDef\n      }],\n      inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky']\n    }]\n  }], null, null);\n})();\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @deprecated Use `MatRowDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyRowDef extends CdkRowDef {}\nMatLegacyRowDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacyRowDef_BaseFactory;\n  return function MatLegacyRowDef_Factory(t) {\n    return (ɵMatLegacyRowDef_BaseFactory || (ɵMatLegacyRowDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyRowDef)))(t || MatLegacyRowDef);\n  };\n}();\nMatLegacyRowDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyRowDef,\n  selectors: [[\"\", \"matRowDef\", \"\"]],\n  inputs: {\n    columns: [\"matRowDefColumns\", \"columns\"],\n    when: [\"matRowDefWhen\", \"when\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkRowDef,\n    useExisting: MatLegacyRowDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyRowDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matRowDef]',\n      providers: [{\n        provide: CdkRowDef,\n        useExisting: MatLegacyRowDef\n      }],\n      inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen']\n    }]\n  }], null, null);\n})();\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n * @deprecated Use `MatHeaderRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyHeaderRow extends CdkHeaderRow {}\nMatLegacyHeaderRow.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacyHeaderRow_BaseFactory;\n  return function MatLegacyHeaderRow_Factory(t) {\n    return (ɵMatLegacyHeaderRow_BaseFactory || (ɵMatLegacyHeaderRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyHeaderRow)))(t || MatLegacyHeaderRow);\n  };\n}();\nMatLegacyHeaderRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatLegacyHeaderRow,\n  selectors: [[\"mat-header-row\"], [\"tr\", \"mat-header-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"mat-header-row\"],\n  exportAs: [\"matHeaderRow\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkHeaderRow,\n    useExisting: MatLegacyHeaderRow\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function MatLegacyHeaderRow_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [i1.CdkCellOutlet],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyHeaderRow, [{\n    type: Component,\n    args: [{\n      selector: 'mat-header-row, tr[mat-header-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'mat-header-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matHeaderRow',\n      providers: [{\n        provide: CdkHeaderRow,\n        useExisting: MatLegacyHeaderRow\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n * @deprecated Use `MatFooterRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyFooterRow extends CdkFooterRow {}\nMatLegacyFooterRow.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacyFooterRow_BaseFactory;\n  return function MatLegacyFooterRow_Factory(t) {\n    return (ɵMatLegacyFooterRow_BaseFactory || (ɵMatLegacyFooterRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyFooterRow)))(t || MatLegacyFooterRow);\n  };\n}();\nMatLegacyFooterRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatLegacyFooterRow,\n  selectors: [[\"mat-footer-row\"], [\"tr\", \"mat-footer-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"mat-footer-row\"],\n  exportAs: [\"matFooterRow\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkFooterRow,\n    useExisting: MatLegacyFooterRow\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function MatLegacyFooterRow_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [i1.CdkCellOutlet],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyFooterRow, [{\n    type: Component,\n    args: [{\n      selector: 'mat-footer-row, tr[mat-footer-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'mat-footer-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matFooterRow',\n      providers: [{\n        provide: CdkFooterRow,\n        useExisting: MatLegacyFooterRow\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n * @deprecated Use `MatRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyRow extends CdkRow {}\nMatLegacyRow.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacyRow_BaseFactory;\n  return function MatLegacyRow_Factory(t) {\n    return (ɵMatLegacyRow_BaseFactory || (ɵMatLegacyRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyRow)))(t || MatLegacyRow);\n  };\n}();\nMatLegacyRow.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatLegacyRow,\n  selectors: [[\"mat-row\"], [\"tr\", \"mat-row\", \"\"]],\n  hostAttrs: [\"role\", \"row\", 1, \"mat-row\"],\n  exportAs: [\"matRow\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkRow,\n    useExisting: MatLegacyRow\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"cdkCellOutlet\", \"\"]],\n  template: function MatLegacyRow_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [i1.CdkCellOutlet],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyRow, [{\n    type: Component,\n    args: [{\n      selector: 'mat-row, tr[mat-row]',\n      template: CDK_ROW_TEMPLATE,\n      host: {\n        'class': 'mat-row',\n        'role': 'row'\n      },\n      // See note on CdkTable for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matRow',\n      providers: [{\n        provide: CdkRow,\n        useExisting: MatLegacyRow\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Row that can be used to display a message when no data is shown in the table.\n * @deprecated Use `MatNoDataRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyNoDataRow extends CdkNoDataRow {\n  constructor() {\n    super(...arguments);\n    this._contentClassName = 'mat-no-data-row';\n  }\n}\nMatLegacyNoDataRow.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacyNoDataRow_BaseFactory;\n  return function MatLegacyNoDataRow_Factory(t) {\n    return (ɵMatLegacyNoDataRow_BaseFactory || (ɵMatLegacyNoDataRow_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyNoDataRow)))(t || MatLegacyNoDataRow);\n  };\n}();\nMatLegacyNoDataRow.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatLegacyNoDataRow,\n  selectors: [[\"ng-template\", \"matNoDataRow\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkNoDataRow,\n    useExisting: MatLegacyNoDataRow\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyNoDataRow, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[matNoDataRow]',\n      providers: [{\n        provide: CdkNoDataRow,\n        useExisting: MatLegacyNoDataRow\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n *\n * @deprecated Use `MatTextColumn` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyTextColumn extends CdkTextColumn {}\nMatLegacyTextColumn.ɵfac = /* @__PURE__ */function () {\n  let ɵMatLegacyTextColumn_BaseFactory;\n  return function MatLegacyTextColumn_Factory(t) {\n    return (ɵMatLegacyTextColumn_BaseFactory || (ɵMatLegacyTextColumn_BaseFactory = i0.ɵɵgetInheritedFactory(MatLegacyTextColumn)))(t || MatLegacyTextColumn);\n  };\n}();\nMatLegacyTextColumn.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatLegacyTextColumn,\n  selectors: [[\"mat-text-column\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 0,\n  consts: [[\"matColumnDef\", \"\"], [\"mat-header-cell\", \"\", 3, \"text-align\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 3, \"text-align\", 4, \"matCellDef\"], [\"mat-header-cell\", \"\"], [\"mat-cell\", \"\"]],\n  template: function MatLegacyTextColumn_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainerStart(0, 0);\n      i0.ɵɵtemplate(1, MatLegacyTextColumn_th_1_Template, 2, 3, \"th\", 1);\n      i0.ɵɵtemplate(2, MatLegacyTextColumn_td_2_Template, 2, 3, \"td\", 2);\n      i0.ɵɵelementContainerEnd();\n    }\n  },\n  dependencies: [MatLegacyHeaderCellDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyHeaderCell, MatLegacyCell],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyTextColumn, [{\n    type: Component,\n    args: [{\n      selector: 'mat-text-column',\n      template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      // Change detection is intentionally not set to OnPush. This component's template will be provided\n      // to the table to be inserted into its view. This is problematic when change detection runs since\n      // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n      // mean's the template in the table's view will not have the updated value (and in fact will cause\n      // an ExpressionChangedAfterItHasBeenCheckedError).\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n// Table\nMatLegacyTable, MatLegacyRecycleRows,\n// Template defs\nMatLegacyHeaderCellDef, MatLegacyHeaderRowDef, MatLegacyColumnDef, MatLegacyCellDef, MatLegacyRowDef, MatLegacyFooterCellDef, MatLegacyFooterRowDef,\n// Cell directives\nMatLegacyHeaderCell, MatLegacyCell, MatLegacyFooterCell,\n// Row directives\nMatLegacyHeaderRow, MatLegacyRow, MatLegacyFooterRow, MatLegacyNoDataRow, MatLegacyTextColumn];\n/**\n * @deprecated Use `MatTableModule` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyTableModule {}\nMatLegacyTableModule.ɵfac = function MatLegacyTableModule_Factory(t) {\n  return new (t || MatLegacyTableModule)();\n};\nMatLegacyTableModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatLegacyTableModule\n});\nMatLegacyTableModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CdkTableModule, MatCommonModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatLegacyTableModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTableModule, MatCommonModule],\n      exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n      declarations: EXPORTED_DECLARATIONS\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using paginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n *\n * @deprecated Use `MatTableDataSource` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyTableDataSource extends _MatTableDataSource {}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatLegacyCell, MatLegacyCellDef, MatLegacyColumnDef, MatLegacyFooterCell, MatLegacyFooterCellDef, MatLegacyFooterRow, MatLegacyFooterRowDef, MatLegacyHeaderCell, MatLegacyHeaderCellDef, MatLegacyHeaderRow, MatLegacyHeaderRowDef, MatLegacyNoDataRow, MatLegacyRecycleRows, MatLegacyRow, MatLegacyRowDef, MatLegacyTable, MatLegacyTableDataSource, MatLegacyTableModule, MatLegacyTextColumn };","map":{"version":3,"names":["i0","Directive","Component","ViewEncapsulation","ChangeDetectionStrategy","Input","NgModule","i1","CdkTable","CDK_TABLE","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","STICKY_POSITIONING_LISTENER","CDK_TABLE_TEMPLATE","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","CdkHeaderCell","CdkFooterCell","CdkCell","CdkHeaderRowDef","CdkFooterRowDef","CdkRowDef","CdkHeaderRow","CDK_ROW_TEMPLATE","CdkFooterRow","CdkRow","CdkNoDataRow","CdkTextColumn","CdkTableModule","_VIEW_REPEATER_STRATEGY","_RecycleViewRepeaterStrategy","_DisposeViewRepeaterStrategy","MatCommonModule","_MatTableDataSource","_MatLegacyTableDataSource","MatLegacyRecycleRows","ɵfac","ɵdir","provide","useClass","type","args","selector","providers","MatLegacyTable","constructor","arguments","stickyCssClass","needsPositionStickyOnElement","ɵcmp","useExisting","useValue","DataRowOutlet","HeaderRowOutlet","FooterRowOutlet","NoDataRowOutlet","exportAs","template","host","encapsulation","None","changeDetection","Default","styles","MatLegacyCellDef","MatLegacyHeaderCellDef","MatLegacyFooterCellDef","MatLegacyColumnDef","name","_name","_setNameInput","_updateColumnCssClassName","_columnCssClassName","push","cssClassFriendlyName","inputs","MatLegacyHeaderCell","MatLegacyFooterCell","MatLegacyCell","MatLegacyHeaderRowDef","MatLegacyFooterRowDef","MatLegacyRowDef","MatLegacyHeaderRow","CdkCellOutlet","MatLegacyFooterRow","MatLegacyRow","MatLegacyNoDataRow","_contentClassName","MatLegacyTextColumn","EXPORTED_DECLARATIONS","MatLegacyTableModule","ɵmod","ɵinj","imports","exports","declarations","MatLegacyTableDataSource"],"sources":["/Users/marieklinaeva/github/ck-board/frontend/node_modules/@angular/material/fesm2020/legacy-table.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/table';\nimport { CdkTable, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, CDK_TABLE_TEMPLATE, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _MatTableDataSource } from '@angular/material/table';\nexport { _MatTableDataSource as _MatLegacyTableDataSource } from '@angular/material/table';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n * @deprecated Use `MatRecycleRows` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyRecycleRows {\n}\nMatLegacyRecycleRows.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyRecycleRows.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyRecycleRows, selector: \"mat-table[recycleRows], table[mat-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @deprecated Use `MatTable` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyTable extends CdkTable {\n    constructor() {\n        super(...arguments);\n        /** Overrides the sticky CSS class set by the `CdkTable`. */\n        this.stickyCssClass = 'mat-table-sticky';\n        /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n        this.needsPositionStickyOnElement = false;\n    }\n}\nMatLegacyTable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyTable, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatLegacyTable.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyTable, selector: \"mat-table, table[mat-table]\", host: { properties: { \"class.mat-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"mat-table\" }, providers: [\n        // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n        //  is only included in the build if used.\n        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n        { provide: CdkTable, useExisting: MatLegacyTable },\n        { provide: CDK_TABLE, useExisting: MatLegacyTable },\n        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n        // Prevent nested tables from seeing this table's StickyPositioningListener.\n        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n    ], exportAs: [\"matTable\"], usesInheritance: true, ngImport: i0, template: \"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-content select=\\\"colgroup, col\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container noDataRowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\", isInline: true, styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\"], dependencies: [{ kind: \"directive\", type: i1.DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: i1.HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: i1.FooterRowOutlet, selector: \"[footerRowOutlet]\" }, { kind: \"directive\", type: i1.NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-table, table[mat-table]', exportAs: 'matTable', template: CDK_TABLE_TEMPLATE, host: {\n                        'class': 'mat-table',\n                        '[class.mat-table-fixed-layout]': 'fixedLayout',\n                    }, providers: [\n                        // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n                        //  is only included in the build if used.\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        { provide: CdkTable, useExisting: MatLegacyTable },\n                        { provide: CDK_TABLE, useExisting: MatLegacyTable },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\"] }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n * @deprecated Use `MatCellDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyCellDef extends CdkCellDef {\n}\nMatLegacyCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyCellDef, selector: \"[matCellDef]\", providers: [{ provide: CdkCellDef, useExisting: MatLegacyCellDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matCellDef]',\n                    providers: [{ provide: CdkCellDef, useExisting: MatLegacyCellDef }],\n                }]\n        }] });\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n * @deprecated Use `MatHeaderCellDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyHeaderCellDef extends CdkHeaderCellDef {\n}\nMatLegacyHeaderCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyHeaderCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyHeaderCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyHeaderCellDef, selector: \"[matHeaderCellDef]\", providers: [{ provide: CdkHeaderCellDef, useExisting: MatLegacyHeaderCellDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderCellDef]',\n                    providers: [{ provide: CdkHeaderCellDef, useExisting: MatLegacyHeaderCellDef }],\n                }]\n        }] });\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n * @deprecated Use `MatFooterCellDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyFooterCellDef extends CdkFooterCellDef {\n}\nMatLegacyFooterCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyFooterCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyFooterCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyFooterCellDef, selector: \"[matFooterCellDef]\", providers: [{ provide: CdkFooterCellDef, useExisting: MatLegacyFooterCellDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterCellDef]',\n                    providers: [{ provide: CdkFooterCellDef, useExisting: MatLegacyFooterCellDef }],\n                }]\n        }] });\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n * @deprecated Use `MatColumnDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        super._updateColumnCssClassName();\n        this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n}\nMatLegacyColumnDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyColumnDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyColumnDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyColumnDef, selector: \"[matColumnDef]\", inputs: { sticky: \"sticky\", name: [\"matColumnDef\", \"name\"] }, providers: [\n        { provide: CdkColumnDef, useExisting: MatLegacyColumnDef },\n        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatLegacyColumnDef },\n    ], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matColumnDef]',\n                    inputs: ['sticky'],\n                    providers: [\n                        { provide: CdkColumnDef, useExisting: MatLegacyColumnDef },\n                        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatLegacyColumnDef },\n                    ],\n                }]\n        }], propDecorators: { name: [{\n                type: Input,\n                args: ['matColumnDef']\n            }] } });\n/**\n * Header cell template container that adds the right classes and role.\n * @deprecated Use `MatHeaderCell` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyHeaderCell extends CdkHeaderCell {\n}\nMatLegacyHeaderCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyHeaderCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyHeaderCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"mat-header-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-header-cell, th[mat-header-cell]',\n                    host: {\n                        'class': 'mat-header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }] });\n/**\n * Footer cell template container that adds the right classes and role.\n * @deprecated Use `MatFooterCell` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyFooterCell extends CdkFooterCell {\n}\nMatLegacyFooterCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyFooterCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyFooterCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyFooterCell, selector: \"mat-footer-cell, td[mat-footer-cell]\", host: { attributes: { \"role\": \"gridcell\" }, classAttribute: \"mat-footer-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-footer-cell, td[mat-footer-cell]',\n                    host: {\n                        'class': 'mat-footer-cell',\n                        'role': 'gridcell',\n                    },\n                }]\n        }] });\n/**\n * Cell template container that adds the right classes and role.\n * @deprecated Use `MatCell` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyCell extends CdkCell {\n}\nMatLegacyCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyCell, selector: \"mat-cell, td[mat-cell]\", host: { attributes: { \"role\": \"gridcell\" }, classAttribute: \"mat-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-cell, td[mat-cell]',\n                    host: {\n                        'class': 'mat-cell',\n                        'role': 'gridcell',\n                    },\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n * @deprecated Use `MatHeaderRowDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyHeaderRowDef extends CdkHeaderRowDef {\n}\nMatLegacyHeaderRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyHeaderRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyHeaderRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyHeaderRowDef, selector: \"[matHeaderRowDef]\", inputs: { columns: [\"matHeaderRowDef\", \"columns\"], sticky: [\"matHeaderRowDefSticky\", \"sticky\"] }, providers: [{ provide: CdkHeaderRowDef, useExisting: MatLegacyHeaderRowDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderRowDef]',\n                    providers: [{ provide: CdkHeaderRowDef, useExisting: MatLegacyHeaderRowDef }],\n                    inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n                }]\n        }] });\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n * @deprecated Use `MatFooterRowDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyFooterRowDef extends CdkFooterRowDef {\n}\nMatLegacyFooterRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyFooterRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyFooterRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyFooterRowDef, selector: \"[matFooterRowDef]\", inputs: { columns: [\"matFooterRowDef\", \"columns\"], sticky: [\"matFooterRowDefSticky\", \"sticky\"] }, providers: [{ provide: CdkFooterRowDef, useExisting: MatLegacyFooterRowDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterRowDef]',\n                    providers: [{ provide: CdkFooterRowDef, useExisting: MatLegacyFooterRowDef }],\n                    inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n                }]\n        }] });\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @deprecated Use `MatRowDef` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyRowDef extends CdkRowDef {\n}\nMatLegacyRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyRowDef, selector: \"[matRowDef]\", inputs: { columns: [\"matRowDefColumns\", \"columns\"], when: [\"matRowDefWhen\", \"when\"] }, providers: [{ provide: CdkRowDef, useExisting: MatLegacyRowDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matRowDef]',\n                    providers: [{ provide: CdkRowDef, useExisting: MatLegacyRowDef }],\n                    inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n                }]\n        }] });\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n * @deprecated Use `MatHeaderRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyHeaderRow extends CdkHeaderRow {\n}\nMatLegacyHeaderRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyHeaderRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatLegacyHeaderRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyHeaderRow, selector: \"mat-header-row, tr[mat-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-header-row\" }, providers: [{ provide: CdkHeaderRow, useExisting: MatLegacyHeaderRow }], exportAs: [\"matHeaderRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-header-row, tr[mat-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matHeaderRow',\n                    providers: [{ provide: CdkHeaderRow, useExisting: MatLegacyHeaderRow }],\n                }]\n        }] });\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n * @deprecated Use `MatFooterRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyFooterRow extends CdkFooterRow {\n}\nMatLegacyFooterRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyFooterRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatLegacyFooterRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyFooterRow, selector: \"mat-footer-row, tr[mat-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-footer-row\" }, providers: [{ provide: CdkFooterRow, useExisting: MatLegacyFooterRow }], exportAs: [\"matFooterRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-footer-row, tr[mat-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matFooterRow',\n                    providers: [{ provide: CdkFooterRow, useExisting: MatLegacyFooterRow }],\n                }]\n        }] });\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n * @deprecated Use `MatRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyRow extends CdkRow {\n}\nMatLegacyRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatLegacyRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyRow, selector: \"mat-row, tr[mat-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-row\" }, providers: [{ provide: CdkRow, useExisting: MatLegacyRow }], exportAs: [\"matRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-row, tr[mat-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matRow',\n                    providers: [{ provide: CdkRow, useExisting: MatLegacyRow }],\n                }]\n        }] });\n/**\n * Row that can be used to display a message when no data is shown in the table.\n * @deprecated Use `MatNoDataRow` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyNoDataRow extends CdkNoDataRow {\n    constructor() {\n        super(...arguments);\n        this._contentClassName = 'mat-no-data-row';\n    }\n}\nMatLegacyNoDataRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyNoDataRow, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatLegacyNoDataRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyNoDataRow, selector: \"ng-template[matNoDataRow]\", providers: [{ provide: CdkNoDataRow, useExisting: MatLegacyNoDataRow }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matNoDataRow]',\n                    providers: [{ provide: CdkNoDataRow, useExisting: MatLegacyNoDataRow }],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n *\n * @deprecated Use `MatTextColumn` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyTextColumn extends CdkTextColumn {\n}\nMatLegacyTextColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyTextColumn, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatLegacyTextColumn.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatLegacyTextColumn, selector: \"mat-text-column\", usesInheritance: true, ngImport: i0, template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: MatLegacyHeaderCellDef, selector: \"[matHeaderCellDef]\" }, { kind: \"directive\", type: MatLegacyColumnDef, selector: \"[matColumnDef]\", inputs: [\"sticky\", \"matColumnDef\"] }, { kind: \"directive\", type: MatLegacyCellDef, selector: \"[matCellDef]\" }, { kind: \"directive\", type: MatLegacyHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\" }, { kind: \"directive\", type: MatLegacyCell, selector: \"mat-cell, td[mat-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-text-column',\n                    template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatLegacyTable,\n    MatLegacyRecycleRows,\n    // Template defs\n    MatLegacyHeaderCellDef,\n    MatLegacyHeaderRowDef,\n    MatLegacyColumnDef,\n    MatLegacyCellDef,\n    MatLegacyRowDef,\n    MatLegacyFooterCellDef,\n    MatLegacyFooterRowDef,\n    // Cell directives\n    MatLegacyHeaderCell,\n    MatLegacyCell,\n    MatLegacyFooterCell,\n    // Row directives\n    MatLegacyHeaderRow,\n    MatLegacyRow,\n    MatLegacyFooterRow,\n    MatLegacyNoDataRow,\n    MatLegacyTextColumn,\n];\n/**\n * @deprecated Use `MatTableModule` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyTableModule {\n}\nMatLegacyTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatLegacyTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyTableModule, declarations: [\n        // Table\n        MatLegacyTable,\n        MatLegacyRecycleRows,\n        // Template defs\n        MatLegacyHeaderCellDef,\n        MatLegacyHeaderRowDef,\n        MatLegacyColumnDef,\n        MatLegacyCellDef,\n        MatLegacyRowDef,\n        MatLegacyFooterCellDef,\n        MatLegacyFooterRowDef,\n        // Cell directives\n        MatLegacyHeaderCell,\n        MatLegacyCell,\n        MatLegacyFooterCell,\n        // Row directives\n        MatLegacyHeaderRow,\n        MatLegacyRow,\n        MatLegacyFooterRow,\n        MatLegacyNoDataRow,\n        MatLegacyTextColumn], imports: [CdkTableModule, MatCommonModule], exports: [MatCommonModule, \n        // Table\n        MatLegacyTable,\n        MatLegacyRecycleRows,\n        // Template defs\n        MatLegacyHeaderCellDef,\n        MatLegacyHeaderRowDef,\n        MatLegacyColumnDef,\n        MatLegacyCellDef,\n        MatLegacyRowDef,\n        MatLegacyFooterCellDef,\n        MatLegacyFooterRowDef,\n        // Cell directives\n        MatLegacyHeaderCell,\n        MatLegacyCell,\n        MatLegacyFooterCell,\n        // Row directives\n        MatLegacyHeaderRow,\n        MatLegacyRow,\n        MatLegacyFooterRow,\n        MatLegacyNoDataRow,\n        MatLegacyTextColumn] });\nMatLegacyTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyTableModule, imports: [CdkTableModule, MatCommonModule, MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatLegacyTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkTableModule, MatCommonModule],\n                    exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n                    declarations: EXPORTED_DECLARATIONS,\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using paginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n *\n * @deprecated Use `MatTableDataSource` from `@angular/material/table` instead. See https://material.angular.io/guide/mdc-migration for information about migrating.\n * @breaking-change 17.0.0\n */\nclass MatLegacyTableDataSource extends _MatTableDataSource {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatLegacyCell, MatLegacyCellDef, MatLegacyColumnDef, MatLegacyFooterCell, MatLegacyFooterCellDef, MatLegacyFooterRow, MatLegacyFooterRowDef, MatLegacyHeaderCell, MatLegacyHeaderCellDef, MatLegacyHeaderRow, MatLegacyHeaderRowDef, MatLegacyNoDataRow, MatLegacyRecycleRows, MatLegacyRow, MatLegacyRowDef, MatLegacyTable, MatLegacyTableDataSource, MatLegacyTableModule, MatLegacyTextColumn };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}