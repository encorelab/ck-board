{"ast":null,"code":"import _asyncToGenerator from \"/Users/marieklinaeva/github/ck-board/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __rest } from \"tslib\";\nimport { parseAsync } from 'json2csv';\nimport traceDefaults from './traceDefaults';\nimport * as dayjs from 'dayjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/trace.service\";\nimport * as i2 from \"src/app/services/project.service\";\nexport class CsvDownloadButtonComponent {\n  constructor(traceService, projectService) {\n    this.traceService = traceService;\n    this.projectService = projectService;\n  }\n  ngOnInit() {\n    this.projectService.get(this.projectID).then(project => {\n      this.project = project;\n    });\n  }\n  /**\n   * Converts csv string to csv file an downloads it\n   * @param csvContent Csv string to convert and download\n   */\n  downloadCSV(csvContent) {\n    const encodedUri = encodeURIComponent(csvContent);\n    // create a dummy link element to store csvContent\n    const link = document.createElement('a');\n    link.setAttribute('href', 'data:attachment/csv,' + encodedUri);\n    const dateString = dayjs().format('YYYY-MM-DD [at] hh.mm.ss A');\n    let fileName = 'CK_Trace ' + this.project.name + ' ' + dateString + '.csv';\n    fileName = fileName.replace(/\\s/g, '_');\n    link.setAttribute('download', fileName);\n    document.body.appendChild(link);\n    // click created link to dowload csv\n    link.click();\n  }\n  /**\n   * Fetches traces from backend and exports the data to a csv file\n   */\n  exportToCSV() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const traceCollection = yield _this.traceService.getTraceRecords(_this.projectID);\n      const traceData = [];\n      traceCollection.forEach(data => {\n        // for each trace, extract nested event object and flatten it\n        // before passing it to json2csv\n        const {\n            event\n          } = data,\n          otherfields = __rest(data, [\"event\"]);\n        traceData.push(Object.assign(Object.assign({}, otherfields), event));\n      });\n      // set defaults for fields and rename fields using traceDefaults\n      const csvContent = yield parseAsync(traceData, {\n        fields: traceDefaults\n      });\n      _this.downloadCSV(csvContent);\n    })();\n  }\n}\nCsvDownloadButtonComponent.ɵfac = function CsvDownloadButtonComponent_Factory(t) {\n  return new (t || CsvDownloadButtonComponent)(i0.ɵɵdirectiveInject(i1.TraceService), i0.ɵɵdirectiveInject(i2.ProjectService));\n};\nCsvDownloadButtonComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CsvDownloadButtonComponent,\n  selectors: [[\"app-csv-download-button\"]],\n  inputs: {\n    projectID: \"projectID\"\n  },\n  decls: 4,\n  vars: 0,\n  consts: [[\"mat-menu-item\", \"\", 3, \"click\"]],\n  template: function CsvDownloadButtonComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function CsvDownloadButtonComponent_Template_button_click_0_listener() {\n        return ctx.exportToCSV();\n      });\n      i0.ɵɵelementStart(1, \"mat-icon\");\n      i0.ɵɵtext(2, \"download\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(3, \" Export Data To CSV\\n\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;AACA,SAASA,UAAU,QAAQ,UAAU;AAErC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAO,KAAKC,KAAK,MAAM,OAAO;;;;AAS9B,OAAM,MAAOC,0BAA0B;EAIrCC,YACUC,YAA0B,EAC1BC,cAA8B;IAD9B,iBAAY,GAAZD,YAAY;IACZ,mBAAc,GAAdC,cAAc;EACrB;EAEHC,QAAQ;IACN,IAAI,CAACD,cAAc,CAACE,GAAG,CAAC,IAAI,CAACC,SAAS,CAAC,CAACC,IAAI,CAAEC,OAAO,IAAI;MACvD,IAAI,CAACA,OAAO,GAAGA,OAAO;IACxB,CAAC,CAAC;EACJ;EACA;;;;EAIAC,WAAW,CAACC,UAAkB;IAC5B,MAAMC,UAAU,GAAGC,kBAAkB,CAACF,UAAU,CAAC;IACjD;IACA,MAAMG,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,YAAY,CAAC,MAAM,EAAE,sBAAsB,GAAGL,UAAU,CAAC;IAC9D,MAAMM,UAAU,GAAGlB,KAAK,EAAE,CAACmB,MAAM,CAAC,4BAA4B,CAAC;IAC/D,IAAIC,QAAQ,GAAG,WAAW,GAAG,IAAI,CAACX,OAAO,CAACY,IAAI,GAAG,GAAG,GAAGH,UAAU,GAAG,MAAM;IAC1EE,QAAQ,GAAGA,QAAQ,CAACE,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;IACvCR,IAAI,CAACG,YAAY,CAAC,UAAU,EAAEG,QAAQ,CAAC;IACvCL,QAAQ,CAACQ,IAAI,CAACC,WAAW,CAACV,IAAI,CAAC;IAC/B;IACAA,IAAI,CAACW,KAAK,EAAE;EACd;EACA;;;EAGMC,WAAW;IAAA;IAAA;MACf,MAAMC,eAAe,SAAS,KAAI,CAACxB,YAAY,CAACyB,eAAe,CAC7D,KAAI,CAACrB,SAAS,CACf;MACD,MAAMsB,SAAS,GAAU,EAAE;MAC3BF,eAAe,CAACG,OAAO,CAAEC,IAAI,IAAI;QAC/B;QACA;QACA,MAAM;YAAEC;UAAK,IAAqBD,IAAI;UAApBE,WAAW,UAAKF,IAAI,EAAhC,SAAyB,CAAO;QACtCF,SAAS,CAACK,IAAI,iCACTD,WAAW,GACXD,KAAK,EACR;MACJ,CAAC,CAAC;MACF;MACA,MAAMrB,UAAU,SAASb,UAAU,CAAC+B,SAAS,EAAE;QAAEM,MAAM,EAAEpC;MAAa,CAAE,CAAC;MACzE,KAAI,CAACW,WAAW,CAACC,UAAU,CAAC;IAAC;EAC/B;;;mBAnDWV,0BAA0B;AAAA;;QAA1BA,0BAA0B;EAAAmC;EAAAC;IAAA9B;EAAA;EAAA+B;EAAAC;EAAAC;EAAAC;IAAA;MCbvCC,iCAA8C;MAAxBA;QAAA,OAASC,iBAAa;MAAA,EAAC;MAC3CD,gCAAU;MAAAA,wBAAQ;MAAAA,iBAAW;MAC7BA,qCACF;MAAAA,iBAAS","names":["parseAsync","traceDefaults","dayjs","CsvDownloadButtonComponent","constructor","traceService","projectService","ngOnInit","get","projectID","then","project","downloadCSV","csvContent","encodedUri","encodeURIComponent","link","document","createElement","setAttribute","dateString","format","fileName","name","replace","body","appendChild","click","exportToCSV","traceCollection","getTraceRecords","traceData","forEach","data","event","otherfields","push","fields","selectors","inputs","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/marieklinaeva/github/ck-board/frontend/src/app/components/csv-download-button/csv-download-button.component.ts","/Users/marieklinaeva/github/ck-board/frontend/src/app/components/csv-download-button/csv-download-button.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { parseAsync } from 'json2csv';\nimport { TraceService } from 'src/app/services/trace.service';\nimport traceDefaults from './traceDefaults';\nimport * as dayjs from 'dayjs';\nimport { ProjectService } from 'src/app/services/project.service';\nimport { Project } from 'src/app/models/project';\n\n@Component({\n  selector: 'app-csv-download-button',\n  templateUrl: './csv-download-button.component.html',\n  styleUrls: ['./csv-download-button.component.scss'],\n})\nexport class CsvDownloadButtonComponent implements OnInit {\n  @Input() projectID: string;\n  project: Project;\n\n  constructor(\n    private traceService: TraceService,\n    private projectService: ProjectService\n  ) {}\n\n  ngOnInit(): void {\n    this.projectService.get(this.projectID).then((project) => {\n      this.project = project;\n    });\n  }\n  /**\n   * Converts csv string to csv file an downloads it\n   * @param csvContent Csv string to convert and download\n   */\n  downloadCSV(csvContent: string): void {\n    const encodedUri = encodeURIComponent(csvContent);\n    // create a dummy link element to store csvContent\n    const link = document.createElement('a');\n    link.setAttribute('href', 'data:attachment/csv,' + encodedUri);\n    const dateString = dayjs().format('YYYY-MM-DD [at] hh.mm.ss A');\n    let fileName = 'CK_Trace ' + this.project.name + ' ' + dateString + '.csv';\n    fileName = fileName.replace(/\\s/g, '_');\n    link.setAttribute('download', fileName);\n    document.body.appendChild(link);\n    // click created link to dowload csv\n    link.click();\n  }\n  /**\n   * Fetches traces from backend and exports the data to a csv file\n   */\n  async exportToCSV(): Promise<void> {\n    const traceCollection = await this.traceService.getTraceRecords(\n      this.projectID\n    );\n    const traceData: any[] = [];\n    traceCollection.forEach((data) => {\n      // for each trace, extract nested event object and flatten it\n      // before passing it to json2csv\n      const { event, ...otherfields } = data;\n      traceData.push({\n        ...otherfields,\n        ...event,\n      });\n    });\n    // set defaults for fields and rename fields using traceDefaults\n    const csvContent = await parseAsync(traceData, { fields: traceDefaults });\n    this.downloadCSV(csvContent);\n  }\n}\n","<button mat-menu-item (click)=\"exportToCSV()\">\n  <mat-icon>download</mat-icon>\n  Export Data To CSV\n</button>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}